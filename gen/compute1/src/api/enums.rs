use super::*;



// region AccessConfigNetworkTierEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
pub enum AccessConfigNetworkTierEnum {
    

    /// Public internet quality with fixed bandwidth.
    ///
    /// "FIXED_STANDARD"
    #[serde(rename="FIXED_STANDARD")]
    FIXEDSTANDARD,
    

    /// High quality, Google-grade network tier, support for all networking products.
    ///
    /// "PREMIUM"
    #[serde(rename="PREMIUM")]
    PREMIUM,
    

    /// Public internet quality, only limited support for other networking products.
    ///
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
    

    /// (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    ///
    /// "STANDARD_OVERRIDES_FIXED_STANDARD"
    #[serde(rename="STANDARD_OVERRIDES_FIXED_STANDARD")]
    STANDARDOVERRIDESFIXEDSTANDARD,
}

impl AsRef<str> for AccessConfigNetworkTierEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AccessConfigNetworkTierEnum::FIXEDSTANDARD => "FIXED_STANDARD",
            AccessConfigNetworkTierEnum::PREMIUM => "PREMIUM",
            AccessConfigNetworkTierEnum::STANDARD => "STANDARD",
            AccessConfigNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD => "STANDARD_OVERRIDES_FIXED_STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for AccessConfigNetworkTierEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FIXED_STANDARD" => Ok(AccessConfigNetworkTierEnum::FIXEDSTANDARD),
           "PREMIUM" => Ok(AccessConfigNetworkTierEnum::PREMIUM),
           "STANDARD" => Ok(AccessConfigNetworkTierEnum::STANDARD),
           "STANDARD_OVERRIDES_FIXED_STANDARD" => Ok(AccessConfigNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AccessConfigNetworkTierEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AccessConfigTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of configuration. In accessConfigs (IPv4), the default and only option is ONE_TO_ONE_NAT. In ipv6AccessConfigs, the default and only option is DIRECT_IPV6.
pub enum AccessConfigTypeEnum {
    
    /// "DIRECT_IPV6"
    #[serde(rename="DIRECT_IPV6")]
    DIRECTIPV6,
    
    /// "ONE_TO_ONE_NAT"
    #[serde(rename="ONE_TO_ONE_NAT")]
    ONETOONENAT,
}

impl AsRef<str> for AccessConfigTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AccessConfigTypeEnum::DIRECTIPV6 => "DIRECT_IPV6",
            AccessConfigTypeEnum::ONETOONENAT => "ONE_TO_ONE_NAT",
        }
    }
}

impl std::convert::TryFrom< &str> for AccessConfigTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DIRECT_IPV6" => Ok(AccessConfigTypeEnum::DIRECTIPV6),
           "ONE_TO_ONE_NAT" => Ok(AccessConfigTypeEnum::ONETOONENAT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AccessConfigTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AddresAddressTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
pub enum AddresAddressTypeEnum {
    

    /// A publicly visible external IP address.
    ///
    /// "EXTERNAL"
    #[serde(rename="EXTERNAL")]
    EXTERNAL,
    

    /// A private network IP address, for use with an Instance or Internal Load Balancer forwarding rule.
    ///
    /// "INTERNAL"
    #[serde(rename="INTERNAL")]
    INTERNAL,
    
    /// "UNSPECIFIED_TYPE"
    #[serde(rename="UNSPECIFIED_TYPE")]
    UNSPECIFIEDTYPE,
}

impl AsRef<str> for AddresAddressTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AddresAddressTypeEnum::EXTERNAL => "EXTERNAL",
            AddresAddressTypeEnum::INTERNAL => "INTERNAL",
            AddresAddressTypeEnum::UNSPECIFIEDTYPE => "UNSPECIFIED_TYPE",
        }
    }
}

impl std::convert::TryFrom< &str> for AddresAddressTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EXTERNAL" => Ok(AddresAddressTypeEnum::EXTERNAL),
           "INTERNAL" => Ok(AddresAddressTypeEnum::INTERNAL),
           "UNSPECIFIED_TYPE" => Ok(AddresAddressTypeEnum::UNSPECIFIEDTYPE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AddresAddressTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AddresIpVersionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The IP version that will be used by this address. Valid options are IPV4 or IPV6.
pub enum AddresIpVersionEnum {
    
    /// "IPV4"
    #[serde(rename="IPV4")]
    IPV4,
    
    /// "IPV6"
    #[serde(rename="IPV6")]
    IPV6,
    
    /// "UNSPECIFIED_VERSION"
    #[serde(rename="UNSPECIFIED_VERSION")]
    UNSPECIFIEDVERSION,
}

impl AsRef<str> for AddresIpVersionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AddresIpVersionEnum::IPV4 => "IPV4",
            AddresIpVersionEnum::IPV6 => "IPV6",
            AddresIpVersionEnum::UNSPECIFIEDVERSION => "UNSPECIFIED_VERSION",
        }
    }
}

impl std::convert::TryFrom< &str> for AddresIpVersionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPV4" => Ok(AddresIpVersionEnum::IPV4),
           "IPV6" => Ok(AddresIpVersionEnum::IPV6),
           "UNSPECIFIED_VERSION" => Ok(AddresIpVersionEnum::UNSPECIFIEDVERSION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AddresIpVersionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AddresIpv6EndpointTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The endpoint type of this address, which should be VM or NETLB. This is used for deciding which type of endpoint this address can be used after the external IPv6 address reservation.
pub enum AddresIpv6EndpointTypeEnum {
    

    /// Reserved IPv6 address can be used on network load balancer.
    ///
    /// "NETLB"
    #[serde(rename="NETLB")]
    NETLB,
    

    /// Reserved IPv6 address can be used on VM.
    ///
    /// "VM"
    #[serde(rename="VM")]
    VM,
}

impl AsRef<str> for AddresIpv6EndpointTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AddresIpv6EndpointTypeEnum::NETLB => "NETLB",
            AddresIpv6EndpointTypeEnum::VM => "VM",
        }
    }
}

impl std::convert::TryFrom< &str> for AddresIpv6EndpointTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NETLB" => Ok(AddresIpv6EndpointTypeEnum::NETLB),
           "VM" => Ok(AddresIpv6EndpointTypeEnum::VM),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AddresIpv6EndpointTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AddresNetworkTierEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Internal IP addresses are always Premium Tier; global external IP addresses are always Premium Tier; regional external IP addresses can be either Standard or Premium Tier. If this field is not specified, it is assumed to be PREMIUM.
pub enum AddresNetworkTierEnum {
    

    /// Public internet quality with fixed bandwidth.
    ///
    /// "FIXED_STANDARD"
    #[serde(rename="FIXED_STANDARD")]
    FIXEDSTANDARD,
    

    /// High quality, Google-grade network tier, support for all networking products.
    ///
    /// "PREMIUM"
    #[serde(rename="PREMIUM")]
    PREMIUM,
    

    /// Public internet quality, only limited support for other networking products.
    ///
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
    

    /// (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    ///
    /// "STANDARD_OVERRIDES_FIXED_STANDARD"
    #[serde(rename="STANDARD_OVERRIDES_FIXED_STANDARD")]
    STANDARDOVERRIDESFIXEDSTANDARD,
}

impl AsRef<str> for AddresNetworkTierEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AddresNetworkTierEnum::FIXEDSTANDARD => "FIXED_STANDARD",
            AddresNetworkTierEnum::PREMIUM => "PREMIUM",
            AddresNetworkTierEnum::STANDARD => "STANDARD",
            AddresNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD => "STANDARD_OVERRIDES_FIXED_STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for AddresNetworkTierEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FIXED_STANDARD" => Ok(AddresNetworkTierEnum::FIXEDSTANDARD),
           "PREMIUM" => Ok(AddresNetworkTierEnum::PREMIUM),
           "STANDARD" => Ok(AddresNetworkTierEnum::STANDARD),
           "STANDARD_OVERRIDES_FIXED_STANDARD" => Ok(AddresNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AddresNetworkTierEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AddresPurposeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, load balancers, and similar resources. - DNS_RESOLVER for a DNS resolver address in a subnetwork for a Cloud DNS inbound forwarder IP addresses (regional internal IP address in a subnet of a VPC network) - VPC_PEERING for global internal IP addresses used for private services access allocated ranges. - NAT_AUTO for the regional external IP addresses used by Cloud NAT when allocating addresses using automatic NAT IP address allocation. - IPSEC_INTERCONNECT for addresses created from a private IP range that are reserved for a VLAN attachment in an *HA VPN over Cloud Interconnect* configuration. These addresses are regional resources. - `SHARED_LOADBALANCER_VIP` for an internal IP address that is assigned to multiple internal forwarding rules. - `PRIVATE_SERVICE_CONNECT` for a private network address that is used to configure Private Service Connect. Only global internal addresses can use this purpose. 
pub enum AddresPurposeEnum {
    

    /// DNS resolver address in the subnetwork.
    ///
    /// "DNS_RESOLVER"
    #[serde(rename="DNS_RESOLVER")]
    DNSRESOLVER,
    

    /// VM internal/alias IP, Internal LB service IP, etc.
    ///
    /// "GCE_ENDPOINT"
    #[serde(rename="GCE_ENDPOINT")]
    GCEENDPOINT,
    

    /// A regional internal IP address range reserved for the VLAN attachment that is used in HA VPN over Cloud Interconnect. This regional internal IP address range must not overlap with any IP address range of subnet/route in the VPC network and its peering networks. After the VLAN attachment is created with the reserved IP address range, when creating a new VPN gateway, its interface IP address is allocated from the associated VLAN attachment’s IP address range.
    ///
    /// "IPSEC_INTERCONNECT"
    #[serde(rename="IPSEC_INTERCONNECT")]
    IPSECINTERCONNECT,
    

    /// External IP automatically reserved for Cloud NAT.
    ///
    /// "NAT_AUTO"
    #[serde(rename="NAT_AUTO")]
    NATAUTO,
    

    /// A private network IP address that can be used to configure Private Service Connect. This purpose can be specified only for GLOBAL addresses of Type INTERNAL
    ///
    /// "PRIVATE_SERVICE_CONNECT"
    #[serde(rename="PRIVATE_SERVICE_CONNECT")]
    PRIVATESERVICECONNECT,
    

    /// A regional internal IP address range reserved for Serverless.
    ///
    /// "SERVERLESS"
    #[serde(rename="SERVERLESS")]
    SERVERLESS,
    

    /// A private network IP address that can be shared by multiple Internal Load Balancer forwarding rules.
    ///
    /// "SHARED_LOADBALANCER_VIP"
    #[serde(rename="SHARED_LOADBALANCER_VIP")]
    SHAREDLOADBALANCERVIP,
    

    /// IP range for peer networks.
    ///
    /// "VPC_PEERING"
    #[serde(rename="VPC_PEERING")]
    VPCPEERING,
}

impl AsRef<str> for AddresPurposeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AddresPurposeEnum::DNSRESOLVER => "DNS_RESOLVER",
            AddresPurposeEnum::GCEENDPOINT => "GCE_ENDPOINT",
            AddresPurposeEnum::IPSECINTERCONNECT => "IPSEC_INTERCONNECT",
            AddresPurposeEnum::NATAUTO => "NAT_AUTO",
            AddresPurposeEnum::PRIVATESERVICECONNECT => "PRIVATE_SERVICE_CONNECT",
            AddresPurposeEnum::SERVERLESS => "SERVERLESS",
            AddresPurposeEnum::SHAREDLOADBALANCERVIP => "SHARED_LOADBALANCER_VIP",
            AddresPurposeEnum::VPCPEERING => "VPC_PEERING",
        }
    }
}

impl std::convert::TryFrom< &str> for AddresPurposeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DNS_RESOLVER" => Ok(AddresPurposeEnum::DNSRESOLVER),
           "GCE_ENDPOINT" => Ok(AddresPurposeEnum::GCEENDPOINT),
           "IPSEC_INTERCONNECT" => Ok(AddresPurposeEnum::IPSECINTERCONNECT),
           "NAT_AUTO" => Ok(AddresPurposeEnum::NATAUTO),
           "PRIVATE_SERVICE_CONNECT" => Ok(AddresPurposeEnum::PRIVATESERVICECONNECT),
           "SERVERLESS" => Ok(AddresPurposeEnum::SERVERLESS),
           "SHARED_LOADBALANCER_VIP" => Ok(AddresPurposeEnum::SHAREDLOADBALANCERVIP),
           "VPC_PEERING" => Ok(AddresPurposeEnum::VPCPEERING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AddresPurposeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AddresStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
pub enum AddresStatusEnum {
    

    /// Address is being used by another resource and is not available.
    ///
    /// "IN_USE"
    #[serde(rename="IN_USE")]
    INUSE,
    

    /// Address is reserved and available to use.
    ///
    /// "RESERVED"
    #[serde(rename="RESERVED")]
    RESERVED,
    

    /// Address is being reserved.
    ///
    /// "RESERVING"
    #[serde(rename="RESERVING")]
    RESERVING,
}

impl AsRef<str> for AddresStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AddresStatusEnum::INUSE => "IN_USE",
            AddresStatusEnum::RESERVED => "RESERVED",
            AddresStatusEnum::RESERVING => "RESERVING",
        }
    }
}

impl std::convert::TryFrom< &str> for AddresStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IN_USE" => Ok(AddresStatusEnum::INUSE),
           "RESERVED" => Ok(AddresStatusEnum::RESERVED),
           "RESERVING" => Ok(AddresStatusEnum::RESERVING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AddresStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AllocationAggregateReservationVmFamilyEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The VM family that all instances scheduled against this reservation must belong to.
pub enum AllocationAggregateReservationVmFamilyEnum {
    
    /// "VM_FAMILY_CLOUD_TPU_LITE_DEVICE_CT5L"
    #[serde(rename="VM_FAMILY_CLOUD_TPU_LITE_DEVICE_CT5L")]
    VMFAMILYCLOUDTPULITEDEVICECT5L,
    
    /// "VM_FAMILY_CLOUD_TPU_LITE_POD_SLICE_CT5LP"
    #[serde(rename="VM_FAMILY_CLOUD_TPU_LITE_POD_SLICE_CT5LP")]
    VMFAMILYCLOUDTPULITEPODSLICECT5LP,
    
    /// "VM_FAMILY_CLOUD_TPU_POD_SLICE_CT4P"
    #[serde(rename="VM_FAMILY_CLOUD_TPU_POD_SLICE_CT4P")]
    VMFAMILYCLOUDTPUPODSLICECT4P,
}

impl AsRef<str> for AllocationAggregateReservationVmFamilyEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AllocationAggregateReservationVmFamilyEnum::VMFAMILYCLOUDTPULITEDEVICECT5L => "VM_FAMILY_CLOUD_TPU_LITE_DEVICE_CT5L",
            AllocationAggregateReservationVmFamilyEnum::VMFAMILYCLOUDTPULITEPODSLICECT5LP => "VM_FAMILY_CLOUD_TPU_LITE_POD_SLICE_CT5LP",
            AllocationAggregateReservationVmFamilyEnum::VMFAMILYCLOUDTPUPODSLICECT4P => "VM_FAMILY_CLOUD_TPU_POD_SLICE_CT4P",
        }
    }
}

impl std::convert::TryFrom< &str> for AllocationAggregateReservationVmFamilyEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "VM_FAMILY_CLOUD_TPU_LITE_DEVICE_CT5L" => Ok(AllocationAggregateReservationVmFamilyEnum::VMFAMILYCLOUDTPULITEDEVICECT5L),
           "VM_FAMILY_CLOUD_TPU_LITE_POD_SLICE_CT5LP" => Ok(AllocationAggregateReservationVmFamilyEnum::VMFAMILYCLOUDTPULITEPODSLICECT5LP),
           "VM_FAMILY_CLOUD_TPU_POD_SLICE_CT4P" => Ok(AllocationAggregateReservationVmFamilyEnum::VMFAMILYCLOUDTPUPODSLICECT4P),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AllocationAggregateReservationVmFamilyEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AllocationAggregateReservationWorkloadTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The workload type of the instances that will target this reservation.
pub enum AllocationAggregateReservationWorkloadTypeEnum {
    

    /// Reserved resources will be optimized for BATCH workloads, such as ML training.
    ///
    /// "BATCH"
    #[serde(rename="BATCH")]
    BATCH,
    

    /// Reserved resources will be optimized for SERVING workloads, such as ML inference.
    ///
    /// "SERVING"
    #[serde(rename="SERVING")]
    SERVING,
    
    /// "UNSPECIFIED"
    #[serde(rename="UNSPECIFIED")]
    UNSPECIFIED,
}

impl AsRef<str> for AllocationAggregateReservationWorkloadTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AllocationAggregateReservationWorkloadTypeEnum::BATCH => "BATCH",
            AllocationAggregateReservationWorkloadTypeEnum::SERVING => "SERVING",
            AllocationAggregateReservationWorkloadTypeEnum::UNSPECIFIED => "UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for AllocationAggregateReservationWorkloadTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "BATCH" => Ok(AllocationAggregateReservationWorkloadTypeEnum::BATCH),
           "SERVING" => Ok(AllocationAggregateReservationWorkloadTypeEnum::SERVING),
           "UNSPECIFIED" => Ok(AllocationAggregateReservationWorkloadTypeEnum::UNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AllocationAggregateReservationWorkloadTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
pub enum AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum {
    
    /// "NVME"
    #[serde(rename="NVME")]
    NVME,
    
    /// "SCSI"
    #[serde(rename="SCSI")]
    SCSI,
}

impl AsRef<str> for AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum::NVME => "NVME",
            AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum::SCSI => "SCSI",
        }
    }
}

impl std::convert::TryFrom< &str> for AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NVME" => Ok(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum::NVME),
           "SCSI" => Ok(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum::SCSI),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AttachedDiskArchitectureEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The architecture of the attached disk. Valid values are ARM64 or X86_64.
pub enum AttachedDiskArchitectureEnum {
    

    /// Default value indicating Architecture is not set.
    ///
    /// "ARCHITECTURE_UNSPECIFIED"
    #[serde(rename="ARCHITECTURE_UNSPECIFIED")]
    ARCHITECTUREUNSPECIFIED,
    

    /// Machines with architecture ARM64
    ///
    /// "ARM64"
    #[serde(rename="ARM64")]
    ARM64,
    

    /// Machines with architecture X86_64
    ///
    /// "X86_64"
    #[serde(rename="X86_64")]
    X8664,
}

impl AsRef<str> for AttachedDiskArchitectureEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AttachedDiskArchitectureEnum::ARCHITECTUREUNSPECIFIED => "ARCHITECTURE_UNSPECIFIED",
            AttachedDiskArchitectureEnum::ARM64 => "ARM64",
            AttachedDiskArchitectureEnum::X8664 => "X86_64",
        }
    }
}

impl std::convert::TryFrom< &str> for AttachedDiskArchitectureEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ARCHITECTURE_UNSPECIFIED" => Ok(AttachedDiskArchitectureEnum::ARCHITECTUREUNSPECIFIED),
           "ARM64" => Ok(AttachedDiskArchitectureEnum::ARM64),
           "X86_64" => Ok(AttachedDiskArchitectureEnum::X8664),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AttachedDiskArchitectureEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AttachedDiskInterfaceEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In certain configurations, persistent disks can use NVMe. For more information, see About persistent disks.
pub enum AttachedDiskInterfaceEnum {
    
    /// "NVME"
    #[serde(rename="NVME")]
    NVME,
    
    /// "SCSI"
    #[serde(rename="SCSI")]
    SCSI,
}

impl AsRef<str> for AttachedDiskInterfaceEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AttachedDiskInterfaceEnum::NVME => "NVME",
            AttachedDiskInterfaceEnum::SCSI => "SCSI",
        }
    }
}

impl std::convert::TryFrom< &str> for AttachedDiskInterfaceEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NVME" => Ok(AttachedDiskInterfaceEnum::NVME),
           "SCSI" => Ok(AttachedDiskInterfaceEnum::SCSI),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AttachedDiskInterfaceEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AttachedDiskModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
pub enum AttachedDiskModeEnum {
    

    /// Attaches this disk in read-only mode. Multiple virtual machines can use a disk in read-only mode at a time.
    ///
    /// "READ_ONLY"
    #[serde(rename="READ_ONLY")]
    READONLY,
    

    /// *[Default]* Attaches this disk in read-write mode. Only one virtual machine at a time can be attached to a disk in read-write mode.
    ///
    /// "READ_WRITE"
    #[serde(rename="READ_WRITE")]
    READWRITE,
}

impl AsRef<str> for AttachedDiskModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AttachedDiskModeEnum::READONLY => "READ_ONLY",
            AttachedDiskModeEnum::READWRITE => "READ_WRITE",
        }
    }
}

impl std::convert::TryFrom< &str> for AttachedDiskModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "READ_ONLY" => Ok(AttachedDiskModeEnum::READONLY),
           "READ_WRITE" => Ok(AttachedDiskModeEnum::READWRITE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AttachedDiskModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AttachedDiskSavedStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// For LocalSSD disks on VM Instances in STOPPED or SUSPENDED state, this field is set to PRESERVED if the LocalSSD data has been saved to a persistent location by customer request. (see the discard_local_ssd option on Stop/Suspend). Read-only in the api.
pub enum AttachedDiskSavedStateEnum {
    

    /// *[Default]* Disk state has not been preserved.
    ///
    /// "DISK_SAVED_STATE_UNSPECIFIED"
    #[serde(rename="DISK_SAVED_STATE_UNSPECIFIED")]
    DISKSAVEDSTATEUNSPECIFIED,
    

    /// Disk state has been preserved.
    ///
    /// "PRESERVED"
    #[serde(rename="PRESERVED")]
    PRESERVED,
}

impl AsRef<str> for AttachedDiskSavedStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AttachedDiskSavedStateEnum::DISKSAVEDSTATEUNSPECIFIED => "DISK_SAVED_STATE_UNSPECIFIED",
            AttachedDiskSavedStateEnum::PRESERVED => "PRESERVED",
        }
    }
}

impl std::convert::TryFrom< &str> for AttachedDiskSavedStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DISK_SAVED_STATE_UNSPECIFIED" => Ok(AttachedDiskSavedStateEnum::DISKSAVEDSTATEUNSPECIFIED),
           "PRESERVED" => Ok(AttachedDiskSavedStateEnum::PRESERVED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AttachedDiskSavedStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AttachedDiskTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
pub enum AttachedDiskTypeEnum {
    
    /// "PERSISTENT"
    #[serde(rename="PERSISTENT")]
    PERSISTENT,
    
    /// "SCRATCH"
    #[serde(rename="SCRATCH")]
    SCRATCH,
}

impl AsRef<str> for AttachedDiskTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AttachedDiskTypeEnum::PERSISTENT => "PERSISTENT",
            AttachedDiskTypeEnum::SCRATCH => "SCRATCH",
        }
    }
}

impl std::convert::TryFrom< &str> for AttachedDiskTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "PERSISTENT" => Ok(AttachedDiskTypeEnum::PERSISTENT),
           "SCRATCH" => Ok(AttachedDiskTypeEnum::SCRATCH),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AttachedDiskTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AttachedDiskInitializeParamArchitectureEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The architecture of the attached disk. Valid values are arm64 or x86_64.
pub enum AttachedDiskInitializeParamArchitectureEnum {
    

    /// Default value indicating Architecture is not set.
    ///
    /// "ARCHITECTURE_UNSPECIFIED"
    #[serde(rename="ARCHITECTURE_UNSPECIFIED")]
    ARCHITECTUREUNSPECIFIED,
    

    /// Machines with architecture ARM64
    ///
    /// "ARM64"
    #[serde(rename="ARM64")]
    ARM64,
    

    /// Machines with architecture X86_64
    ///
    /// "X86_64"
    #[serde(rename="X86_64")]
    X8664,
}

impl AsRef<str> for AttachedDiskInitializeParamArchitectureEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AttachedDiskInitializeParamArchitectureEnum::ARCHITECTUREUNSPECIFIED => "ARCHITECTURE_UNSPECIFIED",
            AttachedDiskInitializeParamArchitectureEnum::ARM64 => "ARM64",
            AttachedDiskInitializeParamArchitectureEnum::X8664 => "X86_64",
        }
    }
}

impl std::convert::TryFrom< &str> for AttachedDiskInitializeParamArchitectureEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ARCHITECTURE_UNSPECIFIED" => Ok(AttachedDiskInitializeParamArchitectureEnum::ARCHITECTUREUNSPECIFIED),
           "ARM64" => Ok(AttachedDiskInitializeParamArchitectureEnum::ARM64),
           "X86_64" => Ok(AttachedDiskInitializeParamArchitectureEnum::X8664),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AttachedDiskInitializeParamArchitectureEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AttachedDiskInitializeParamOnUpdateActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies which action to take on instance update with this disk. Default is to use the existing disk.
pub enum AttachedDiskInitializeParamOnUpdateActionEnum {
    

    /// Always recreate the disk.
    ///
    /// "RECREATE_DISK"
    #[serde(rename="RECREATE_DISK")]
    RECREATEDISK,
    

    /// Recreate the disk if source (image, snapshot) of this disk is different from source of existing disk.
    ///
    /// "RECREATE_DISK_IF_SOURCE_CHANGED"
    #[serde(rename="RECREATE_DISK_IF_SOURCE_CHANGED")]
    RECREATEDISKIFSOURCECHANGED,
    

    /// Use the existing disk, this is the default behaviour.
    ///
    /// "USE_EXISTING_DISK"
    #[serde(rename="USE_EXISTING_DISK")]
    USEEXISTINGDISK,
}

impl AsRef<str> for AttachedDiskInitializeParamOnUpdateActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AttachedDiskInitializeParamOnUpdateActionEnum::RECREATEDISK => "RECREATE_DISK",
            AttachedDiskInitializeParamOnUpdateActionEnum::RECREATEDISKIFSOURCECHANGED => "RECREATE_DISK_IF_SOURCE_CHANGED",
            AttachedDiskInitializeParamOnUpdateActionEnum::USEEXISTINGDISK => "USE_EXISTING_DISK",
        }
    }
}

impl std::convert::TryFrom< &str> for AttachedDiskInitializeParamOnUpdateActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "RECREATE_DISK" => Ok(AttachedDiskInitializeParamOnUpdateActionEnum::RECREATEDISK),
           "RECREATE_DISK_IF_SOURCE_CHANGED" => Ok(AttachedDiskInitializeParamOnUpdateActionEnum::RECREATEDISKIFSOURCECHANGED),
           "USE_EXISTING_DISK" => Ok(AttachedDiskInitializeParamOnUpdateActionEnum::USEEXISTINGDISK),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AttachedDiskInitializeParamOnUpdateActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AuditLogConfigLogTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The log type that this config enables.
pub enum AuditLogConfigLogTypeEnum {
    

    /// Admin reads. Example: CloudIAM getIamPolicy
    ///
    /// "ADMIN_READ"
    #[serde(rename="ADMIN_READ")]
    ADMINREAD,
    

    /// Data reads. Example: CloudSQL Users list
    ///
    /// "DATA_READ"
    #[serde(rename="DATA_READ")]
    DATAREAD,
    

    /// Data writes. Example: CloudSQL Users create
    ///
    /// "DATA_WRITE"
    #[serde(rename="DATA_WRITE")]
    DATAWRITE,
    

    /// Default case. Should never be this.
    ///
    /// "LOG_TYPE_UNSPECIFIED"
    #[serde(rename="LOG_TYPE_UNSPECIFIED")]
    LOGTYPEUNSPECIFIED,
}

impl AsRef<str> for AuditLogConfigLogTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AuditLogConfigLogTypeEnum::ADMINREAD => "ADMIN_READ",
            AuditLogConfigLogTypeEnum::DATAREAD => "DATA_READ",
            AuditLogConfigLogTypeEnum::DATAWRITE => "DATA_WRITE",
            AuditLogConfigLogTypeEnum::LOGTYPEUNSPECIFIED => "LOG_TYPE_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for AuditLogConfigLogTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ADMIN_READ" => Ok(AuditLogConfigLogTypeEnum::ADMINREAD),
           "DATA_READ" => Ok(AuditLogConfigLogTypeEnum::DATAREAD),
           "DATA_WRITE" => Ok(AuditLogConfigLogTypeEnum::DATAWRITE),
           "LOG_TYPE_UNSPECIFIED" => Ok(AuditLogConfigLogTypeEnum::LOGTYPEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AuditLogConfigLogTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AuthorizationLoggingOptionPermissionTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This is deprecated and has no effect. Do not use.
pub enum AuthorizationLoggingOptionPermissionTypeEnum {
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "ADMIN_READ"
    #[serde(rename="ADMIN_READ")]
    ADMINREAD,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "ADMIN_WRITE"
    #[serde(rename="ADMIN_WRITE")]
    ADMINWRITE,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "DATA_READ"
    #[serde(rename="DATA_READ")]
    DATAREAD,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "DATA_WRITE"
    #[serde(rename="DATA_WRITE")]
    DATAWRITE,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "PERMISSION_TYPE_UNSPECIFIED"
    #[serde(rename="PERMISSION_TYPE_UNSPECIFIED")]
    PERMISSIONTYPEUNSPECIFIED,
}

impl AsRef<str> for AuthorizationLoggingOptionPermissionTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AuthorizationLoggingOptionPermissionTypeEnum::ADMINREAD => "ADMIN_READ",
            AuthorizationLoggingOptionPermissionTypeEnum::ADMINWRITE => "ADMIN_WRITE",
            AuthorizationLoggingOptionPermissionTypeEnum::DATAREAD => "DATA_READ",
            AuthorizationLoggingOptionPermissionTypeEnum::DATAWRITE => "DATA_WRITE",
            AuthorizationLoggingOptionPermissionTypeEnum::PERMISSIONTYPEUNSPECIFIED => "PERMISSION_TYPE_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for AuthorizationLoggingOptionPermissionTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ADMIN_READ" => Ok(AuthorizationLoggingOptionPermissionTypeEnum::ADMINREAD),
           "ADMIN_WRITE" => Ok(AuthorizationLoggingOptionPermissionTypeEnum::ADMINWRITE),
           "DATA_READ" => Ok(AuthorizationLoggingOptionPermissionTypeEnum::DATAREAD),
           "DATA_WRITE" => Ok(AuthorizationLoggingOptionPermissionTypeEnum::DATAWRITE),
           "PERMISSION_TYPE_UNSPECIFIED" => Ok(AuthorizationLoggingOptionPermissionTypeEnum::PERMISSIONTYPEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AuthorizationLoggingOptionPermissionTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AutoscalerStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the autoscaler configuration. Current set of possible values: - PENDING: Autoscaler backend hasn't read new/updated configuration. - DELETING: Configuration is being deleted. - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field. - ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field. New values might be added in the future.
pub enum AutoscalerStatusEnum {
    

    /// Configuration is acknowledged to be effective
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// Configuration is being deleted
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// Configuration has errors. Actionable for users.
    ///
    /// "ERROR"
    #[serde(rename="ERROR")]
    ERROR,
    

    /// Autoscaler backend hasn't read new/updated configuration
    ///
    /// "PENDING"
    #[serde(rename="PENDING")]
    PENDING,
}

impl AsRef<str> for AutoscalerStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AutoscalerStatusEnum::ACTIVE => "ACTIVE",
            AutoscalerStatusEnum::DELETING => "DELETING",
            AutoscalerStatusEnum::ERROR => "ERROR",
            AutoscalerStatusEnum::PENDING => "PENDING",
        }
    }
}

impl std::convert::TryFrom< &str> for AutoscalerStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(AutoscalerStatusEnum::ACTIVE),
           "DELETING" => Ok(AutoscalerStatusEnum::DELETING),
           "ERROR" => Ok(AutoscalerStatusEnum::ERROR),
           "PENDING" => Ok(AutoscalerStatusEnum::PENDING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AutoscalerStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AutoscalerStatusDetailTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions.
pub enum AutoscalerStatusDetailTypeEnum {
    

    /// All instances in the instance group are unhealthy (not in RUNNING state).
    ///
    /// "ALL_INSTANCES_UNHEALTHY"
    #[serde(rename="ALL_INSTANCES_UNHEALTHY")]
    ALLINSTANCESUNHEALTHY,
    

    /// There is no backend service attached to the instance group.
    ///
    /// "BACKEND_SERVICE_DOES_NOT_EXIST"
    #[serde(rename="BACKEND_SERVICE_DOES_NOT_EXIST")]
    BACKENDSERVICEDOESNOTEXIST,
    

    /// Autoscaler recommends a size greater than maxNumReplicas.
    ///
    /// "CAPPED_AT_MAX_NUM_REPLICAS"
    #[serde(rename="CAPPED_AT_MAX_NUM_REPLICAS")]
    CAPPEDATMAXNUMREPLICAS,
    

    /// The custom metric samples are not exported often enough to be a credible base for autoscaling.
    ///
    /// "CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE"
    #[serde(rename="CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE")]
    CUSTOMMETRICDATAPOINTSTOOSPARSE,
    

    /// The custom metric that was specified does not exist or does not have the necessary labels.
    ///
    /// "CUSTOM_METRIC_INVALID"
    #[serde(rename="CUSTOM_METRIC_INVALID")]
    CUSTOMMETRICINVALID,
    

    /// The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group.
    ///
    /// "MIN_EQUALS_MAX"
    #[serde(rename="MIN_EQUALS_MAX")]
    MINEQUALSMAX,
    

    /// The autoscaler did not receive any data from the custom metric configured for autoscaling.
    ///
    /// "MISSING_CUSTOM_METRIC_DATA_POINTS"
    #[serde(rename="MISSING_CUSTOM_METRIC_DATA_POINTS")]
    MISSINGCUSTOMMETRICDATAPOINTS,
    

    /// The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer.
    ///
    /// "MISSING_LOAD_BALANCING_DATA_POINTS"
    #[serde(rename="MISSING_LOAD_BALANCING_DATA_POINTS")]
    MISSINGLOADBALANCINGDATAPOINTS,
    

    /// Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved.
    ///
    /// "MODE_OFF"
    #[serde(rename="MODE_OFF")]
    MODEOFF,
    

    /// Autoscaling is in the "Autoscale only scale out" mode. Instances in the group will be only added.
    ///
    /// "MODE_ONLY_SCALE_OUT"
    #[serde(rename="MODE_ONLY_SCALE_OUT")]
    MODEONLYSCALEOUT,
    

    /// Autoscaling is in the "Autoscale only out" mode. Instances in the group will be only added.
    ///
    /// "MODE_ONLY_UP"
    #[serde(rename="MODE_ONLY_UP")]
    MODEONLYUP,
    

    /// The instance group cannot be autoscaled because it has more than one backend service attached to it.
    ///
    /// "MORE_THAN_ONE_BACKEND_SERVICE"
    #[serde(rename="MORE_THAN_ONE_BACKEND_SERVICE")]
    MORETHANONEBACKENDSERVICE,
    

    /// There is insufficient quota for the necessary resources, such as CPU or number of instances.
    ///
    /// "NOT_ENOUGH_QUOTA_AVAILABLE"
    #[serde(rename="NOT_ENOUGH_QUOTA_AVAILABLE")]
    NOTENOUGHQUOTAAVAILABLE,
    

    /// Showed only for regional autoscalers: there is a resource stockout in the chosen region.
    ///
    /// "REGION_RESOURCE_STOCKOUT"
    #[serde(rename="REGION_RESOURCE_STOCKOUT")]
    REGIONRESOURCESTOCKOUT,
    

    /// The target to be scaled does not exist.
    ///
    /// "SCALING_TARGET_DOES_NOT_EXIST"
    #[serde(rename="SCALING_TARGET_DOES_NOT_EXIST")]
    SCALINGTARGETDOESNOTEXIST,
    

    /// For some scaling schedules minRequiredReplicas is greater than maxNumReplicas. Autoscaler always recommends at most maxNumReplicas instances.
    ///
    /// "SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX"
    #[serde(rename="SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX")]
    SCHEDULEDINSTANCESGREATERTHANAUTOSCALERMAX,
    

    /// For some scaling schedules minRequiredReplicas is less than minNumReplicas. Autoscaler always recommends at least minNumReplicas instances.
    ///
    /// "SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN"
    #[serde(rename="SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN")]
    SCHEDULEDINSTANCESLESSTHANAUTOSCALERMIN,
    
    /// "UNKNOWN"
    #[serde(rename="UNKNOWN")]
    UNKNOWN,
    

    /// Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate.
    ///
    /// "UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION"
    #[serde(rename="UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION")]
    UNSUPPORTEDMAXRATELOADBALANCINGCONFIGURATION,
    

    /// For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout.
    ///
    /// "ZONE_RESOURCE_STOCKOUT"
    #[serde(rename="ZONE_RESOURCE_STOCKOUT")]
    ZONERESOURCESTOCKOUT,
}

impl AsRef<str> for AutoscalerStatusDetailTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AutoscalerStatusDetailTypeEnum::ALLINSTANCESUNHEALTHY => "ALL_INSTANCES_UNHEALTHY",
            AutoscalerStatusDetailTypeEnum::BACKENDSERVICEDOESNOTEXIST => "BACKEND_SERVICE_DOES_NOT_EXIST",
            AutoscalerStatusDetailTypeEnum::CAPPEDATMAXNUMREPLICAS => "CAPPED_AT_MAX_NUM_REPLICAS",
            AutoscalerStatusDetailTypeEnum::CUSTOMMETRICDATAPOINTSTOOSPARSE => "CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE",
            AutoscalerStatusDetailTypeEnum::CUSTOMMETRICINVALID => "CUSTOM_METRIC_INVALID",
            AutoscalerStatusDetailTypeEnum::MINEQUALSMAX => "MIN_EQUALS_MAX",
            AutoscalerStatusDetailTypeEnum::MISSINGCUSTOMMETRICDATAPOINTS => "MISSING_CUSTOM_METRIC_DATA_POINTS",
            AutoscalerStatusDetailTypeEnum::MISSINGLOADBALANCINGDATAPOINTS => "MISSING_LOAD_BALANCING_DATA_POINTS",
            AutoscalerStatusDetailTypeEnum::MODEOFF => "MODE_OFF",
            AutoscalerStatusDetailTypeEnum::MODEONLYSCALEOUT => "MODE_ONLY_SCALE_OUT",
            AutoscalerStatusDetailTypeEnum::MODEONLYUP => "MODE_ONLY_UP",
            AutoscalerStatusDetailTypeEnum::MORETHANONEBACKENDSERVICE => "MORE_THAN_ONE_BACKEND_SERVICE",
            AutoscalerStatusDetailTypeEnum::NOTENOUGHQUOTAAVAILABLE => "NOT_ENOUGH_QUOTA_AVAILABLE",
            AutoscalerStatusDetailTypeEnum::REGIONRESOURCESTOCKOUT => "REGION_RESOURCE_STOCKOUT",
            AutoscalerStatusDetailTypeEnum::SCALINGTARGETDOESNOTEXIST => "SCALING_TARGET_DOES_NOT_EXIST",
            AutoscalerStatusDetailTypeEnum::SCHEDULEDINSTANCESGREATERTHANAUTOSCALERMAX => "SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX",
            AutoscalerStatusDetailTypeEnum::SCHEDULEDINSTANCESLESSTHANAUTOSCALERMIN => "SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN",
            AutoscalerStatusDetailTypeEnum::UNKNOWN => "UNKNOWN",
            AutoscalerStatusDetailTypeEnum::UNSUPPORTEDMAXRATELOADBALANCINGCONFIGURATION => "UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION",
            AutoscalerStatusDetailTypeEnum::ZONERESOURCESTOCKOUT => "ZONE_RESOURCE_STOCKOUT",
        }
    }
}

impl std::convert::TryFrom< &str> for AutoscalerStatusDetailTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALL_INSTANCES_UNHEALTHY" => Ok(AutoscalerStatusDetailTypeEnum::ALLINSTANCESUNHEALTHY),
           "BACKEND_SERVICE_DOES_NOT_EXIST" => Ok(AutoscalerStatusDetailTypeEnum::BACKENDSERVICEDOESNOTEXIST),
           "CAPPED_AT_MAX_NUM_REPLICAS" => Ok(AutoscalerStatusDetailTypeEnum::CAPPEDATMAXNUMREPLICAS),
           "CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE" => Ok(AutoscalerStatusDetailTypeEnum::CUSTOMMETRICDATAPOINTSTOOSPARSE),
           "CUSTOM_METRIC_INVALID" => Ok(AutoscalerStatusDetailTypeEnum::CUSTOMMETRICINVALID),
           "MIN_EQUALS_MAX" => Ok(AutoscalerStatusDetailTypeEnum::MINEQUALSMAX),
           "MISSING_CUSTOM_METRIC_DATA_POINTS" => Ok(AutoscalerStatusDetailTypeEnum::MISSINGCUSTOMMETRICDATAPOINTS),
           "MISSING_LOAD_BALANCING_DATA_POINTS" => Ok(AutoscalerStatusDetailTypeEnum::MISSINGLOADBALANCINGDATAPOINTS),
           "MODE_OFF" => Ok(AutoscalerStatusDetailTypeEnum::MODEOFF),
           "MODE_ONLY_SCALE_OUT" => Ok(AutoscalerStatusDetailTypeEnum::MODEONLYSCALEOUT),
           "MODE_ONLY_UP" => Ok(AutoscalerStatusDetailTypeEnum::MODEONLYUP),
           "MORE_THAN_ONE_BACKEND_SERVICE" => Ok(AutoscalerStatusDetailTypeEnum::MORETHANONEBACKENDSERVICE),
           "NOT_ENOUGH_QUOTA_AVAILABLE" => Ok(AutoscalerStatusDetailTypeEnum::NOTENOUGHQUOTAAVAILABLE),
           "REGION_RESOURCE_STOCKOUT" => Ok(AutoscalerStatusDetailTypeEnum::REGIONRESOURCESTOCKOUT),
           "SCALING_TARGET_DOES_NOT_EXIST" => Ok(AutoscalerStatusDetailTypeEnum::SCALINGTARGETDOESNOTEXIST),
           "SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX" => Ok(AutoscalerStatusDetailTypeEnum::SCHEDULEDINSTANCESGREATERTHANAUTOSCALERMAX),
           "SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN" => Ok(AutoscalerStatusDetailTypeEnum::SCHEDULEDINSTANCESLESSTHANAUTOSCALERMIN),
           "UNKNOWN" => Ok(AutoscalerStatusDetailTypeEnum::UNKNOWN),
           "UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION" => Ok(AutoscalerStatusDetailTypeEnum::UNSUPPORTEDMAXRATELOADBALANCINGCONFIGURATION),
           "ZONE_RESOURCE_STOCKOUT" => Ok(AutoscalerStatusDetailTypeEnum::ZONERESOURCESTOCKOUT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AutoscalerStatusDetailTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AutoscalingPolicyModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Defines the operating mode for this policy. The following modes are available: - OFF: Disables the autoscaler but maintains its configuration. - ONLY_SCALE_OUT: Restricts the autoscaler to add VM instances only. - ON: Enables all autoscaler activities according to its policy. For more information, see "Turning off or restricting an autoscaler"
pub enum AutoscalingPolicyModeEnum {
    

    /// Do not automatically scale the MIG in or out. The recommended_size field contains the size of MIG that would be set if the actuation mode was enabled.
    ///
    /// "OFF"
    #[serde(rename="OFF")]
    OFF,
    

    /// Automatically scale the MIG in and out according to the policy.
    ///
    /// "ON"
    #[serde(rename="ON")]
    ON,
    

    /// Automatically create VMs according to the policy, but do not scale the MIG in.
    ///
    /// "ONLY_SCALE_OUT"
    #[serde(rename="ONLY_SCALE_OUT")]
    ONLYSCALEOUT,
    

    /// Automatically create VMs according to the policy, but do not scale the MIG in.
    ///
    /// "ONLY_UP"
    #[serde(rename="ONLY_UP")]
    ONLYUP,
}

impl AsRef<str> for AutoscalingPolicyModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AutoscalingPolicyModeEnum::OFF => "OFF",
            AutoscalingPolicyModeEnum::ON => "ON",
            AutoscalingPolicyModeEnum::ONLYSCALEOUT => "ONLY_SCALE_OUT",
            AutoscalingPolicyModeEnum::ONLYUP => "ONLY_UP",
        }
    }
}

impl std::convert::TryFrom< &str> for AutoscalingPolicyModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "OFF" => Ok(AutoscalingPolicyModeEnum::OFF),
           "ON" => Ok(AutoscalingPolicyModeEnum::ON),
           "ONLY_SCALE_OUT" => Ok(AutoscalingPolicyModeEnum::ONLYSCALEOUT),
           "ONLY_UP" => Ok(AutoscalingPolicyModeEnum::ONLYUP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AutoscalingPolicyModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AutoscalingPolicyCpuUtilizationPredictiveMethodEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
pub enum AutoscalingPolicyCpuUtilizationPredictiveMethodEnum {
    

    /// No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
    ///
    /// "OPTIMIZE_AVAILABILITY"
    #[serde(rename="OPTIMIZE_AVAILABILITY")]
    OPTIMIZEAVAILABILITY,
}

impl AsRef<str> for AutoscalingPolicyCpuUtilizationPredictiveMethodEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AutoscalingPolicyCpuUtilizationPredictiveMethodEnum::NONE => "NONE",
            AutoscalingPolicyCpuUtilizationPredictiveMethodEnum::OPTIMIZEAVAILABILITY => "OPTIMIZE_AVAILABILITY",
        }
    }
}

impl std::convert::TryFrom< &str> for AutoscalingPolicyCpuUtilizationPredictiveMethodEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(AutoscalingPolicyCpuUtilizationPredictiveMethodEnum::NONE),
           "OPTIMIZE_AVAILABILITY" => Ok(AutoscalingPolicyCpuUtilizationPredictiveMethodEnum::OPTIMIZEAVAILABILITY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AutoscalingPolicyCpuUtilizationPredictiveMethodEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
pub enum AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum {
    

    /// Sets the utilization target value for a cumulative or delta metric, expressed as the rate of growth per minute.
    ///
    /// "DELTA_PER_MINUTE"
    #[serde(rename="DELTA_PER_MINUTE")]
    DELTAPERMINUTE,
    

    /// Sets the utilization target value for a cumulative or delta metric, expressed as the rate of growth per second.
    ///
    /// "DELTA_PER_SECOND"
    #[serde(rename="DELTA_PER_SECOND")]
    DELTAPERSECOND,
    

    /// Sets the utilization target value for a gauge metric. The autoscaler will collect the average utilization of the virtual machines from the last couple of minutes, and compare the value to the utilization target value to perform autoscaling.
    ///
    /// "GAUGE"
    #[serde(rename="GAUGE")]
    GAUGE,
}

impl AsRef<str> for AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum::DELTAPERMINUTE => "DELTA_PER_MINUTE",
            AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum::DELTAPERSECOND => "DELTA_PER_SECOND",
            AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum::GAUGE => "GAUGE",
        }
    }
}

impl std::convert::TryFrom< &str> for AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DELTA_PER_MINUTE" => Ok(AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum::DELTAPERMINUTE),
           "DELTA_PER_SECOND" => Ok(AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum::DELTAPERSECOND),
           "GAUGE" => Ok(AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum::GAUGE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendBalancingModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
pub enum BackendBalancingModeEnum {
    

    /// Balance based on the number of simultaneous connections.
    ///
    /// "CONNECTION"
    #[serde(rename="CONNECTION")]
    CONNECTION,
    

    /// Balance based on requests per second (RPS).
    ///
    /// "RATE"
    #[serde(rename="RATE")]
    RATE,
    

    /// Balance based on the backend utilization.
    ///
    /// "UTILIZATION"
    #[serde(rename="UTILIZATION")]
    UTILIZATION,
}

impl AsRef<str> for BackendBalancingModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendBalancingModeEnum::CONNECTION => "CONNECTION",
            BackendBalancingModeEnum::RATE => "RATE",
            BackendBalancingModeEnum::UTILIZATION => "UTILIZATION",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendBalancingModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CONNECTION" => Ok(BackendBalancingModeEnum::CONNECTION),
           "RATE" => Ok(BackendBalancingModeEnum::RATE),
           "UTILIZATION" => Ok(BackendBalancingModeEnum::UTILIZATION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendBalancingModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendPreferenceEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This field indicates whether this backend should be fully utilized before sending traffic to backends with default preference. The possible values are: - PREFERRED: Backends with this preference level will be filled up to their capacity limits first, based on RTT. - DEFAULT: If preferred backends don't have enough capacity, backends in this layer would be used and traffic would be assigned based on the load balancing algorithm you use. This is the default 
pub enum BackendPreferenceEnum {
    

    /// No preference.
    ///
    /// "DEFAULT"
    #[serde(rename="DEFAULT")]
    DEFAULT,
    

    /// If preference is unspecified, we set it to the DEFAULT value
    ///
    /// "PREFERENCE_UNSPECIFIED"
    #[serde(rename="PREFERENCE_UNSPECIFIED")]
    PREFERENCEUNSPECIFIED,
    

    /// Traffic will be sent to this backend first.
    ///
    /// "PREFERRED"
    #[serde(rename="PREFERRED")]
    PREFERRED,
}

impl AsRef<str> for BackendPreferenceEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendPreferenceEnum::DEFAULT => "DEFAULT",
            BackendPreferenceEnum::PREFERENCEUNSPECIFIED => "PREFERENCE_UNSPECIFIED",
            BackendPreferenceEnum::PREFERRED => "PREFERRED",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendPreferenceEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DEFAULT" => Ok(BackendPreferenceEnum::DEFAULT),
           "PREFERENCE_UNSPECIFIED" => Ok(BackendPreferenceEnum::PREFERENCEUNSPECIFIED),
           "PREFERRED" => Ok(BackendPreferenceEnum::PREFERRED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendPreferenceEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendBucketCompressionModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
pub enum BackendBucketCompressionModeEnum {
    

    /// Automatically uses the best compression based on the Accept-Encoding header sent by the client.
    ///
    /// "AUTOMATIC"
    #[serde(rename="AUTOMATIC")]
    AUTOMATIC,
    

    /// Disables compression. Existing compressed responses cached by Cloud CDN will not be served to clients.
    ///
    /// "DISABLED"
    #[serde(rename="DISABLED")]
    DISABLED,
}

impl AsRef<str> for BackendBucketCompressionModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendBucketCompressionModeEnum::AUTOMATIC => "AUTOMATIC",
            BackendBucketCompressionModeEnum::DISABLED => "DISABLED",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendBucketCompressionModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AUTOMATIC" => Ok(BackendBucketCompressionModeEnum::AUTOMATIC),
           "DISABLED" => Ok(BackendBucketCompressionModeEnum::DISABLED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendBucketCompressionModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendBucketCdnPolicyCacheModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
pub enum BackendBucketCdnPolicyCacheModeEnum {
    

    /// Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    ///
    /// "CACHE_ALL_STATIC"
    #[serde(rename="CACHE_ALL_STATIC")]
    CACHEALLSTATIC,
    

    /// Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
    ///
    /// "FORCE_CACHE_ALL"
    #[serde(rename="FORCE_CACHE_ALL")]
    FORCECACHEALL,
    
    /// "INVALID_CACHE_MODE"
    #[serde(rename="INVALID_CACHE_MODE")]
    INVALIDCACHEMODE,
    

    /// Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
    ///
    /// "USE_ORIGIN_HEADERS"
    #[serde(rename="USE_ORIGIN_HEADERS")]
    USEORIGINHEADERS,
}

impl AsRef<str> for BackendBucketCdnPolicyCacheModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendBucketCdnPolicyCacheModeEnum::CACHEALLSTATIC => "CACHE_ALL_STATIC",
            BackendBucketCdnPolicyCacheModeEnum::FORCECACHEALL => "FORCE_CACHE_ALL",
            BackendBucketCdnPolicyCacheModeEnum::INVALIDCACHEMODE => "INVALID_CACHE_MODE",
            BackendBucketCdnPolicyCacheModeEnum::USEORIGINHEADERS => "USE_ORIGIN_HEADERS",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendBucketCdnPolicyCacheModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CACHE_ALL_STATIC" => Ok(BackendBucketCdnPolicyCacheModeEnum::CACHEALLSTATIC),
           "FORCE_CACHE_ALL" => Ok(BackendBucketCdnPolicyCacheModeEnum::FORCECACHEALL),
           "INVALID_CACHE_MODE" => Ok(BackendBucketCdnPolicyCacheModeEnum::INVALIDCACHEMODE),
           "USE_ORIGIN_HEADERS" => Ok(BackendBucketCdnPolicyCacheModeEnum::USEORIGINHEADERS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendBucketCdnPolicyCacheModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceCompressionModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
pub enum BackendServiceCompressionModeEnum {
    

    /// Automatically uses the best compression based on the Accept-Encoding header sent by the client.
    ///
    /// "AUTOMATIC"
    #[serde(rename="AUTOMATIC")]
    AUTOMATIC,
    

    /// Disables compression. Existing compressed responses cached by Cloud CDN will not be served to clients.
    ///
    /// "DISABLED"
    #[serde(rename="DISABLED")]
    DISABLED,
}

impl AsRef<str> for BackendServiceCompressionModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceCompressionModeEnum::AUTOMATIC => "AUTOMATIC",
            BackendServiceCompressionModeEnum::DISABLED => "DISABLED",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceCompressionModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AUTOMATIC" => Ok(BackendServiceCompressionModeEnum::AUTOMATIC),
           "DISABLED" => Ok(BackendServiceCompressionModeEnum::DISABLED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceCompressionModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceLoadBalancingSchemeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
pub enum BackendServiceLoadBalancingSchemeEnum {
    

    /// Signifies that this will be used for classic Application Load Balancers, global external proxy Network Load Balancers, or external passthrough Network Load Balancers.
    ///
    /// "EXTERNAL"
    #[serde(rename="EXTERNAL")]
    EXTERNAL,
    

    /// Signifies that this will be used for global external Application Load Balancers, regional external Application Load Balancers, or regional external proxy Network Load Balancers.
    ///
    /// "EXTERNAL_MANAGED"
    #[serde(rename="EXTERNAL_MANAGED")]
    EXTERNALMANAGED,
    

    /// Signifies that this will be used for internal passthrough Network Load Balancers.
    ///
    /// "INTERNAL"
    #[serde(rename="INTERNAL")]
    INTERNAL,
    

    /// Signifies that this will be used for internal Application Load Balancers.
    ///
    /// "INTERNAL_MANAGED"
    #[serde(rename="INTERNAL_MANAGED")]
    INTERNALMANAGED,
    

    /// Signifies that this will be used by Traffic Director.
    ///
    /// "INTERNAL_SELF_MANAGED"
    #[serde(rename="INTERNAL_SELF_MANAGED")]
    INTERNALSELFMANAGED,
    
    /// "INVALID_LOAD_BALANCING_SCHEME"
    #[serde(rename="INVALID_LOAD_BALANCING_SCHEME")]
    INVALIDLOADBALANCINGSCHEME,
}

impl AsRef<str> for BackendServiceLoadBalancingSchemeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceLoadBalancingSchemeEnum::EXTERNAL => "EXTERNAL",
            BackendServiceLoadBalancingSchemeEnum::EXTERNALMANAGED => "EXTERNAL_MANAGED",
            BackendServiceLoadBalancingSchemeEnum::INTERNAL => "INTERNAL",
            BackendServiceLoadBalancingSchemeEnum::INTERNALMANAGED => "INTERNAL_MANAGED",
            BackendServiceLoadBalancingSchemeEnum::INTERNALSELFMANAGED => "INTERNAL_SELF_MANAGED",
            BackendServiceLoadBalancingSchemeEnum::INVALIDLOADBALANCINGSCHEME => "INVALID_LOAD_BALANCING_SCHEME",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceLoadBalancingSchemeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EXTERNAL" => Ok(BackendServiceLoadBalancingSchemeEnum::EXTERNAL),
           "EXTERNAL_MANAGED" => Ok(BackendServiceLoadBalancingSchemeEnum::EXTERNALMANAGED),
           "INTERNAL" => Ok(BackendServiceLoadBalancingSchemeEnum::INTERNAL),
           "INTERNAL_MANAGED" => Ok(BackendServiceLoadBalancingSchemeEnum::INTERNALMANAGED),
           "INTERNAL_SELF_MANAGED" => Ok(BackendServiceLoadBalancingSchemeEnum::INTERNALSELFMANAGED),
           "INVALID_LOAD_BALANCING_SCHEME" => Ok(BackendServiceLoadBalancingSchemeEnum::INVALIDLOADBALANCINGSCHEME),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceLoadBalancingSchemeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceLocalityLbPolicyEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, or EXTERNAL_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
pub enum BackendServiceLocalityLbPolicyEnum {
    
    /// "INVALID_LB_POLICY"
    #[serde(rename="INVALID_LB_POLICY")]
    INVALIDLBPOLICY,
    

    /// An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests.
    ///
    /// "LEAST_REQUEST"
    #[serde(rename="LEAST_REQUEST")]
    LEASTREQUEST,
    

    /// This algorithm implements consistent hashing to backends. Maglev can be used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824
    ///
    /// "MAGLEV"
    #[serde(rename="MAGLEV")]
    MAGLEV,
    

    /// Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer.
    ///
    /// "ORIGINAL_DESTINATION"
    #[serde(rename="ORIGINAL_DESTINATION")]
    ORIGINALDESTINATION,
    

    /// The load balancer selects a random healthy host.
    ///
    /// "RANDOM"
    #[serde(rename="RANDOM")]
    RANDOM,
    

    /// The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests.
    ///
    /// "RING_HASH"
    #[serde(rename="RING_HASH")]
    RINGHASH,
    

    /// This is a simple policy in which each healthy backend is selected in round robin order. This is the default.
    ///
    /// "ROUND_ROBIN"
    #[serde(rename="ROUND_ROBIN")]
    ROUNDROBIN,
    

    /// Per-instance weighted Load Balancing via health check reported weights. If set, the Backend Service must configure a non legacy HTTP-based Health Check, and health check replies are expected to contain non-standard HTTP response header field X-Load-Balancing-Endpoint-Weight to specify the per-instance weights. If set, Load Balancing is weighted based on the per-instance weights reported in the last processed health check replies, as long as every instance either reported a valid weight or had UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains equal-weight. This option is only supported in Network Load Balancing.
    ///
    /// "WEIGHTED_MAGLEV"
    #[serde(rename="WEIGHTED_MAGLEV")]
    WEIGHTEDMAGLEV,
}

impl AsRef<str> for BackendServiceLocalityLbPolicyEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceLocalityLbPolicyEnum::INVALIDLBPOLICY => "INVALID_LB_POLICY",
            BackendServiceLocalityLbPolicyEnum::LEASTREQUEST => "LEAST_REQUEST",
            BackendServiceLocalityLbPolicyEnum::MAGLEV => "MAGLEV",
            BackendServiceLocalityLbPolicyEnum::ORIGINALDESTINATION => "ORIGINAL_DESTINATION",
            BackendServiceLocalityLbPolicyEnum::RANDOM => "RANDOM",
            BackendServiceLocalityLbPolicyEnum::RINGHASH => "RING_HASH",
            BackendServiceLocalityLbPolicyEnum::ROUNDROBIN => "ROUND_ROBIN",
            BackendServiceLocalityLbPolicyEnum::WEIGHTEDMAGLEV => "WEIGHTED_MAGLEV",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceLocalityLbPolicyEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "INVALID_LB_POLICY" => Ok(BackendServiceLocalityLbPolicyEnum::INVALIDLBPOLICY),
           "LEAST_REQUEST" => Ok(BackendServiceLocalityLbPolicyEnum::LEASTREQUEST),
           "MAGLEV" => Ok(BackendServiceLocalityLbPolicyEnum::MAGLEV),
           "ORIGINAL_DESTINATION" => Ok(BackendServiceLocalityLbPolicyEnum::ORIGINALDESTINATION),
           "RANDOM" => Ok(BackendServiceLocalityLbPolicyEnum::RANDOM),
           "RING_HASH" => Ok(BackendServiceLocalityLbPolicyEnum::RINGHASH),
           "ROUND_ROBIN" => Ok(BackendServiceLocalityLbPolicyEnum::ROUNDROBIN),
           "WEIGHTED_MAGLEV" => Ok(BackendServiceLocalityLbPolicyEnum::WEIGHTEDMAGLEV),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceLocalityLbPolicyEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceProtocolEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
pub enum BackendServiceProtocolEnum {
    

    /// gRPC (available for Traffic Director).
    ///
    /// "GRPC"
    #[serde(rename="GRPC")]
    GRPC,
    
    /// "HTTP"
    #[serde(rename="HTTP")]
    HTTP,
    

    /// HTTP/2 with SSL.
    ///
    /// "HTTP2"
    #[serde(rename="HTTP2")]
    HTTP2,
    
    /// "HTTPS"
    #[serde(rename="HTTPS")]
    HTTPS,
    

    /// TCP proxying with SSL.
    ///
    /// "SSL"
    #[serde(rename="SSL")]
    SSL,
    

    /// TCP proxying or TCP pass-through.
    ///
    /// "TCP"
    #[serde(rename="TCP")]
    TCP,
    

    /// UDP.
    ///
    /// "UDP"
    #[serde(rename="UDP")]
    UDP,
    

    /// If a Backend Service has UNSPECIFIED as its protocol, it can be used with any L3/L4 Forwarding Rules.
    ///
    /// "UNSPECIFIED"
    #[serde(rename="UNSPECIFIED")]
    UNSPECIFIED,
}

impl AsRef<str> for BackendServiceProtocolEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceProtocolEnum::GRPC => "GRPC",
            BackendServiceProtocolEnum::HTTP => "HTTP",
            BackendServiceProtocolEnum::HTTP2 => "HTTP2",
            BackendServiceProtocolEnum::HTTPS => "HTTPS",
            BackendServiceProtocolEnum::SSL => "SSL",
            BackendServiceProtocolEnum::TCP => "TCP",
            BackendServiceProtocolEnum::UDP => "UDP",
            BackendServiceProtocolEnum::UNSPECIFIED => "UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceProtocolEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GRPC" => Ok(BackendServiceProtocolEnum::GRPC),
           "HTTP" => Ok(BackendServiceProtocolEnum::HTTP),
           "HTTP2" => Ok(BackendServiceProtocolEnum::HTTP2),
           "HTTPS" => Ok(BackendServiceProtocolEnum::HTTPS),
           "SSL" => Ok(BackendServiceProtocolEnum::SSL),
           "TCP" => Ok(BackendServiceProtocolEnum::TCP),
           "UDP" => Ok(BackendServiceProtocolEnum::UDP),
           "UNSPECIFIED" => Ok(BackendServiceProtocolEnum::UNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceProtocolEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceSessionAffinityEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).
pub enum BackendServiceSessionAffinityEnum {
    

    /// 2-tuple hash on packet's source and destination IP addresses. Connections from the same source IP address to the same destination IP address will be served by the same backend VM while that VM remains healthy.
    ///
    /// "CLIENT_IP"
    #[serde(rename="CLIENT_IP")]
    CLIENTIP,
    

    /// 1-tuple hash only on packet's source IP address. Connections from the same source IP address will be served by the same backend VM while that VM remains healthy. This option can only be used for Internal TCP/UDP Load Balancing.
    ///
    /// "CLIENT_IP_NO_DESTINATION"
    #[serde(rename="CLIENT_IP_NO_DESTINATION")]
    CLIENTIPNODESTINATION,
    

    /// 5-tuple hash on packet's source and destination IP addresses, IP protocol, and source and destination ports. Connections for the same IP protocol from the same source IP address and port to the same destination IP address and port will be served by the same backend VM while that VM remains healthy. This option cannot be used for HTTP(S) load balancing.
    ///
    /// "CLIENT_IP_PORT_PROTO"
    #[serde(rename="CLIENT_IP_PORT_PROTO")]
    CLIENTIPPORTPROTO,
    

    /// 3-tuple hash on packet's source and destination IP addresses, and IP protocol. Connections for the same IP protocol from the same source IP address to the same destination IP address will be served by the same backend VM while that VM remains healthy. This option cannot be used for HTTP(S) load balancing.
    ///
    /// "CLIENT_IP_PROTO"
    #[serde(rename="CLIENT_IP_PROTO")]
    CLIENTIPPROTO,
    

    /// Hash based on a cookie generated by the L7 loadbalancer. Only valid for HTTP(S) load balancing.
    ///
    /// "GENERATED_COOKIE"
    #[serde(rename="GENERATED_COOKIE")]
    GENERATEDCOOKIE,
    

    /// The hash is based on a user specified header field.
    ///
    /// "HEADER_FIELD"
    #[serde(rename="HEADER_FIELD")]
    HEADERFIELD,
    

    /// The hash is based on a user provided cookie.
    ///
    /// "HTTP_COOKIE"
    #[serde(rename="HTTP_COOKIE")]
    HTTPCOOKIE,
    

    /// No session affinity. Connections from the same client IP may go to any instance in the pool.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
}

impl AsRef<str> for BackendServiceSessionAffinityEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceSessionAffinityEnum::CLIENTIP => "CLIENT_IP",
            BackendServiceSessionAffinityEnum::CLIENTIPNODESTINATION => "CLIENT_IP_NO_DESTINATION",
            BackendServiceSessionAffinityEnum::CLIENTIPPORTPROTO => "CLIENT_IP_PORT_PROTO",
            BackendServiceSessionAffinityEnum::CLIENTIPPROTO => "CLIENT_IP_PROTO",
            BackendServiceSessionAffinityEnum::GENERATEDCOOKIE => "GENERATED_COOKIE",
            BackendServiceSessionAffinityEnum::HEADERFIELD => "HEADER_FIELD",
            BackendServiceSessionAffinityEnum::HTTPCOOKIE => "HTTP_COOKIE",
            BackendServiceSessionAffinityEnum::NONE => "NONE",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceSessionAffinityEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLIENT_IP" => Ok(BackendServiceSessionAffinityEnum::CLIENTIP),
           "CLIENT_IP_NO_DESTINATION" => Ok(BackendServiceSessionAffinityEnum::CLIENTIPNODESTINATION),
           "CLIENT_IP_PORT_PROTO" => Ok(BackendServiceSessionAffinityEnum::CLIENTIPPORTPROTO),
           "CLIENT_IP_PROTO" => Ok(BackendServiceSessionAffinityEnum::CLIENTIPPROTO),
           "GENERATED_COOKIE" => Ok(BackendServiceSessionAffinityEnum::GENERATEDCOOKIE),
           "HEADER_FIELD" => Ok(BackendServiceSessionAffinityEnum::HEADERFIELD),
           "HTTP_COOKIE" => Ok(BackendServiceSessionAffinityEnum::HTTPCOOKIE),
           "NONE" => Ok(BackendServiceSessionAffinityEnum::NONE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceSessionAffinityEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceCdnPolicyCacheModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
pub enum BackendServiceCdnPolicyCacheModeEnum {
    

    /// Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    ///
    /// "CACHE_ALL_STATIC"
    #[serde(rename="CACHE_ALL_STATIC")]
    CACHEALLSTATIC,
    

    /// Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
    ///
    /// "FORCE_CACHE_ALL"
    #[serde(rename="FORCE_CACHE_ALL")]
    FORCECACHEALL,
    
    /// "INVALID_CACHE_MODE"
    #[serde(rename="INVALID_CACHE_MODE")]
    INVALIDCACHEMODE,
    

    /// Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
    ///
    /// "USE_ORIGIN_HEADERS"
    #[serde(rename="USE_ORIGIN_HEADERS")]
    USEORIGINHEADERS,
}

impl AsRef<str> for BackendServiceCdnPolicyCacheModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceCdnPolicyCacheModeEnum::CACHEALLSTATIC => "CACHE_ALL_STATIC",
            BackendServiceCdnPolicyCacheModeEnum::FORCECACHEALL => "FORCE_CACHE_ALL",
            BackendServiceCdnPolicyCacheModeEnum::INVALIDCACHEMODE => "INVALID_CACHE_MODE",
            BackendServiceCdnPolicyCacheModeEnum::USEORIGINHEADERS => "USE_ORIGIN_HEADERS",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceCdnPolicyCacheModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CACHE_ALL_STATIC" => Ok(BackendServiceCdnPolicyCacheModeEnum::CACHEALLSTATIC),
           "FORCE_CACHE_ALL" => Ok(BackendServiceCdnPolicyCacheModeEnum::FORCECACHEALL),
           "INVALID_CACHE_MODE" => Ok(BackendServiceCdnPolicyCacheModeEnum::INVALIDCACHEMODE),
           "USE_ORIGIN_HEADERS" => Ok(BackendServiceCdnPolicyCacheModeEnum::USEORIGINHEADERS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceCdnPolicyCacheModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL. If set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP. If set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy). If set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default. For more details, see [Connection Persistence for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#connection-persistence) and [Connection Persistence for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#connection-persistence).
pub enum BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum {
    
    /// "ALWAYS_PERSIST"
    #[serde(rename="ALWAYS_PERSIST")]
    ALWAYSPERSIST,
    
    /// "DEFAULT_FOR_PROTOCOL"
    #[serde(rename="DEFAULT_FOR_PROTOCOL")]
    DEFAULTFORPROTOCOL,
    
    /// "NEVER_PERSIST"
    #[serde(rename="NEVER_PERSIST")]
    NEVERPERSIST,
}

impl AsRef<str> for BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum::ALWAYSPERSIST => "ALWAYS_PERSIST",
            BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum::DEFAULTFORPROTOCOL => "DEFAULT_FOR_PROTOCOL",
            BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum::NEVERPERSIST => "NEVER_PERSIST",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALWAYS_PERSIST" => Ok(BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum::ALWAYSPERSIST),
           "DEFAULT_FOR_PROTOCOL" => Ok(BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum::DEFAULTFORPROTOCOL),
           "NEVER_PERSIST" => Ok(BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum::NEVERPERSIST),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceConnectionTrackingPolicyTrackingModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the key used for connection tracking. There are two options: - PER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol. - PER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity. For more details, see [Tracking Mode for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#tracking-mode) and [Tracking Mode for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#tracking-mode).
pub enum BackendServiceConnectionTrackingPolicyTrackingModeEnum {
    
    /// "INVALID_TRACKING_MODE"
    #[serde(rename="INVALID_TRACKING_MODE")]
    INVALIDTRACKINGMODE,
    
    /// "PER_CONNECTION"
    #[serde(rename="PER_CONNECTION")]
    PERCONNECTION,
    
    /// "PER_SESSION"
    #[serde(rename="PER_SESSION")]
    PERSESSION,
}

impl AsRef<str> for BackendServiceConnectionTrackingPolicyTrackingModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceConnectionTrackingPolicyTrackingModeEnum::INVALIDTRACKINGMODE => "INVALID_TRACKING_MODE",
            BackendServiceConnectionTrackingPolicyTrackingModeEnum::PERCONNECTION => "PER_CONNECTION",
            BackendServiceConnectionTrackingPolicyTrackingModeEnum::PERSESSION => "PER_SESSION",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceConnectionTrackingPolicyTrackingModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "INVALID_TRACKING_MODE" => Ok(BackendServiceConnectionTrackingPolicyTrackingModeEnum::INVALIDTRACKINGMODE),
           "PER_CONNECTION" => Ok(BackendServiceConnectionTrackingPolicyTrackingModeEnum::PERCONNECTION),
           "PER_SESSION" => Ok(BackendServiceConnectionTrackingPolicyTrackingModeEnum::PERSESSION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceConnectionTrackingPolicyTrackingModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The name of a locality load-balancing policy. Valid values include ROUND_ROBIN and, for Java clients, LEAST_REQUEST. For information about these values, see the description of localityLbPolicy. Do not specify the same policy more than once for a backend. If you do, the configuration is rejected.
pub enum BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum {
    
    /// "INVALID_LB_POLICY"
    #[serde(rename="INVALID_LB_POLICY")]
    INVALIDLBPOLICY,
    

    /// An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests.
    ///
    /// "LEAST_REQUEST"
    #[serde(rename="LEAST_REQUEST")]
    LEASTREQUEST,
    

    /// This algorithm implements consistent hashing to backends. Maglev can be used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824
    ///
    /// "MAGLEV"
    #[serde(rename="MAGLEV")]
    MAGLEV,
    

    /// Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer.
    ///
    /// "ORIGINAL_DESTINATION"
    #[serde(rename="ORIGINAL_DESTINATION")]
    ORIGINALDESTINATION,
    

    /// The load balancer selects a random healthy host.
    ///
    /// "RANDOM"
    #[serde(rename="RANDOM")]
    RANDOM,
    

    /// The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests.
    ///
    /// "RING_HASH"
    #[serde(rename="RING_HASH")]
    RINGHASH,
    

    /// This is a simple policy in which each healthy backend is selected in round robin order. This is the default.
    ///
    /// "ROUND_ROBIN"
    #[serde(rename="ROUND_ROBIN")]
    ROUNDROBIN,
    

    /// Per-instance weighted Load Balancing via health check reported weights. If set, the Backend Service must configure a non legacy HTTP-based Health Check, and health check replies are expected to contain non-standard HTTP response header field X-Load-Balancing-Endpoint-Weight to specify the per-instance weights. If set, Load Balancing is weighted based on the per-instance weights reported in the last processed health check replies, as long as every instance either reported a valid weight or had UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains equal-weight. This option is only supported in Network Load Balancing.
    ///
    /// "WEIGHTED_MAGLEV"
    #[serde(rename="WEIGHTED_MAGLEV")]
    WEIGHTEDMAGLEV,
}

impl AsRef<str> for BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::INVALIDLBPOLICY => "INVALID_LB_POLICY",
            BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::LEASTREQUEST => "LEAST_REQUEST",
            BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::MAGLEV => "MAGLEV",
            BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::ORIGINALDESTINATION => "ORIGINAL_DESTINATION",
            BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::RANDOM => "RANDOM",
            BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::RINGHASH => "RING_HASH",
            BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::ROUNDROBIN => "ROUND_ROBIN",
            BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::WEIGHTEDMAGLEV => "WEIGHTED_MAGLEV",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "INVALID_LB_POLICY" => Ok(BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::INVALIDLBPOLICY),
           "LEAST_REQUEST" => Ok(BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::LEASTREQUEST),
           "MAGLEV" => Ok(BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::MAGLEV),
           "ORIGINAL_DESTINATION" => Ok(BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::ORIGINALDESTINATION),
           "RANDOM" => Ok(BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::RANDOM),
           "RING_HASH" => Ok(BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::RINGHASH),
           "ROUND_ROBIN" => Ok(BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::ROUNDROBIN),
           "WEIGHTED_MAGLEV" => Ok(BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum::WEIGHTEDMAGLEV),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceLogConfigOptionalModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This field can only be specified if logging is enabled for this backend service. Configures whether all, none or a subset of optional fields should be added to the reported logs. One of [INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM]. Default is EXCLUDE_ALL_OPTIONAL.
pub enum BackendServiceLogConfigOptionalModeEnum {
    

    /// A subset of optional fields.
    ///
    /// "CUSTOM"
    #[serde(rename="CUSTOM")]
    CUSTOM,
    

    /// None optional fields.
    ///
    /// "EXCLUDE_ALL_OPTIONAL"
    #[serde(rename="EXCLUDE_ALL_OPTIONAL")]
    EXCLUDEALLOPTIONAL,
    

    /// All optional fields.
    ///
    /// "INCLUDE_ALL_OPTIONAL"
    #[serde(rename="INCLUDE_ALL_OPTIONAL")]
    INCLUDEALLOPTIONAL,
}

impl AsRef<str> for BackendServiceLogConfigOptionalModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceLogConfigOptionalModeEnum::CUSTOM => "CUSTOM",
            BackendServiceLogConfigOptionalModeEnum::EXCLUDEALLOPTIONAL => "EXCLUDE_ALL_OPTIONAL",
            BackendServiceLogConfigOptionalModeEnum::INCLUDEALLOPTIONAL => "INCLUDE_ALL_OPTIONAL",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceLogConfigOptionalModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CUSTOM" => Ok(BackendServiceLogConfigOptionalModeEnum::CUSTOM),
           "EXCLUDE_ALL_OPTIONAL" => Ok(BackendServiceLogConfigOptionalModeEnum::EXCLUDEALLOPTIONAL),
           "INCLUDE_ALL_OPTIONAL" => Ok(BackendServiceLogConfigOptionalModeEnum::INCLUDEALLOPTIONAL),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceLogConfigOptionalModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BfdPacketDiagnosticEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
pub enum BfdPacketDiagnosticEnum {
    
    /// "ADMINISTRATIVELY_DOWN"
    #[serde(rename="ADMINISTRATIVELY_DOWN")]
    ADMINISTRATIVELYDOWN,
    
    /// "CONCATENATED_PATH_DOWN"
    #[serde(rename="CONCATENATED_PATH_DOWN")]
    CONCATENATEDPATHDOWN,
    
    /// "CONTROL_DETECTION_TIME_EXPIRED"
    #[serde(rename="CONTROL_DETECTION_TIME_EXPIRED")]
    CONTROLDETECTIONTIMEEXPIRED,
    
    /// "DIAGNOSTIC_UNSPECIFIED"
    #[serde(rename="DIAGNOSTIC_UNSPECIFIED")]
    DIAGNOSTICUNSPECIFIED,
    
    /// "ECHO_FUNCTION_FAILED"
    #[serde(rename="ECHO_FUNCTION_FAILED")]
    ECHOFUNCTIONFAILED,
    
    /// "FORWARDING_PLANE_RESET"
    #[serde(rename="FORWARDING_PLANE_RESET")]
    FORWARDINGPLANERESET,
    
    /// "NEIGHBOR_SIGNALED_SESSION_DOWN"
    #[serde(rename="NEIGHBOR_SIGNALED_SESSION_DOWN")]
    NEIGHBORSIGNALEDSESSIONDOWN,
    
    /// "NO_DIAGNOSTIC"
    #[serde(rename="NO_DIAGNOSTIC")]
    NODIAGNOSTIC,
    
    /// "PATH_DOWN"
    #[serde(rename="PATH_DOWN")]
    PATHDOWN,
    
    /// "REVERSE_CONCATENATED_PATH_DOWN"
    #[serde(rename="REVERSE_CONCATENATED_PATH_DOWN")]
    REVERSECONCATENATEDPATHDOWN,
}

impl AsRef<str> for BfdPacketDiagnosticEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BfdPacketDiagnosticEnum::ADMINISTRATIVELYDOWN => "ADMINISTRATIVELY_DOWN",
            BfdPacketDiagnosticEnum::CONCATENATEDPATHDOWN => "CONCATENATED_PATH_DOWN",
            BfdPacketDiagnosticEnum::CONTROLDETECTIONTIMEEXPIRED => "CONTROL_DETECTION_TIME_EXPIRED",
            BfdPacketDiagnosticEnum::DIAGNOSTICUNSPECIFIED => "DIAGNOSTIC_UNSPECIFIED",
            BfdPacketDiagnosticEnum::ECHOFUNCTIONFAILED => "ECHO_FUNCTION_FAILED",
            BfdPacketDiagnosticEnum::FORWARDINGPLANERESET => "FORWARDING_PLANE_RESET",
            BfdPacketDiagnosticEnum::NEIGHBORSIGNALEDSESSIONDOWN => "NEIGHBOR_SIGNALED_SESSION_DOWN",
            BfdPacketDiagnosticEnum::NODIAGNOSTIC => "NO_DIAGNOSTIC",
            BfdPacketDiagnosticEnum::PATHDOWN => "PATH_DOWN",
            BfdPacketDiagnosticEnum::REVERSECONCATENATEDPATHDOWN => "REVERSE_CONCATENATED_PATH_DOWN",
        }
    }
}

impl std::convert::TryFrom< &str> for BfdPacketDiagnosticEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ADMINISTRATIVELY_DOWN" => Ok(BfdPacketDiagnosticEnum::ADMINISTRATIVELYDOWN),
           "CONCATENATED_PATH_DOWN" => Ok(BfdPacketDiagnosticEnum::CONCATENATEDPATHDOWN),
           "CONTROL_DETECTION_TIME_EXPIRED" => Ok(BfdPacketDiagnosticEnum::CONTROLDETECTIONTIMEEXPIRED),
           "DIAGNOSTIC_UNSPECIFIED" => Ok(BfdPacketDiagnosticEnum::DIAGNOSTICUNSPECIFIED),
           "ECHO_FUNCTION_FAILED" => Ok(BfdPacketDiagnosticEnum::ECHOFUNCTIONFAILED),
           "FORWARDING_PLANE_RESET" => Ok(BfdPacketDiagnosticEnum::FORWARDINGPLANERESET),
           "NEIGHBOR_SIGNALED_SESSION_DOWN" => Ok(BfdPacketDiagnosticEnum::NEIGHBORSIGNALEDSESSIONDOWN),
           "NO_DIAGNOSTIC" => Ok(BfdPacketDiagnosticEnum::NODIAGNOSTIC),
           "PATH_DOWN" => Ok(BfdPacketDiagnosticEnum::PATHDOWN),
           "REVERSE_CONCATENATED_PATH_DOWN" => Ok(BfdPacketDiagnosticEnum::REVERSECONCATENATEDPATHDOWN),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BfdPacketDiagnosticEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BfdPacketStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
pub enum BfdPacketStateEnum {
    
    /// "ADMIN_DOWN"
    #[serde(rename="ADMIN_DOWN")]
    ADMINDOWN,
    
    /// "DOWN"
    #[serde(rename="DOWN")]
    DOWN,
    
    /// "INIT"
    #[serde(rename="INIT")]
    INIT,
    
    /// "STATE_UNSPECIFIED"
    #[serde(rename="STATE_UNSPECIFIED")]
    STATEUNSPECIFIED,
    
    /// "UP"
    #[serde(rename="UP")]
    UP,
}

impl AsRef<str> for BfdPacketStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BfdPacketStateEnum::ADMINDOWN => "ADMIN_DOWN",
            BfdPacketStateEnum::DOWN => "DOWN",
            BfdPacketStateEnum::INIT => "INIT",
            BfdPacketStateEnum::STATEUNSPECIFIED => "STATE_UNSPECIFIED",
            BfdPacketStateEnum::UP => "UP",
        }
    }
}

impl std::convert::TryFrom< &str> for BfdPacketStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ADMIN_DOWN" => Ok(BfdPacketStateEnum::ADMINDOWN),
           "DOWN" => Ok(BfdPacketStateEnum::DOWN),
           "INIT" => Ok(BfdPacketStateEnum::INIT),
           "STATE_UNSPECIFIED" => Ok(BfdPacketStateEnum::STATEUNSPECIFIED),
           "UP" => Ok(BfdPacketStateEnum::UP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BfdPacketStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BfdStatusBfdSessionInitializationModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer.
pub enum BfdStatusBfdSessionInitializationModeEnum {
    
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    
    /// "DISABLED"
    #[serde(rename="DISABLED")]
    DISABLED,
    
    /// "PASSIVE"
    #[serde(rename="PASSIVE")]
    PASSIVE,
}

impl AsRef<str> for BfdStatusBfdSessionInitializationModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BfdStatusBfdSessionInitializationModeEnum::ACTIVE => "ACTIVE",
            BfdStatusBfdSessionInitializationModeEnum::DISABLED => "DISABLED",
            BfdStatusBfdSessionInitializationModeEnum::PASSIVE => "PASSIVE",
        }
    }
}

impl std::convert::TryFrom< &str> for BfdStatusBfdSessionInitializationModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(BfdStatusBfdSessionInitializationModeEnum::ACTIVE),
           "DISABLED" => Ok(BfdStatusBfdSessionInitializationModeEnum::DISABLED),
           "PASSIVE" => Ok(BfdStatusBfdSessionInitializationModeEnum::PASSIVE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BfdStatusBfdSessionInitializationModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BfdStatusLocalDiagnosticEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
pub enum BfdStatusLocalDiagnosticEnum {
    
    /// "ADMINISTRATIVELY_DOWN"
    #[serde(rename="ADMINISTRATIVELY_DOWN")]
    ADMINISTRATIVELYDOWN,
    
    /// "CONCATENATED_PATH_DOWN"
    #[serde(rename="CONCATENATED_PATH_DOWN")]
    CONCATENATEDPATHDOWN,
    
    /// "CONTROL_DETECTION_TIME_EXPIRED"
    #[serde(rename="CONTROL_DETECTION_TIME_EXPIRED")]
    CONTROLDETECTIONTIMEEXPIRED,
    
    /// "DIAGNOSTIC_UNSPECIFIED"
    #[serde(rename="DIAGNOSTIC_UNSPECIFIED")]
    DIAGNOSTICUNSPECIFIED,
    
    /// "ECHO_FUNCTION_FAILED"
    #[serde(rename="ECHO_FUNCTION_FAILED")]
    ECHOFUNCTIONFAILED,
    
    /// "FORWARDING_PLANE_RESET"
    #[serde(rename="FORWARDING_PLANE_RESET")]
    FORWARDINGPLANERESET,
    
    /// "NEIGHBOR_SIGNALED_SESSION_DOWN"
    #[serde(rename="NEIGHBOR_SIGNALED_SESSION_DOWN")]
    NEIGHBORSIGNALEDSESSIONDOWN,
    
    /// "NO_DIAGNOSTIC"
    #[serde(rename="NO_DIAGNOSTIC")]
    NODIAGNOSTIC,
    
    /// "PATH_DOWN"
    #[serde(rename="PATH_DOWN")]
    PATHDOWN,
    
    /// "REVERSE_CONCATENATED_PATH_DOWN"
    #[serde(rename="REVERSE_CONCATENATED_PATH_DOWN")]
    REVERSECONCATENATEDPATHDOWN,
}

impl AsRef<str> for BfdStatusLocalDiagnosticEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BfdStatusLocalDiagnosticEnum::ADMINISTRATIVELYDOWN => "ADMINISTRATIVELY_DOWN",
            BfdStatusLocalDiagnosticEnum::CONCATENATEDPATHDOWN => "CONCATENATED_PATH_DOWN",
            BfdStatusLocalDiagnosticEnum::CONTROLDETECTIONTIMEEXPIRED => "CONTROL_DETECTION_TIME_EXPIRED",
            BfdStatusLocalDiagnosticEnum::DIAGNOSTICUNSPECIFIED => "DIAGNOSTIC_UNSPECIFIED",
            BfdStatusLocalDiagnosticEnum::ECHOFUNCTIONFAILED => "ECHO_FUNCTION_FAILED",
            BfdStatusLocalDiagnosticEnum::FORWARDINGPLANERESET => "FORWARDING_PLANE_RESET",
            BfdStatusLocalDiagnosticEnum::NEIGHBORSIGNALEDSESSIONDOWN => "NEIGHBOR_SIGNALED_SESSION_DOWN",
            BfdStatusLocalDiagnosticEnum::NODIAGNOSTIC => "NO_DIAGNOSTIC",
            BfdStatusLocalDiagnosticEnum::PATHDOWN => "PATH_DOWN",
            BfdStatusLocalDiagnosticEnum::REVERSECONCATENATEDPATHDOWN => "REVERSE_CONCATENATED_PATH_DOWN",
        }
    }
}

impl std::convert::TryFrom< &str> for BfdStatusLocalDiagnosticEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ADMINISTRATIVELY_DOWN" => Ok(BfdStatusLocalDiagnosticEnum::ADMINISTRATIVELYDOWN),
           "CONCATENATED_PATH_DOWN" => Ok(BfdStatusLocalDiagnosticEnum::CONCATENATEDPATHDOWN),
           "CONTROL_DETECTION_TIME_EXPIRED" => Ok(BfdStatusLocalDiagnosticEnum::CONTROLDETECTIONTIMEEXPIRED),
           "DIAGNOSTIC_UNSPECIFIED" => Ok(BfdStatusLocalDiagnosticEnum::DIAGNOSTICUNSPECIFIED),
           "ECHO_FUNCTION_FAILED" => Ok(BfdStatusLocalDiagnosticEnum::ECHOFUNCTIONFAILED),
           "FORWARDING_PLANE_RESET" => Ok(BfdStatusLocalDiagnosticEnum::FORWARDINGPLANERESET),
           "NEIGHBOR_SIGNALED_SESSION_DOWN" => Ok(BfdStatusLocalDiagnosticEnum::NEIGHBORSIGNALEDSESSIONDOWN),
           "NO_DIAGNOSTIC" => Ok(BfdStatusLocalDiagnosticEnum::NODIAGNOSTIC),
           "PATH_DOWN" => Ok(BfdStatusLocalDiagnosticEnum::PATHDOWN),
           "REVERSE_CONCATENATED_PATH_DOWN" => Ok(BfdStatusLocalDiagnosticEnum::REVERSECONCATENATEDPATHDOWN),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BfdStatusLocalDiagnosticEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BfdStatusLocalStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
pub enum BfdStatusLocalStateEnum {
    
    /// "ADMIN_DOWN"
    #[serde(rename="ADMIN_DOWN")]
    ADMINDOWN,
    
    /// "DOWN"
    #[serde(rename="DOWN")]
    DOWN,
    
    /// "INIT"
    #[serde(rename="INIT")]
    INIT,
    
    /// "STATE_UNSPECIFIED"
    #[serde(rename="STATE_UNSPECIFIED")]
    STATEUNSPECIFIED,
    
    /// "UP"
    #[serde(rename="UP")]
    UP,
}

impl AsRef<str> for BfdStatusLocalStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BfdStatusLocalStateEnum::ADMINDOWN => "ADMIN_DOWN",
            BfdStatusLocalStateEnum::DOWN => "DOWN",
            BfdStatusLocalStateEnum::INIT => "INIT",
            BfdStatusLocalStateEnum::STATEUNSPECIFIED => "STATE_UNSPECIFIED",
            BfdStatusLocalStateEnum::UP => "UP",
        }
    }
}

impl std::convert::TryFrom< &str> for BfdStatusLocalStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ADMIN_DOWN" => Ok(BfdStatusLocalStateEnum::ADMINDOWN),
           "DOWN" => Ok(BfdStatusLocalStateEnum::DOWN),
           "INIT" => Ok(BfdStatusLocalStateEnum::INIT),
           "STATE_UNSPECIFIED" => Ok(BfdStatusLocalStateEnum::STATEUNSPECIFIED),
           "UP" => Ok(BfdStatusLocalStateEnum::UP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BfdStatusLocalStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BulkInsertOperationStatusStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Creation status of BulkInsert operation - information if the flow is rolling forward or rolling back.
pub enum BulkInsertOperationStatusStatusEnum {
    

    /// Rolling forward - creating VMs.
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// Done
    ///
    /// "DONE"
    #[serde(rename="DONE")]
    DONE,
    

    /// Rolling back - cleaning up after an error.
    ///
    /// "ROLLING_BACK"
    #[serde(rename="ROLLING_BACK")]
    ROLLINGBACK,
    
    /// "STATUS_UNSPECIFIED"
    #[serde(rename="STATUS_UNSPECIFIED")]
    STATUSUNSPECIFIED,
}

impl AsRef<str> for BulkInsertOperationStatusStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BulkInsertOperationStatusStatusEnum::CREATING => "CREATING",
            BulkInsertOperationStatusStatusEnum::DONE => "DONE",
            BulkInsertOperationStatusStatusEnum::ROLLINGBACK => "ROLLING_BACK",
            BulkInsertOperationStatusStatusEnum::STATUSUNSPECIFIED => "STATUS_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for BulkInsertOperationStatusStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(BulkInsertOperationStatusStatusEnum::CREATING),
           "DONE" => Ok(BulkInsertOperationStatusStatusEnum::DONE),
           "ROLLING_BACK" => Ok(BulkInsertOperationStatusStatusEnum::ROLLINGBACK),
           "STATUS_UNSPECIFIED" => Ok(BulkInsertOperationStatusStatusEnum::STATUSUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BulkInsertOperationStatusStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region CommitmentCategoryEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
pub enum CommitmentCategoryEnum {
    
    /// "CATEGORY_UNSPECIFIED"
    #[serde(rename="CATEGORY_UNSPECIFIED")]
    CATEGORYUNSPECIFIED,
    
    /// "LICENSE"
    #[serde(rename="LICENSE")]
    LICENSE,
    
    /// "MACHINE"
    #[serde(rename="MACHINE")]
    MACHINE,
}

impl AsRef<str> for CommitmentCategoryEnum {
    fn as_ref(&self) -> &str {
        match *self {
            CommitmentCategoryEnum::CATEGORYUNSPECIFIED => "CATEGORY_UNSPECIFIED",
            CommitmentCategoryEnum::LICENSE => "LICENSE",
            CommitmentCategoryEnum::MACHINE => "MACHINE",
        }
    }
}

impl std::convert::TryFrom< &str> for CommitmentCategoryEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CATEGORY_UNSPECIFIED" => Ok(CommitmentCategoryEnum::CATEGORYUNSPECIFIED),
           "LICENSE" => Ok(CommitmentCategoryEnum::LICENSE),
           "MACHINE" => Ok(CommitmentCategoryEnum::MACHINE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a CommitmentCategoryEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region CommitmentPlanEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
pub enum CommitmentPlanEnum {
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    
    /// "THIRTY_SIX_MONTH"
    #[serde(rename="THIRTY_SIX_MONTH")]
    THIRTYSIXMONTH,
    
    /// "TWELVE_MONTH"
    #[serde(rename="TWELVE_MONTH")]
    TWELVEMONTH,
}

impl AsRef<str> for CommitmentPlanEnum {
    fn as_ref(&self) -> &str {
        match *self {
            CommitmentPlanEnum::INVALID => "INVALID",
            CommitmentPlanEnum::THIRTYSIXMONTH => "THIRTY_SIX_MONTH",
            CommitmentPlanEnum::TWELVEMONTH => "TWELVE_MONTH",
        }
    }
}

impl std::convert::TryFrom< &str> for CommitmentPlanEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "INVALID" => Ok(CommitmentPlanEnum::INVALID),
           "THIRTY_SIX_MONTH" => Ok(CommitmentPlanEnum::THIRTYSIXMONTH),
           "TWELVE_MONTH" => Ok(CommitmentPlanEnum::TWELVEMONTH),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a CommitmentPlanEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region CommitmentStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED.
pub enum CommitmentStatusEnum {
    
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// Deprecate CANCELED status. Will use separate status to differentiate cancel by mergeCud or manual cancellation.
    ///
    /// "CANCELLED"
    #[serde(rename="CANCELLED")]
    CANCELLED,
    
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    
    /// "EXPIRED"
    #[serde(rename="EXPIRED")]
    EXPIRED,
    
    /// "NOT_YET_ACTIVE"
    #[serde(rename="NOT_YET_ACTIVE")]
    NOTYETACTIVE,
}

impl AsRef<str> for CommitmentStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            CommitmentStatusEnum::ACTIVE => "ACTIVE",
            CommitmentStatusEnum::CANCELLED => "CANCELLED",
            CommitmentStatusEnum::CREATING => "CREATING",
            CommitmentStatusEnum::EXPIRED => "EXPIRED",
            CommitmentStatusEnum::NOTYETACTIVE => "NOT_YET_ACTIVE",
        }
    }
}

impl std::convert::TryFrom< &str> for CommitmentStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(CommitmentStatusEnum::ACTIVE),
           "CANCELLED" => Ok(CommitmentStatusEnum::CANCELLED),
           "CREATING" => Ok(CommitmentStatusEnum::CREATING),
           "EXPIRED" => Ok(CommitmentStatusEnum::EXPIRED),
           "NOT_YET_ACTIVE" => Ok(CommitmentStatusEnum::NOTYETACTIVE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a CommitmentStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region CommitmentTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines.
pub enum CommitmentTypeEnum {
    
    /// "ACCELERATOR_OPTIMIZED"
    #[serde(rename="ACCELERATOR_OPTIMIZED")]
    ACCELERATOROPTIMIZED,
    
    /// "ACCELERATOR_OPTIMIZED_A3"
    #[serde(rename="ACCELERATOR_OPTIMIZED_A3")]
    ACCELERATOROPTIMIZEDA3,
    
    /// "COMPUTE_OPTIMIZED"
    #[serde(rename="COMPUTE_OPTIMIZED")]
    COMPUTEOPTIMIZED,
    
    /// "COMPUTE_OPTIMIZED_C2D"
    #[serde(rename="COMPUTE_OPTIMIZED_C2D")]
    COMPUTEOPTIMIZEDC2D,
    
    /// "COMPUTE_OPTIMIZED_C3"
    #[serde(rename="COMPUTE_OPTIMIZED_C3")]
    COMPUTEOPTIMIZEDC3,
    
    /// "COMPUTE_OPTIMIZED_C3D"
    #[serde(rename="COMPUTE_OPTIMIZED_C3D")]
    COMPUTEOPTIMIZEDC3D,
    
    /// "COMPUTE_OPTIMIZED_H3"
    #[serde(rename="COMPUTE_OPTIMIZED_H3")]
    COMPUTEOPTIMIZEDH3,
    
    /// "GENERAL_PURPOSE"
    #[serde(rename="GENERAL_PURPOSE")]
    GENERALPURPOSE,
    
    /// "GENERAL_PURPOSE_E2"
    #[serde(rename="GENERAL_PURPOSE_E2")]
    GENERALPURPOSEE2,
    
    /// "GENERAL_PURPOSE_N2"
    #[serde(rename="GENERAL_PURPOSE_N2")]
    GENERALPURPOSEN2,
    
    /// "GENERAL_PURPOSE_N2D"
    #[serde(rename="GENERAL_PURPOSE_N2D")]
    GENERALPURPOSEN2D,
    
    /// "GENERAL_PURPOSE_N4"
    #[serde(rename="GENERAL_PURPOSE_N4")]
    GENERALPURPOSEN4,
    
    /// "GENERAL_PURPOSE_T2D"
    #[serde(rename="GENERAL_PURPOSE_T2D")]
    GENERALPURPOSET2D,
    
    /// "GRAPHICS_OPTIMIZED"
    #[serde(rename="GRAPHICS_OPTIMIZED")]
    GRAPHICSOPTIMIZED,
    
    /// "MEMORY_OPTIMIZED"
    #[serde(rename="MEMORY_OPTIMIZED")]
    MEMORYOPTIMIZED,
    
    /// "MEMORY_OPTIMIZED_M3"
    #[serde(rename="MEMORY_OPTIMIZED_M3")]
    MEMORYOPTIMIZEDM3,
    
    /// "STORAGE_OPTIMIZED_Z3"
    #[serde(rename="STORAGE_OPTIMIZED_Z3")]
    STORAGEOPTIMIZEDZ3,
    
    /// "TYPE_UNSPECIFIED"
    #[serde(rename="TYPE_UNSPECIFIED")]
    TYPEUNSPECIFIED,
}

impl AsRef<str> for CommitmentTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            CommitmentTypeEnum::ACCELERATOROPTIMIZED => "ACCELERATOR_OPTIMIZED",
            CommitmentTypeEnum::ACCELERATOROPTIMIZEDA3 => "ACCELERATOR_OPTIMIZED_A3",
            CommitmentTypeEnum::COMPUTEOPTIMIZED => "COMPUTE_OPTIMIZED",
            CommitmentTypeEnum::COMPUTEOPTIMIZEDC2D => "COMPUTE_OPTIMIZED_C2D",
            CommitmentTypeEnum::COMPUTEOPTIMIZEDC3 => "COMPUTE_OPTIMIZED_C3",
            CommitmentTypeEnum::COMPUTEOPTIMIZEDC3D => "COMPUTE_OPTIMIZED_C3D",
            CommitmentTypeEnum::COMPUTEOPTIMIZEDH3 => "COMPUTE_OPTIMIZED_H3",
            CommitmentTypeEnum::GENERALPURPOSE => "GENERAL_PURPOSE",
            CommitmentTypeEnum::GENERALPURPOSEE2 => "GENERAL_PURPOSE_E2",
            CommitmentTypeEnum::GENERALPURPOSEN2 => "GENERAL_PURPOSE_N2",
            CommitmentTypeEnum::GENERALPURPOSEN2D => "GENERAL_PURPOSE_N2D",
            CommitmentTypeEnum::GENERALPURPOSEN4 => "GENERAL_PURPOSE_N4",
            CommitmentTypeEnum::GENERALPURPOSET2D => "GENERAL_PURPOSE_T2D",
            CommitmentTypeEnum::GRAPHICSOPTIMIZED => "GRAPHICS_OPTIMIZED",
            CommitmentTypeEnum::MEMORYOPTIMIZED => "MEMORY_OPTIMIZED",
            CommitmentTypeEnum::MEMORYOPTIMIZEDM3 => "MEMORY_OPTIMIZED_M3",
            CommitmentTypeEnum::STORAGEOPTIMIZEDZ3 => "STORAGE_OPTIMIZED_Z3",
            CommitmentTypeEnum::TYPEUNSPECIFIED => "TYPE_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for CommitmentTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACCELERATOR_OPTIMIZED" => Ok(CommitmentTypeEnum::ACCELERATOROPTIMIZED),
           "ACCELERATOR_OPTIMIZED_A3" => Ok(CommitmentTypeEnum::ACCELERATOROPTIMIZEDA3),
           "COMPUTE_OPTIMIZED" => Ok(CommitmentTypeEnum::COMPUTEOPTIMIZED),
           "COMPUTE_OPTIMIZED_C2D" => Ok(CommitmentTypeEnum::COMPUTEOPTIMIZEDC2D),
           "COMPUTE_OPTIMIZED_C3" => Ok(CommitmentTypeEnum::COMPUTEOPTIMIZEDC3),
           "COMPUTE_OPTIMIZED_C3D" => Ok(CommitmentTypeEnum::COMPUTEOPTIMIZEDC3D),
           "COMPUTE_OPTIMIZED_H3" => Ok(CommitmentTypeEnum::COMPUTEOPTIMIZEDH3),
           "GENERAL_PURPOSE" => Ok(CommitmentTypeEnum::GENERALPURPOSE),
           "GENERAL_PURPOSE_E2" => Ok(CommitmentTypeEnum::GENERALPURPOSEE2),
           "GENERAL_PURPOSE_N2" => Ok(CommitmentTypeEnum::GENERALPURPOSEN2),
           "GENERAL_PURPOSE_N2D" => Ok(CommitmentTypeEnum::GENERALPURPOSEN2D),
           "GENERAL_PURPOSE_N4" => Ok(CommitmentTypeEnum::GENERALPURPOSEN4),
           "GENERAL_PURPOSE_T2D" => Ok(CommitmentTypeEnum::GENERALPURPOSET2D),
           "GRAPHICS_OPTIMIZED" => Ok(CommitmentTypeEnum::GRAPHICSOPTIMIZED),
           "MEMORY_OPTIMIZED" => Ok(CommitmentTypeEnum::MEMORYOPTIMIZED),
           "MEMORY_OPTIMIZED_M3" => Ok(CommitmentTypeEnum::MEMORYOPTIMIZEDM3),
           "STORAGE_OPTIMIZED_Z3" => Ok(CommitmentTypeEnum::STORAGEOPTIMIZEDZ3),
           "TYPE_UNSPECIFIED" => Ok(CommitmentTypeEnum::TYPEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a CommitmentTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ConditionIamEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This is deprecated and has no effect. Do not use.
pub enum ConditionIamEnum {
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "APPROVER"
    #[serde(rename="APPROVER")]
    APPROVER,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "ATTRIBUTION"
    #[serde(rename="ATTRIBUTION")]
    ATTRIBUTION,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "AUTHORITY"
    #[serde(rename="AUTHORITY")]
    AUTHORITY,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "CREDENTIALS_TYPE"
    #[serde(rename="CREDENTIALS_TYPE")]
    CREDENTIALSTYPE,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "CREDS_ASSERTION"
    #[serde(rename="CREDS_ASSERTION")]
    CREDSASSERTION,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "JUSTIFICATION_TYPE"
    #[serde(rename="JUSTIFICATION_TYPE")]
    JUSTIFICATIONTYPE,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "NO_ATTR"
    #[serde(rename="NO_ATTR")]
    NOATTR,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "SECURITY_REALM"
    #[serde(rename="SECURITY_REALM")]
    SECURITYREALM,
}

impl AsRef<str> for ConditionIamEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ConditionIamEnum::APPROVER => "APPROVER",
            ConditionIamEnum::ATTRIBUTION => "ATTRIBUTION",
            ConditionIamEnum::AUTHORITY => "AUTHORITY",
            ConditionIamEnum::CREDENTIALSTYPE => "CREDENTIALS_TYPE",
            ConditionIamEnum::CREDSASSERTION => "CREDS_ASSERTION",
            ConditionIamEnum::JUSTIFICATIONTYPE => "JUSTIFICATION_TYPE",
            ConditionIamEnum::NOATTR => "NO_ATTR",
            ConditionIamEnum::SECURITYREALM => "SECURITY_REALM",
        }
    }
}

impl std::convert::TryFrom< &str> for ConditionIamEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "APPROVER" => Ok(ConditionIamEnum::APPROVER),
           "ATTRIBUTION" => Ok(ConditionIamEnum::ATTRIBUTION),
           "AUTHORITY" => Ok(ConditionIamEnum::AUTHORITY),
           "CREDENTIALS_TYPE" => Ok(ConditionIamEnum::CREDENTIALSTYPE),
           "CREDS_ASSERTION" => Ok(ConditionIamEnum::CREDSASSERTION),
           "JUSTIFICATION_TYPE" => Ok(ConditionIamEnum::JUSTIFICATIONTYPE),
           "NO_ATTR" => Ok(ConditionIamEnum::NOATTR),
           "SECURITY_REALM" => Ok(ConditionIamEnum::SECURITYREALM),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ConditionIamEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ConditionOpEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This is deprecated and has no effect. Do not use.
pub enum ConditionOpEnum {
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "DISCHARGED"
    #[serde(rename="DISCHARGED")]
    DISCHARGED,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "EQUALS"
    #[serde(rename="EQUALS")]
    EQUALS,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "IN"
    #[serde(rename="IN")]
    IN,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "NOT_EQUALS"
    #[serde(rename="NOT_EQUALS")]
    NOTEQUALS,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "NOT_IN"
    #[serde(rename="NOT_IN")]
    NOTIN,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "NO_OP"
    #[serde(rename="NO_OP")]
    NOOP,
}

impl AsRef<str> for ConditionOpEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ConditionOpEnum::DISCHARGED => "DISCHARGED",
            ConditionOpEnum::EQUALS => "EQUALS",
            ConditionOpEnum::IN => "IN",
            ConditionOpEnum::NOTEQUALS => "NOT_EQUALS",
            ConditionOpEnum::NOTIN => "NOT_IN",
            ConditionOpEnum::NOOP => "NO_OP",
        }
    }
}

impl std::convert::TryFrom< &str> for ConditionOpEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DISCHARGED" => Ok(ConditionOpEnum::DISCHARGED),
           "EQUALS" => Ok(ConditionOpEnum::EQUALS),
           "IN" => Ok(ConditionOpEnum::IN),
           "NOT_EQUALS" => Ok(ConditionOpEnum::NOTEQUALS),
           "NOT_IN" => Ok(ConditionOpEnum::NOTIN),
           "NO_OP" => Ok(ConditionOpEnum::NOOP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ConditionOpEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ConditionSysEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This is deprecated and has no effect. Do not use.
pub enum ConditionSysEnum {
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "IP"
    #[serde(rename="IP")]
    IP,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "NAME"
    #[serde(rename="NAME")]
    NAME,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "NO_ATTR"
    #[serde(rename="NO_ATTR")]
    NOATTR,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "REGION"
    #[serde(rename="REGION")]
    REGION,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "SERVICE"
    #[serde(rename="SERVICE")]
    SERVICE,
}

impl AsRef<str> for ConditionSysEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ConditionSysEnum::IP => "IP",
            ConditionSysEnum::NAME => "NAME",
            ConditionSysEnum::NOATTR => "NO_ATTR",
            ConditionSysEnum::REGION => "REGION",
            ConditionSysEnum::SERVICE => "SERVICE",
        }
    }
}

impl std::convert::TryFrom< &str> for ConditionSysEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IP" => Ok(ConditionSysEnum::IP),
           "NAME" => Ok(ConditionSysEnum::NAME),
           "NO_ATTR" => Ok(ConditionSysEnum::NOATTR),
           "REGION" => Ok(ConditionSysEnum::REGION),
           "SERVICE" => Ok(ConditionSysEnum::SERVICE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ConditionSysEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DeprecationStatusStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
pub enum DeprecationStatusStateEnum {
    
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    
    /// "DELETED"
    #[serde(rename="DELETED")]
    DELETED,
    
    /// "DEPRECATED"
    #[serde(rename="DEPRECATED")]
    DEPRECATED,
    
    /// "OBSOLETE"
    #[serde(rename="OBSOLETE")]
    OBSOLETE,
}

impl AsRef<str> for DeprecationStatusStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DeprecationStatusStateEnum::ACTIVE => "ACTIVE",
            DeprecationStatusStateEnum::DELETED => "DELETED",
            DeprecationStatusStateEnum::DEPRECATED => "DEPRECATED",
            DeprecationStatusStateEnum::OBSOLETE => "OBSOLETE",
        }
    }
}

impl std::convert::TryFrom< &str> for DeprecationStatusStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(DeprecationStatusStateEnum::ACTIVE),
           "DELETED" => Ok(DeprecationStatusStateEnum::DELETED),
           "DEPRECATED" => Ok(DeprecationStatusStateEnum::DEPRECATED),
           "OBSOLETE" => Ok(DeprecationStatusStateEnum::OBSOLETE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DeprecationStatusStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DiskArchitectureEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The architecture of the disk. Valid values are ARM64 or X86_64.
pub enum DiskArchitectureEnum {
    

    /// Default value indicating Architecture is not set.
    ///
    /// "ARCHITECTURE_UNSPECIFIED"
    #[serde(rename="ARCHITECTURE_UNSPECIFIED")]
    ARCHITECTUREUNSPECIFIED,
    

    /// Machines with architecture ARM64
    ///
    /// "ARM64"
    #[serde(rename="ARM64")]
    ARM64,
    

    /// Machines with architecture X86_64
    ///
    /// "X86_64"
    #[serde(rename="X86_64")]
    X8664,
}

impl AsRef<str> for DiskArchitectureEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DiskArchitectureEnum::ARCHITECTUREUNSPECIFIED => "ARCHITECTURE_UNSPECIFIED",
            DiskArchitectureEnum::ARM64 => "ARM64",
            DiskArchitectureEnum::X8664 => "X86_64",
        }
    }
}

impl std::convert::TryFrom< &str> for DiskArchitectureEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ARCHITECTURE_UNSPECIFIED" => Ok(DiskArchitectureEnum::ARCHITECTUREUNSPECIFIED),
           "ARM64" => Ok(DiskArchitectureEnum::ARM64),
           "X86_64" => Ok(DiskArchitectureEnum::X8664),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DiskArchitectureEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DiskStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of disk creation. - CREATING: Disk is provisioning. - RESTORING: Source data is being copied into the disk. - FAILED: Disk creation failed. - READY: Disk is ready for use. - DELETING: Disk is deleting. 
pub enum DiskStatusEnum {
    

    /// Disk is provisioning
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// Disk is deleting.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// Disk creation failed.
    ///
    /// "FAILED"
    #[serde(rename="FAILED")]
    FAILED,
    

    /// Disk is ready for use.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
    

    /// Source data is being copied into the disk.
    ///
    /// "RESTORING"
    #[serde(rename="RESTORING")]
    RESTORING,
    

    /// Disk is currently unavailable and cannot be accessed, attached or detached.
    ///
    /// "UNAVAILABLE"
    #[serde(rename="UNAVAILABLE")]
    UNAVAILABLE,
}

impl AsRef<str> for DiskStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DiskStatusEnum::CREATING => "CREATING",
            DiskStatusEnum::DELETING => "DELETING",
            DiskStatusEnum::FAILED => "FAILED",
            DiskStatusEnum::READY => "READY",
            DiskStatusEnum::RESTORING => "RESTORING",
            DiskStatusEnum::UNAVAILABLE => "UNAVAILABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for DiskStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(DiskStatusEnum::CREATING),
           "DELETING" => Ok(DiskStatusEnum::DELETING),
           "FAILED" => Ok(DiskStatusEnum::FAILED),
           "READY" => Ok(DiskStatusEnum::READY),
           "RESTORING" => Ok(DiskStatusEnum::RESTORING),
           "UNAVAILABLE" => Ok(DiskStatusEnum::UNAVAILABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DiskStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DiskInstantiationConfigInstantiateFromEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks. 
pub enum DiskInstantiationConfigInstantiateFromEnum {
    

    /// Attach the existing disk in read-only mode. The request will fail if the disk was attached in read-write mode on the source instance. Applicable to: read-only disks.
    ///
    /// "ATTACH_READ_ONLY"
    #[serde(rename="ATTACH_READ_ONLY")]
    ATTACHREADONLY,
    

    /// Create a blank disk. The disk will be created unformatted. Applicable to: additional read-write disks, local SSDs.
    ///
    /// "BLANK"
    #[serde(rename="BLANK")]
    BLANK,
    

    /// Use the custom image specified in the custom_image field. Applicable to: boot disk, additional read-write disks.
    ///
    /// "CUSTOM_IMAGE"
    #[serde(rename="CUSTOM_IMAGE")]
    CUSTOMIMAGE,
    

    /// Use the default instantiation option for the corresponding type of disk. For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
    ///
    /// "DEFAULT"
    #[serde(rename="DEFAULT")]
    DEFAULT,
    

    /// Do not include the disk in the instance template. Applicable to: additional read-write disks, local SSDs, read-only disks.
    ///
    /// "DO_NOT_INCLUDE"
    #[serde(rename="DO_NOT_INCLUDE")]
    DONOTINCLUDE,
    

    /// Use the same source image used for creation of the source instance's corresponding disk. The request will fail if the source VM's disk was created from a snapshot. Applicable to: boot disk, additional read-write disks.
    ///
    /// "SOURCE_IMAGE"
    #[serde(rename="SOURCE_IMAGE")]
    SOURCEIMAGE,
    

    /// Use the same source image family used for creation of the source instance's corresponding disk. The request will fail if the source image of the source disk does not belong to any image family. Applicable to: boot disk, additional read-write disks.
    ///
    /// "SOURCE_IMAGE_FAMILY"
    #[serde(rename="SOURCE_IMAGE_FAMILY")]
    SOURCEIMAGEFAMILY,
}

impl AsRef<str> for DiskInstantiationConfigInstantiateFromEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DiskInstantiationConfigInstantiateFromEnum::ATTACHREADONLY => "ATTACH_READ_ONLY",
            DiskInstantiationConfigInstantiateFromEnum::BLANK => "BLANK",
            DiskInstantiationConfigInstantiateFromEnum::CUSTOMIMAGE => "CUSTOM_IMAGE",
            DiskInstantiationConfigInstantiateFromEnum::DEFAULT => "DEFAULT",
            DiskInstantiationConfigInstantiateFromEnum::DONOTINCLUDE => "DO_NOT_INCLUDE",
            DiskInstantiationConfigInstantiateFromEnum::SOURCEIMAGE => "SOURCE_IMAGE",
            DiskInstantiationConfigInstantiateFromEnum::SOURCEIMAGEFAMILY => "SOURCE_IMAGE_FAMILY",
        }
    }
}

impl std::convert::TryFrom< &str> for DiskInstantiationConfigInstantiateFromEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ATTACH_READ_ONLY" => Ok(DiskInstantiationConfigInstantiateFromEnum::ATTACHREADONLY),
           "BLANK" => Ok(DiskInstantiationConfigInstantiateFromEnum::BLANK),
           "CUSTOM_IMAGE" => Ok(DiskInstantiationConfigInstantiateFromEnum::CUSTOMIMAGE),
           "DEFAULT" => Ok(DiskInstantiationConfigInstantiateFromEnum::DEFAULT),
           "DO_NOT_INCLUDE" => Ok(DiskInstantiationConfigInstantiateFromEnum::DONOTINCLUDE),
           "SOURCE_IMAGE" => Ok(DiskInstantiationConfigInstantiateFromEnum::SOURCEIMAGE),
           "SOURCE_IMAGE_FAMILY" => Ok(DiskInstantiationConfigInstantiateFromEnum::SOURCEIMAGEFAMILY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DiskInstantiationConfigInstantiateFromEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DiskResourceStatusAsyncReplicationStatusStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum DiskResourceStatusAsyncReplicationStatusStateEnum {
    

    /// Replication is active.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// Secondary disk is created and is waiting for replication to start.
    ///
    /// "CREATED"
    #[serde(rename="CREATED")]
    CREATED,
    

    /// Replication is starting.
    ///
    /// "STARTING"
    #[serde(rename="STARTING")]
    STARTING,
    
    /// "STATE_UNSPECIFIED"
    #[serde(rename="STATE_UNSPECIFIED")]
    STATEUNSPECIFIED,
    

    /// Replication is stopped.
    ///
    /// "STOPPED"
    #[serde(rename="STOPPED")]
    STOPPED,
    

    /// Replication is stopping.
    ///
    /// "STOPPING"
    #[serde(rename="STOPPING")]
    STOPPING,
}

impl AsRef<str> for DiskResourceStatusAsyncReplicationStatusStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DiskResourceStatusAsyncReplicationStatusStateEnum::ACTIVE => "ACTIVE",
            DiskResourceStatusAsyncReplicationStatusStateEnum::CREATED => "CREATED",
            DiskResourceStatusAsyncReplicationStatusStateEnum::STARTING => "STARTING",
            DiskResourceStatusAsyncReplicationStatusStateEnum::STATEUNSPECIFIED => "STATE_UNSPECIFIED",
            DiskResourceStatusAsyncReplicationStatusStateEnum::STOPPED => "STOPPED",
            DiskResourceStatusAsyncReplicationStatusStateEnum::STOPPING => "STOPPING",
        }
    }
}

impl std::convert::TryFrom< &str> for DiskResourceStatusAsyncReplicationStatusStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(DiskResourceStatusAsyncReplicationStatusStateEnum::ACTIVE),
           "CREATED" => Ok(DiskResourceStatusAsyncReplicationStatusStateEnum::CREATED),
           "STARTING" => Ok(DiskResourceStatusAsyncReplicationStatusStateEnum::STARTING),
           "STATE_UNSPECIFIED" => Ok(DiskResourceStatusAsyncReplicationStatusStateEnum::STATEUNSPECIFIED),
           "STOPPED" => Ok(DiskResourceStatusAsyncReplicationStatusStateEnum::STOPPED),
           "STOPPING" => Ok(DiskResourceStatusAsyncReplicationStatusStateEnum::STOPPING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DiskResourceStatusAsyncReplicationStatusStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DistributionPolicyTargetShapeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
pub enum DistributionPolicyTargetShapeEnum {
    

    /// The group picks zones for creating VM instances to fulfill the requested number of VMs within present resource constraints and to maximize utilization of unused zonal reservations. Recommended for batch workloads that do not require high availability.
    ///
    /// "ANY"
    #[serde(rename="ANY")]
    ANY,
    

    /// The group creates all VM instances within a single zone. The zone is selected based on the present resource constraints and to maximize utilization of unused zonal reservations. Recommended for batch workloads with heavy interprocess communication.
    ///
    /// "ANY_SINGLE_ZONE"
    #[serde(rename="ANY_SINGLE_ZONE")]
    ANYSINGLEZONE,
    

    /// The group prioritizes acquisition of resources, scheduling VMs in zones where resources are available while distributing VMs as evenly as possible across selected zones to minimize the impact of zonal failure. Recommended for highly available serving workloads.
    ///
    /// "BALANCED"
    #[serde(rename="BALANCED")]
    BALANCED,
    

    /// The group schedules VM instance creation and deletion to achieve and maintain an even number of managed instances across the selected zones. The distribution is even when the number of managed instances does not differ by more than 1 between any two zones. Recommended for highly available serving workloads.
    ///
    /// "EVEN"
    #[serde(rename="EVEN")]
    EVEN,
}

impl AsRef<str> for DistributionPolicyTargetShapeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DistributionPolicyTargetShapeEnum::ANY => "ANY",
            DistributionPolicyTargetShapeEnum::ANYSINGLEZONE => "ANY_SINGLE_ZONE",
            DistributionPolicyTargetShapeEnum::BALANCED => "BALANCED",
            DistributionPolicyTargetShapeEnum::EVEN => "EVEN",
        }
    }
}

impl std::convert::TryFrom< &str> for DistributionPolicyTargetShapeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ANY" => Ok(DistributionPolicyTargetShapeEnum::ANY),
           "ANY_SINGLE_ZONE" => Ok(DistributionPolicyTargetShapeEnum::ANYSINGLEZONE),
           "BALANCED" => Ok(DistributionPolicyTargetShapeEnum::BALANCED),
           "EVEN" => Ok(DistributionPolicyTargetShapeEnum::EVEN),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DistributionPolicyTargetShapeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ExchangedPeeringRouteTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of the peering route.
pub enum ExchangedPeeringRouteTypeEnum {
    

    /// For routes exported from local network.
    ///
    /// "DYNAMIC_PEERING_ROUTE"
    #[serde(rename="DYNAMIC_PEERING_ROUTE")]
    DYNAMICPEERINGROUTE,
    

    /// The peering route.
    ///
    /// "STATIC_PEERING_ROUTE"
    #[serde(rename="STATIC_PEERING_ROUTE")]
    STATICPEERINGROUTE,
    

    /// The peering route corresponding to subnetwork range.
    ///
    /// "SUBNET_PEERING_ROUTE"
    #[serde(rename="SUBNET_PEERING_ROUTE")]
    SUBNETPEERINGROUTE,
}

impl AsRef<str> for ExchangedPeeringRouteTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ExchangedPeeringRouteTypeEnum::DYNAMICPEERINGROUTE => "DYNAMIC_PEERING_ROUTE",
            ExchangedPeeringRouteTypeEnum::STATICPEERINGROUTE => "STATIC_PEERING_ROUTE",
            ExchangedPeeringRouteTypeEnum::SUBNETPEERINGROUTE => "SUBNET_PEERING_ROUTE",
        }
    }
}

impl std::convert::TryFrom< &str> for ExchangedPeeringRouteTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DYNAMIC_PEERING_ROUTE" => Ok(ExchangedPeeringRouteTypeEnum::DYNAMICPEERINGROUTE),
           "STATIC_PEERING_ROUTE" => Ok(ExchangedPeeringRouteTypeEnum::STATICPEERINGROUTE),
           "SUBNET_PEERING_ROUTE" => Ok(ExchangedPeeringRouteTypeEnum::SUBNETPEERINGROUTE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ExchangedPeeringRouteTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ExternalVpnGatewayRedundancyTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Indicates the user-supplied redundancy type of this external VPN gateway.
pub enum ExternalVpnGatewayRedundancyTypeEnum {
    

    /// The external VPN gateway has four public IP addresses; at the time of writing this API, the AWS virtual private gateway is an example which has four public IP addresses for high availability connections; there should be two VPN connections in the AWS virtual private gateway , each AWS VPN connection has two public IP addresses; please make sure to put two public IP addresses from one AWS VPN connection into interfaces 0 and 1 of this external VPN gateway, and put the other two public IP addresses from another AWS VPN connection into interfaces 2 and 3 of this external VPN gateway. When displaying highly available configuration status for the VPN tunnels connected to FOUR_IPS_REDUNDANCY external VPN gateway, Google will always detect whether interfaces 0 and 1 are connected on one interface of HA Cloud VPN gateway, and detect whether interfaces 2 and 3 are connected to another interface of the HA Cloud VPN gateway.
    ///
    /// "FOUR_IPS_REDUNDANCY"
    #[serde(rename="FOUR_IPS_REDUNDANCY")]
    FOURIPSREDUNDANCY,
    

    /// The external VPN gateway has only one public IP address which internally provide redundancy or failover.
    ///
    /// "SINGLE_IP_INTERNALLY_REDUNDANT"
    #[serde(rename="SINGLE_IP_INTERNALLY_REDUNDANT")]
    SINGLEIPINTERNALLYREDUNDANT,
    

    /// The external VPN gateway has two public IP addresses which are redundant with each other, the following two types of setup on your on-premises side would have this type of redundancy: (1) Two separate on-premises gateways, each with one public IP address, the two on-premises gateways are redundant with each other. (2) A single on-premise gateway with two public IP addresses that are redundant with eatch other.
    ///
    /// "TWO_IPS_REDUNDANCY"
    #[serde(rename="TWO_IPS_REDUNDANCY")]
    TWOIPSREDUNDANCY,
}

impl AsRef<str> for ExternalVpnGatewayRedundancyTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ExternalVpnGatewayRedundancyTypeEnum::FOURIPSREDUNDANCY => "FOUR_IPS_REDUNDANCY",
            ExternalVpnGatewayRedundancyTypeEnum::SINGLEIPINTERNALLYREDUNDANT => "SINGLE_IP_INTERNALLY_REDUNDANT",
            ExternalVpnGatewayRedundancyTypeEnum::TWOIPSREDUNDANCY => "TWO_IPS_REDUNDANCY",
        }
    }
}

impl std::convert::TryFrom< &str> for ExternalVpnGatewayRedundancyTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FOUR_IPS_REDUNDANCY" => Ok(ExternalVpnGatewayRedundancyTypeEnum::FOURIPSREDUNDANCY),
           "SINGLE_IP_INTERNALLY_REDUNDANT" => Ok(ExternalVpnGatewayRedundancyTypeEnum::SINGLEIPINTERNALLYREDUNDANT),
           "TWO_IPS_REDUNDANCY" => Ok(ExternalVpnGatewayRedundancyTypeEnum::TWOIPSREDUNDANCY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ExternalVpnGatewayRedundancyTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region FileContentBufferFileTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The file type of source file.
pub enum FileContentBufferFileTypeEnum {
    
    /// "BIN"
    #[serde(rename="BIN")]
    BIN,
    
    /// "UNDEFINED"
    #[serde(rename="UNDEFINED")]
    UNDEFINED,
    
    /// "X509"
    #[serde(rename="X509")]
    X509,
}

impl AsRef<str> for FileContentBufferFileTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            FileContentBufferFileTypeEnum::BIN => "BIN",
            FileContentBufferFileTypeEnum::UNDEFINED => "UNDEFINED",
            FileContentBufferFileTypeEnum::X509 => "X509",
        }
    }
}

impl std::convert::TryFrom< &str> for FileContentBufferFileTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "BIN" => Ok(FileContentBufferFileTypeEnum::BIN),
           "UNDEFINED" => Ok(FileContentBufferFileTypeEnum::UNDEFINED),
           "X509" => Ok(FileContentBufferFileTypeEnum::X509),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a FileContentBufferFileTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region FirewallDirectionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `EGRESS` traffic, you cannot specify the sourceTags fields.
pub enum FirewallDirectionEnum {
    

    /// Indicates that firewall should apply to outgoing traffic.
    ///
    /// "EGRESS"
    #[serde(rename="EGRESS")]
    EGRESS,
    

    /// Indicates that firewall should apply to incoming traffic.
    ///
    /// "INGRESS"
    #[serde(rename="INGRESS")]
    INGRESS,
}

impl AsRef<str> for FirewallDirectionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            FirewallDirectionEnum::EGRESS => "EGRESS",
            FirewallDirectionEnum::INGRESS => "INGRESS",
        }
    }
}

impl std::convert::TryFrom< &str> for FirewallDirectionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EGRESS" => Ok(FirewallDirectionEnum::EGRESS),
           "INGRESS" => Ok(FirewallDirectionEnum::INGRESS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a FirewallDirectionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region FirewallLogConfigMetadataEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
pub enum FirewallLogConfigMetadataEnum {
    
    /// "EXCLUDE_ALL_METADATA"
    #[serde(rename="EXCLUDE_ALL_METADATA")]
    EXCLUDEALLMETADATA,
    
    /// "INCLUDE_ALL_METADATA"
    #[serde(rename="INCLUDE_ALL_METADATA")]
    INCLUDEALLMETADATA,
}

impl AsRef<str> for FirewallLogConfigMetadataEnum {
    fn as_ref(&self) -> &str {
        match *self {
            FirewallLogConfigMetadataEnum::EXCLUDEALLMETADATA => "EXCLUDE_ALL_METADATA",
            FirewallLogConfigMetadataEnum::INCLUDEALLMETADATA => "INCLUDE_ALL_METADATA",
        }
    }
}

impl std::convert::TryFrom< &str> for FirewallLogConfigMetadataEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EXCLUDE_ALL_METADATA" => Ok(FirewallLogConfigMetadataEnum::EXCLUDEALLMETADATA),
           "INCLUDE_ALL_METADATA" => Ok(FirewallLogConfigMetadataEnum::INCLUDEALLMETADATA),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a FirewallLogConfigMetadataEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region FirewallPolicyRuleDirectionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The direction in which this rule applies.
pub enum FirewallPolicyRuleDirectionEnum {
    
    /// "EGRESS"
    #[serde(rename="EGRESS")]
    EGRESS,
    
    /// "INGRESS"
    #[serde(rename="INGRESS")]
    INGRESS,
}

impl AsRef<str> for FirewallPolicyRuleDirectionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            FirewallPolicyRuleDirectionEnum::EGRESS => "EGRESS",
            FirewallPolicyRuleDirectionEnum::INGRESS => "INGRESS",
        }
    }
}

impl std::convert::TryFrom< &str> for FirewallPolicyRuleDirectionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EGRESS" => Ok(FirewallPolicyRuleDirectionEnum::EGRESS),
           "INGRESS" => Ok(FirewallPolicyRuleDirectionEnum::INGRESS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a FirewallPolicyRuleDirectionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region FirewallPolicyRuleSecureTagStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] State of the secure tag, either `EFFECTIVE` or `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted or its network is deleted.
pub enum FirewallPolicyRuleSecureTagStateEnum {
    
    /// "EFFECTIVE"
    #[serde(rename="EFFECTIVE")]
    EFFECTIVE,
    
    /// "INEFFECTIVE"
    #[serde(rename="INEFFECTIVE")]
    INEFFECTIVE,
}

impl AsRef<str> for FirewallPolicyRuleSecureTagStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            FirewallPolicyRuleSecureTagStateEnum::EFFECTIVE => "EFFECTIVE",
            FirewallPolicyRuleSecureTagStateEnum::INEFFECTIVE => "INEFFECTIVE",
        }
    }
}

impl std::convert::TryFrom< &str> for FirewallPolicyRuleSecureTagStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EFFECTIVE" => Ok(FirewallPolicyRuleSecureTagStateEnum::EFFECTIVE),
           "INEFFECTIVE" => Ok(FirewallPolicyRuleSecureTagStateEnum::INEFFECTIVE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a FirewallPolicyRuleSecureTagStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ForwardingRuleIPProtocolEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The IP protocol to which this rule applies. For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT. The valid IP protocols are different for different load balancing products as described in [Load balancing features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
pub enum ForwardingRuleIPProtocolEnum {
    
    /// "AH"
    #[serde(rename="AH")]
    AH,
    
    /// "ESP"
    #[serde(rename="ESP")]
    ESP,
    
    /// "ICMP"
    #[serde(rename="ICMP")]
    ICMP,
    
    /// "L3_DEFAULT"
    #[serde(rename="L3_DEFAULT")]
    L3DEFAULT,
    
    /// "SCTP"
    #[serde(rename="SCTP")]
    SCTP,
    
    /// "TCP"
    #[serde(rename="TCP")]
    TCP,
    
    /// "UDP"
    #[serde(rename="UDP")]
    UDP,
}

impl AsRef<str> for ForwardingRuleIPProtocolEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ForwardingRuleIPProtocolEnum::AH => "AH",
            ForwardingRuleIPProtocolEnum::ESP => "ESP",
            ForwardingRuleIPProtocolEnum::ICMP => "ICMP",
            ForwardingRuleIPProtocolEnum::L3DEFAULT => "L3_DEFAULT",
            ForwardingRuleIPProtocolEnum::SCTP => "SCTP",
            ForwardingRuleIPProtocolEnum::TCP => "TCP",
            ForwardingRuleIPProtocolEnum::UDP => "UDP",
        }
    }
}

impl std::convert::TryFrom< &str> for ForwardingRuleIPProtocolEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AH" => Ok(ForwardingRuleIPProtocolEnum::AH),
           "ESP" => Ok(ForwardingRuleIPProtocolEnum::ESP),
           "ICMP" => Ok(ForwardingRuleIPProtocolEnum::ICMP),
           "L3_DEFAULT" => Ok(ForwardingRuleIPProtocolEnum::L3DEFAULT),
           "SCTP" => Ok(ForwardingRuleIPProtocolEnum::SCTP),
           "TCP" => Ok(ForwardingRuleIPProtocolEnum::TCP),
           "UDP" => Ok(ForwardingRuleIPProtocolEnum::UDP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ForwardingRuleIPProtocolEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ForwardingRuleIpVersionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6.
pub enum ForwardingRuleIpVersionEnum {
    
    /// "IPV4"
    #[serde(rename="IPV4")]
    IPV4,
    
    /// "IPV6"
    #[serde(rename="IPV6")]
    IPV6,
    
    /// "UNSPECIFIED_VERSION"
    #[serde(rename="UNSPECIFIED_VERSION")]
    UNSPECIFIEDVERSION,
}

impl AsRef<str> for ForwardingRuleIpVersionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ForwardingRuleIpVersionEnum::IPV4 => "IPV4",
            ForwardingRuleIpVersionEnum::IPV6 => "IPV6",
            ForwardingRuleIpVersionEnum::UNSPECIFIEDVERSION => "UNSPECIFIED_VERSION",
        }
    }
}

impl std::convert::TryFrom< &str> for ForwardingRuleIpVersionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPV4" => Ok(ForwardingRuleIpVersionEnum::IPV4),
           "IPV6" => Ok(ForwardingRuleIpVersionEnum::IPV6),
           "UNSPECIFIED_VERSION" => Ok(ForwardingRuleIpVersionEnum::UNSPECIFIEDVERSION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ForwardingRuleIpVersionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ForwardingRuleLoadBalancingSchemeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the forwarding rule type. For more information about forwarding rules, refer to Forwarding rule concepts.
pub enum ForwardingRuleLoadBalancingSchemeEnum {
    
    /// "EXTERNAL"
    #[serde(rename="EXTERNAL")]
    EXTERNAL,
    
    /// "EXTERNAL_MANAGED"
    #[serde(rename="EXTERNAL_MANAGED")]
    EXTERNALMANAGED,
    
    /// "INTERNAL"
    #[serde(rename="INTERNAL")]
    INTERNAL,
    
    /// "INTERNAL_MANAGED"
    #[serde(rename="INTERNAL_MANAGED")]
    INTERNALMANAGED,
    
    /// "INTERNAL_SELF_MANAGED"
    #[serde(rename="INTERNAL_SELF_MANAGED")]
    INTERNALSELFMANAGED,
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
}

impl AsRef<str> for ForwardingRuleLoadBalancingSchemeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ForwardingRuleLoadBalancingSchemeEnum::EXTERNAL => "EXTERNAL",
            ForwardingRuleLoadBalancingSchemeEnum::EXTERNALMANAGED => "EXTERNAL_MANAGED",
            ForwardingRuleLoadBalancingSchemeEnum::INTERNAL => "INTERNAL",
            ForwardingRuleLoadBalancingSchemeEnum::INTERNALMANAGED => "INTERNAL_MANAGED",
            ForwardingRuleLoadBalancingSchemeEnum::INTERNALSELFMANAGED => "INTERNAL_SELF_MANAGED",
            ForwardingRuleLoadBalancingSchemeEnum::INVALID => "INVALID",
        }
    }
}

impl std::convert::TryFrom< &str> for ForwardingRuleLoadBalancingSchemeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EXTERNAL" => Ok(ForwardingRuleLoadBalancingSchemeEnum::EXTERNAL),
           "EXTERNAL_MANAGED" => Ok(ForwardingRuleLoadBalancingSchemeEnum::EXTERNALMANAGED),
           "INTERNAL" => Ok(ForwardingRuleLoadBalancingSchemeEnum::INTERNAL),
           "INTERNAL_MANAGED" => Ok(ForwardingRuleLoadBalancingSchemeEnum::INTERNALMANAGED),
           "INTERNAL_SELF_MANAGED" => Ok(ForwardingRuleLoadBalancingSchemeEnum::INTERNALSELFMANAGED),
           "INVALID" => Ok(ForwardingRuleLoadBalancingSchemeEnum::INVALID),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ForwardingRuleLoadBalancingSchemeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ForwardingRuleNetworkTierEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD. For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM. If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
pub enum ForwardingRuleNetworkTierEnum {
    

    /// Public internet quality with fixed bandwidth.
    ///
    /// "FIXED_STANDARD"
    #[serde(rename="FIXED_STANDARD")]
    FIXEDSTANDARD,
    

    /// High quality, Google-grade network tier, support for all networking products.
    ///
    /// "PREMIUM"
    #[serde(rename="PREMIUM")]
    PREMIUM,
    

    /// Public internet quality, only limited support for other networking products.
    ///
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
    

    /// (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    ///
    /// "STANDARD_OVERRIDES_FIXED_STANDARD"
    #[serde(rename="STANDARD_OVERRIDES_FIXED_STANDARD")]
    STANDARDOVERRIDESFIXEDSTANDARD,
}

impl AsRef<str> for ForwardingRuleNetworkTierEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ForwardingRuleNetworkTierEnum::FIXEDSTANDARD => "FIXED_STANDARD",
            ForwardingRuleNetworkTierEnum::PREMIUM => "PREMIUM",
            ForwardingRuleNetworkTierEnum::STANDARD => "STANDARD",
            ForwardingRuleNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD => "STANDARD_OVERRIDES_FIXED_STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for ForwardingRuleNetworkTierEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FIXED_STANDARD" => Ok(ForwardingRuleNetworkTierEnum::FIXEDSTANDARD),
           "PREMIUM" => Ok(ForwardingRuleNetworkTierEnum::PREMIUM),
           "STANDARD" => Ok(ForwardingRuleNetworkTierEnum::STANDARD),
           "STANDARD_OVERRIDES_FIXED_STANDARD" => Ok(ForwardingRuleNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ForwardingRuleNetworkTierEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ForwardingRulePscConnectionStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum ForwardingRulePscConnectionStatusEnum {
    

    /// The connection has been accepted by the producer.
    ///
    /// "ACCEPTED"
    #[serde(rename="ACCEPTED")]
    ACCEPTED,
    

    /// The connection has been closed by the producer and will not serve traffic going forward.
    ///
    /// "CLOSED"
    #[serde(rename="CLOSED")]
    CLOSED,
    

    /// The connection has been accepted by the producer, but the producer needs to take further action before the forwarding rule can serve traffic.
    ///
    /// "NEEDS_ATTENTION"
    #[serde(rename="NEEDS_ATTENTION")]
    NEEDSATTENTION,
    

    /// The connection is pending acceptance by the producer.
    ///
    /// "PENDING"
    #[serde(rename="PENDING")]
    PENDING,
    

    /// The connection has been rejected by the producer.
    ///
    /// "REJECTED"
    #[serde(rename="REJECTED")]
    REJECTED,
    
    /// "STATUS_UNSPECIFIED"
    #[serde(rename="STATUS_UNSPECIFIED")]
    STATUSUNSPECIFIED,
}

impl AsRef<str> for ForwardingRulePscConnectionStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ForwardingRulePscConnectionStatusEnum::ACCEPTED => "ACCEPTED",
            ForwardingRulePscConnectionStatusEnum::CLOSED => "CLOSED",
            ForwardingRulePscConnectionStatusEnum::NEEDSATTENTION => "NEEDS_ATTENTION",
            ForwardingRulePscConnectionStatusEnum::PENDING => "PENDING",
            ForwardingRulePscConnectionStatusEnum::REJECTED => "REJECTED",
            ForwardingRulePscConnectionStatusEnum::STATUSUNSPECIFIED => "STATUS_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for ForwardingRulePscConnectionStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACCEPTED" => Ok(ForwardingRulePscConnectionStatusEnum::ACCEPTED),
           "CLOSED" => Ok(ForwardingRulePscConnectionStatusEnum::CLOSED),
           "NEEDS_ATTENTION" => Ok(ForwardingRulePscConnectionStatusEnum::NEEDSATTENTION),
           "PENDING" => Ok(ForwardingRulePscConnectionStatusEnum::PENDING),
           "REJECTED" => Ok(ForwardingRulePscConnectionStatusEnum::REJECTED),
           "STATUS_UNSPECIFIED" => Ok(ForwardingRulePscConnectionStatusEnum::STATUSUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ForwardingRulePscConnectionStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region GRPCHealthCheckPortSpecificationEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
pub enum GRPCHealthCheckPortSpecificationEnum {
    

    /// The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    ///
    /// "USE_FIXED_PORT"
    #[serde(rename="USE_FIXED_PORT")]
    USEFIXEDPORT,
    

    /// Not supported.
    ///
    /// "USE_NAMED_PORT"
    #[serde(rename="USE_NAMED_PORT")]
    USENAMEDPORT,
    

    /// For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    ///
    /// "USE_SERVING_PORT"
    #[serde(rename="USE_SERVING_PORT")]
    USESERVINGPORT,
}

impl AsRef<str> for GRPCHealthCheckPortSpecificationEnum {
    fn as_ref(&self) -> &str {
        match *self {
            GRPCHealthCheckPortSpecificationEnum::USEFIXEDPORT => "USE_FIXED_PORT",
            GRPCHealthCheckPortSpecificationEnum::USENAMEDPORT => "USE_NAMED_PORT",
            GRPCHealthCheckPortSpecificationEnum::USESERVINGPORT => "USE_SERVING_PORT",
        }
    }
}

impl std::convert::TryFrom< &str> for GRPCHealthCheckPortSpecificationEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "USE_FIXED_PORT" => Ok(GRPCHealthCheckPortSpecificationEnum::USEFIXEDPORT),
           "USE_NAMED_PORT" => Ok(GRPCHealthCheckPortSpecificationEnum::USENAMEDPORT),
           "USE_SERVING_PORT" => Ok(GRPCHealthCheckPortSpecificationEnum::USESERVINGPORT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a GRPCHealthCheckPortSpecificationEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region GuestOsFeatureTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The ID of a supported feature. To add multiple values, use commas to separate values. Set to one or more of the following values: - VIRTIO_SCSI_MULTIQUEUE - WINDOWS - MULTI_IP_SUBNET - UEFI_COMPATIBLE - GVNIC - SEV_CAPABLE - SUSPEND_RESUME_COMPATIBLE - SEV_LIVE_MIGRATABLE_V2 - SEV_SNP_CAPABLE - TDX_CAPABLE - IDPF For more information, see Enabling guest operating system features.
pub enum GuestOsFeatureTypeEnum {
    
    /// "FEATURE_TYPE_UNSPECIFIED"
    #[serde(rename="FEATURE_TYPE_UNSPECIFIED")]
    FEATURETYPEUNSPECIFIED,
    
    /// "GVNIC"
    #[serde(rename="GVNIC")]
    GVNIC,
    
    /// "IDPF"
    #[serde(rename="IDPF")]
    IDPF,
    
    /// "MULTI_IP_SUBNET"
    #[serde(rename="MULTI_IP_SUBNET")]
    MULTIIPSUBNET,
    
    /// "SECURE_BOOT"
    #[serde(rename="SECURE_BOOT")]
    SECUREBOOT,
    
    /// "SEV_CAPABLE"
    #[serde(rename="SEV_CAPABLE")]
    SEVCAPABLE,
    
    /// "SEV_LIVE_MIGRATABLE"
    #[serde(rename="SEV_LIVE_MIGRATABLE")]
    SEVLIVEMIGRATABLE,
    
    /// "SEV_LIVE_MIGRATABLE_V2"
    #[serde(rename="SEV_LIVE_MIGRATABLE_V2")]
    SEVLIVEMIGRATABLEV2,
    
    /// "SEV_SNP_CAPABLE"
    #[serde(rename="SEV_SNP_CAPABLE")]
    SEVSNPCAPABLE,
    
    /// "UEFI_COMPATIBLE"
    #[serde(rename="UEFI_COMPATIBLE")]
    UEFICOMPATIBLE,
    
    /// "VIRTIO_SCSI_MULTIQUEUE"
    #[serde(rename="VIRTIO_SCSI_MULTIQUEUE")]
    VIRTIOSCSIMULTIQUEUE,
    
    /// "WINDOWS"
    #[serde(rename="WINDOWS")]
    WINDOWS,
}

impl AsRef<str> for GuestOsFeatureTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            GuestOsFeatureTypeEnum::FEATURETYPEUNSPECIFIED => "FEATURE_TYPE_UNSPECIFIED",
            GuestOsFeatureTypeEnum::GVNIC => "GVNIC",
            GuestOsFeatureTypeEnum::IDPF => "IDPF",
            GuestOsFeatureTypeEnum::MULTIIPSUBNET => "MULTI_IP_SUBNET",
            GuestOsFeatureTypeEnum::SECUREBOOT => "SECURE_BOOT",
            GuestOsFeatureTypeEnum::SEVCAPABLE => "SEV_CAPABLE",
            GuestOsFeatureTypeEnum::SEVLIVEMIGRATABLE => "SEV_LIVE_MIGRATABLE",
            GuestOsFeatureTypeEnum::SEVLIVEMIGRATABLEV2 => "SEV_LIVE_MIGRATABLE_V2",
            GuestOsFeatureTypeEnum::SEVSNPCAPABLE => "SEV_SNP_CAPABLE",
            GuestOsFeatureTypeEnum::UEFICOMPATIBLE => "UEFI_COMPATIBLE",
            GuestOsFeatureTypeEnum::VIRTIOSCSIMULTIQUEUE => "VIRTIO_SCSI_MULTIQUEUE",
            GuestOsFeatureTypeEnum::WINDOWS => "WINDOWS",
        }
    }
}

impl std::convert::TryFrom< &str> for GuestOsFeatureTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FEATURE_TYPE_UNSPECIFIED" => Ok(GuestOsFeatureTypeEnum::FEATURETYPEUNSPECIFIED),
           "GVNIC" => Ok(GuestOsFeatureTypeEnum::GVNIC),
           "IDPF" => Ok(GuestOsFeatureTypeEnum::IDPF),
           "MULTI_IP_SUBNET" => Ok(GuestOsFeatureTypeEnum::MULTIIPSUBNET),
           "SECURE_BOOT" => Ok(GuestOsFeatureTypeEnum::SECUREBOOT),
           "SEV_CAPABLE" => Ok(GuestOsFeatureTypeEnum::SEVCAPABLE),
           "SEV_LIVE_MIGRATABLE" => Ok(GuestOsFeatureTypeEnum::SEVLIVEMIGRATABLE),
           "SEV_LIVE_MIGRATABLE_V2" => Ok(GuestOsFeatureTypeEnum::SEVLIVEMIGRATABLEV2),
           "SEV_SNP_CAPABLE" => Ok(GuestOsFeatureTypeEnum::SEVSNPCAPABLE),
           "UEFI_COMPATIBLE" => Ok(GuestOsFeatureTypeEnum::UEFICOMPATIBLE),
           "VIRTIO_SCSI_MULTIQUEUE" => Ok(GuestOsFeatureTypeEnum::VIRTIOSCSIMULTIQUEUE),
           "WINDOWS" => Ok(GuestOsFeatureTypeEnum::WINDOWS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a GuestOsFeatureTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HTTP2HealthCheckPortSpecificationEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
pub enum HTTP2HealthCheckPortSpecificationEnum {
    

    /// The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    ///
    /// "USE_FIXED_PORT"
    #[serde(rename="USE_FIXED_PORT")]
    USEFIXEDPORT,
    

    /// Not supported.
    ///
    /// "USE_NAMED_PORT"
    #[serde(rename="USE_NAMED_PORT")]
    USENAMEDPORT,
    

    /// For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    ///
    /// "USE_SERVING_PORT"
    #[serde(rename="USE_SERVING_PORT")]
    USESERVINGPORT,
}

impl AsRef<str> for HTTP2HealthCheckPortSpecificationEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HTTP2HealthCheckPortSpecificationEnum::USEFIXEDPORT => "USE_FIXED_PORT",
            HTTP2HealthCheckPortSpecificationEnum::USENAMEDPORT => "USE_NAMED_PORT",
            HTTP2HealthCheckPortSpecificationEnum::USESERVINGPORT => "USE_SERVING_PORT",
        }
    }
}

impl std::convert::TryFrom< &str> for HTTP2HealthCheckPortSpecificationEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "USE_FIXED_PORT" => Ok(HTTP2HealthCheckPortSpecificationEnum::USEFIXEDPORT),
           "USE_NAMED_PORT" => Ok(HTTP2HealthCheckPortSpecificationEnum::USENAMEDPORT),
           "USE_SERVING_PORT" => Ok(HTTP2HealthCheckPortSpecificationEnum::USESERVINGPORT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HTTP2HealthCheckPortSpecificationEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HTTP2HealthCheckProxyHeaderEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
pub enum HTTP2HealthCheckProxyHeaderEnum {
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    
    /// "PROXY_V1"
    #[serde(rename="PROXY_V1")]
    PROXYV1,
}

impl AsRef<str> for HTTP2HealthCheckProxyHeaderEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HTTP2HealthCheckProxyHeaderEnum::NONE => "NONE",
            HTTP2HealthCheckProxyHeaderEnum::PROXYV1 => "PROXY_V1",
        }
    }
}

impl std::convert::TryFrom< &str> for HTTP2HealthCheckProxyHeaderEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(HTTP2HealthCheckProxyHeaderEnum::NONE),
           "PROXY_V1" => Ok(HTTP2HealthCheckProxyHeaderEnum::PROXYV1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HTTP2HealthCheckProxyHeaderEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HTTPHealthCheckPortSpecificationEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Also supported in legacy HTTP health checks for target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
pub enum HTTPHealthCheckPortSpecificationEnum {
    

    /// The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    ///
    /// "USE_FIXED_PORT"
    #[serde(rename="USE_FIXED_PORT")]
    USEFIXEDPORT,
    

    /// Not supported.
    ///
    /// "USE_NAMED_PORT"
    #[serde(rename="USE_NAMED_PORT")]
    USENAMEDPORT,
    

    /// For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    ///
    /// "USE_SERVING_PORT"
    #[serde(rename="USE_SERVING_PORT")]
    USESERVINGPORT,
}

impl AsRef<str> for HTTPHealthCheckPortSpecificationEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HTTPHealthCheckPortSpecificationEnum::USEFIXEDPORT => "USE_FIXED_PORT",
            HTTPHealthCheckPortSpecificationEnum::USENAMEDPORT => "USE_NAMED_PORT",
            HTTPHealthCheckPortSpecificationEnum::USESERVINGPORT => "USE_SERVING_PORT",
        }
    }
}

impl std::convert::TryFrom< &str> for HTTPHealthCheckPortSpecificationEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "USE_FIXED_PORT" => Ok(HTTPHealthCheckPortSpecificationEnum::USEFIXEDPORT),
           "USE_NAMED_PORT" => Ok(HTTPHealthCheckPortSpecificationEnum::USENAMEDPORT),
           "USE_SERVING_PORT" => Ok(HTTPHealthCheckPortSpecificationEnum::USESERVINGPORT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HTTPHealthCheckPortSpecificationEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HTTPHealthCheckProxyHeaderEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
pub enum HTTPHealthCheckProxyHeaderEnum {
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    
    /// "PROXY_V1"
    #[serde(rename="PROXY_V1")]
    PROXYV1,
}

impl AsRef<str> for HTTPHealthCheckProxyHeaderEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HTTPHealthCheckProxyHeaderEnum::NONE => "NONE",
            HTTPHealthCheckProxyHeaderEnum::PROXYV1 => "PROXY_V1",
        }
    }
}

impl std::convert::TryFrom< &str> for HTTPHealthCheckProxyHeaderEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(HTTPHealthCheckProxyHeaderEnum::NONE),
           "PROXY_V1" => Ok(HTTPHealthCheckProxyHeaderEnum::PROXYV1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HTTPHealthCheckProxyHeaderEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HTTPSHealthCheckPortSpecificationEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
pub enum HTTPSHealthCheckPortSpecificationEnum {
    

    /// The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    ///
    /// "USE_FIXED_PORT"
    #[serde(rename="USE_FIXED_PORT")]
    USEFIXEDPORT,
    

    /// Not supported.
    ///
    /// "USE_NAMED_PORT"
    #[serde(rename="USE_NAMED_PORT")]
    USENAMEDPORT,
    

    /// For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    ///
    /// "USE_SERVING_PORT"
    #[serde(rename="USE_SERVING_PORT")]
    USESERVINGPORT,
}

impl AsRef<str> for HTTPSHealthCheckPortSpecificationEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HTTPSHealthCheckPortSpecificationEnum::USEFIXEDPORT => "USE_FIXED_PORT",
            HTTPSHealthCheckPortSpecificationEnum::USENAMEDPORT => "USE_NAMED_PORT",
            HTTPSHealthCheckPortSpecificationEnum::USESERVINGPORT => "USE_SERVING_PORT",
        }
    }
}

impl std::convert::TryFrom< &str> for HTTPSHealthCheckPortSpecificationEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "USE_FIXED_PORT" => Ok(HTTPSHealthCheckPortSpecificationEnum::USEFIXEDPORT),
           "USE_NAMED_PORT" => Ok(HTTPSHealthCheckPortSpecificationEnum::USENAMEDPORT),
           "USE_SERVING_PORT" => Ok(HTTPSHealthCheckPortSpecificationEnum::USESERVINGPORT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HTTPSHealthCheckPortSpecificationEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HTTPSHealthCheckProxyHeaderEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
pub enum HTTPSHealthCheckProxyHeaderEnum {
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    
    /// "PROXY_V1"
    #[serde(rename="PROXY_V1")]
    PROXYV1,
}

impl AsRef<str> for HTTPSHealthCheckProxyHeaderEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HTTPSHealthCheckProxyHeaderEnum::NONE => "NONE",
            HTTPSHealthCheckProxyHeaderEnum::PROXYV1 => "PROXY_V1",
        }
    }
}

impl std::convert::TryFrom< &str> for HTTPSHealthCheckProxyHeaderEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(HTTPSHealthCheckProxyHeaderEnum::NONE),
           "PROXY_V1" => Ok(HTTPSHealthCheckProxyHeaderEnum::PROXYV1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HTTPSHealthCheckProxyHeaderEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HealthCheckTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field.
pub enum HealthCheckTypeEnum {
    
    /// "GRPC"
    #[serde(rename="GRPC")]
    GRPC,
    
    /// "HTTP"
    #[serde(rename="HTTP")]
    HTTP,
    
    /// "HTTP2"
    #[serde(rename="HTTP2")]
    HTTP2,
    
    /// "HTTPS"
    #[serde(rename="HTTPS")]
    HTTPS,
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    
    /// "SSL"
    #[serde(rename="SSL")]
    SSL,
    
    /// "TCP"
    #[serde(rename="TCP")]
    TCP,
}

impl AsRef<str> for HealthCheckTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HealthCheckTypeEnum::GRPC => "GRPC",
            HealthCheckTypeEnum::HTTP => "HTTP",
            HealthCheckTypeEnum::HTTP2 => "HTTP2",
            HealthCheckTypeEnum::HTTPS => "HTTPS",
            HealthCheckTypeEnum::INVALID => "INVALID",
            HealthCheckTypeEnum::SSL => "SSL",
            HealthCheckTypeEnum::TCP => "TCP",
        }
    }
}

impl std::convert::TryFrom< &str> for HealthCheckTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GRPC" => Ok(HealthCheckTypeEnum::GRPC),
           "HTTP" => Ok(HealthCheckTypeEnum::HTTP),
           "HTTP2" => Ok(HealthCheckTypeEnum::HTTP2),
           "HTTPS" => Ok(HealthCheckTypeEnum::HTTPS),
           "INVALID" => Ok(HealthCheckTypeEnum::INVALID),
           "SSL" => Ok(HealthCheckTypeEnum::SSL),
           "TCP" => Ok(HealthCheckTypeEnum::TCP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HealthCheckTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HealthCheckServiceHealthStatusAggregationPolicyEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. . This is only allowed with regional HealthCheckService.
pub enum HealthCheckServiceHealthStatusAggregationPolicyEnum {
    

    /// If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY.
    ///
    /// "AND"
    #[serde(rename="AND")]
    AND,
    

    /// An EndpointHealth message is returned for each backend in the health check service.
    ///
    /// "NO_AGGREGATION"
    #[serde(rename="NO_AGGREGATION")]
    NOAGGREGATION,
}

impl AsRef<str> for HealthCheckServiceHealthStatusAggregationPolicyEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HealthCheckServiceHealthStatusAggregationPolicyEnum::AND => "AND",
            HealthCheckServiceHealthStatusAggregationPolicyEnum::NOAGGREGATION => "NO_AGGREGATION",
        }
    }
}

impl std::convert::TryFrom< &str> for HealthCheckServiceHealthStatusAggregationPolicyEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AND" => Ok(HealthCheckServiceHealthStatusAggregationPolicyEnum::AND),
           "NO_AGGREGATION" => Ok(HealthCheckServiceHealthStatusAggregationPolicyEnum::NOAGGREGATION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HealthCheckServiceHealthStatusAggregationPolicyEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HealthStatusHealthStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Health state of the IPv4 address of the instance.
pub enum HealthStatusHealthStateEnum {
    
    /// "HEALTHY"
    #[serde(rename="HEALTHY")]
    HEALTHY,
    
    /// "UNHEALTHY"
    #[serde(rename="UNHEALTHY")]
    UNHEALTHY,
}

impl AsRef<str> for HealthStatusHealthStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HealthStatusHealthStateEnum::HEALTHY => "HEALTHY",
            HealthStatusHealthStateEnum::UNHEALTHY => "UNHEALTHY",
        }
    }
}

impl std::convert::TryFrom< &str> for HealthStatusHealthStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "HEALTHY" => Ok(HealthStatusHealthStateEnum::HEALTHY),
           "UNHEALTHY" => Ok(HealthStatusHealthStateEnum::UNHEALTHY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HealthStatusHealthStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HealthStatusWeightErrorEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum HealthStatusWeightErrorEnum {
    

    /// The response to a Health Check probe had the HTTP response header field X-Load-Balancing-Endpoint-Weight, but its content was invalid (i.e., not a non-negative single-precision floating-point number in decimal string representation).
    ///
    /// "INVALID_WEIGHT"
    #[serde(rename="INVALID_WEIGHT")]
    INVALIDWEIGHT,
    

    /// The response to a Health Check probe did not have the HTTP response header field X-Load-Balancing-Endpoint-Weight.
    ///
    /// "MISSING_WEIGHT"
    #[serde(rename="MISSING_WEIGHT")]
    MISSINGWEIGHT,
    

    /// This is the value when the accompanied health status is either TIMEOUT (i.e.,the Health Check probe was not able to get a response in time) or UNKNOWN. For the latter, it should be typically because there has not been sufficient time to parse and report the weight for a new backend (which is with 0.0.0.0 ip address). However, it can be also due to an outage case for which the health status is explicitly reset to UNKNOWN.
    ///
    /// "UNAVAILABLE_WEIGHT"
    #[serde(rename="UNAVAILABLE_WEIGHT")]
    UNAVAILABLEWEIGHT,
    

    /// This is the default value when WeightReportMode is DISABLE, and is also the initial value when WeightReportMode has just updated to ENABLE or DRY_RUN and there has not been sufficient time to parse and report the backend weight.
    ///
    /// "WEIGHT_NONE"
    #[serde(rename="WEIGHT_NONE")]
    WEIGHTNONE,
}

impl AsRef<str> for HealthStatusWeightErrorEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HealthStatusWeightErrorEnum::INVALIDWEIGHT => "INVALID_WEIGHT",
            HealthStatusWeightErrorEnum::MISSINGWEIGHT => "MISSING_WEIGHT",
            HealthStatusWeightErrorEnum::UNAVAILABLEWEIGHT => "UNAVAILABLE_WEIGHT",
            HealthStatusWeightErrorEnum::WEIGHTNONE => "WEIGHT_NONE",
        }
    }
}

impl std::convert::TryFrom< &str> for HealthStatusWeightErrorEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "INVALID_WEIGHT" => Ok(HealthStatusWeightErrorEnum::INVALIDWEIGHT),
           "MISSING_WEIGHT" => Ok(HealthStatusWeightErrorEnum::MISSINGWEIGHT),
           "UNAVAILABLE_WEIGHT" => Ok(HealthStatusWeightErrorEnum::UNAVAILABLEWEIGHT),
           "WEIGHT_NONE" => Ok(HealthStatusWeightErrorEnum::WEIGHTNONE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HealthStatusWeightErrorEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HealthStatusForNetworkEndpointHealthStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Health state of the network endpoint determined based on the health checks configured.
pub enum HealthStatusForNetworkEndpointHealthStateEnum {
    

    /// Endpoint is being drained.
    ///
    /// "DRAINING"
    #[serde(rename="DRAINING")]
    DRAINING,
    

    /// Endpoint is healthy.
    ///
    /// "HEALTHY"
    #[serde(rename="HEALTHY")]
    HEALTHY,
    

    /// Endpoint is unhealthy.
    ///
    /// "UNHEALTHY"
    #[serde(rename="UNHEALTHY")]
    UNHEALTHY,
    

    /// Health status of the endpoint is unknown.
    ///
    /// "UNKNOWN"
    #[serde(rename="UNKNOWN")]
    UNKNOWN,
}

impl AsRef<str> for HealthStatusForNetworkEndpointHealthStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HealthStatusForNetworkEndpointHealthStateEnum::DRAINING => "DRAINING",
            HealthStatusForNetworkEndpointHealthStateEnum::HEALTHY => "HEALTHY",
            HealthStatusForNetworkEndpointHealthStateEnum::UNHEALTHY => "UNHEALTHY",
            HealthStatusForNetworkEndpointHealthStateEnum::UNKNOWN => "UNKNOWN",
        }
    }
}

impl std::convert::TryFrom< &str> for HealthStatusForNetworkEndpointHealthStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DRAINING" => Ok(HealthStatusForNetworkEndpointHealthStateEnum::DRAINING),
           "HEALTHY" => Ok(HealthStatusForNetworkEndpointHealthStateEnum::HEALTHY),
           "UNHEALTHY" => Ok(HealthStatusForNetworkEndpointHealthStateEnum::UNHEALTHY),
           "UNKNOWN" => Ok(HealthStatusForNetworkEndpointHealthStateEnum::UNKNOWN),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HealthStatusForNetworkEndpointHealthStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HttpRedirectActionRedirectResponseCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained. 
pub enum HttpRedirectActionRedirectResponseCodeEnum {
    

    /// Http Status Code 302 - Found.
    ///
    /// "FOUND"
    #[serde(rename="FOUND")]
    FOUND,
    

    /// Http Status Code 301 - Moved Permanently.
    ///
    /// "MOVED_PERMANENTLY_DEFAULT"
    #[serde(rename="MOVED_PERMANENTLY_DEFAULT")]
    MOVEDPERMANENTLYDEFAULT,
    

    /// Http Status Code 308 - Permanent Redirect maintaining HTTP method.
    ///
    /// "PERMANENT_REDIRECT"
    #[serde(rename="PERMANENT_REDIRECT")]
    PERMANENTREDIRECT,
    

    /// Http Status Code 303 - See Other.
    ///
    /// "SEE_OTHER"
    #[serde(rename="SEE_OTHER")]
    SEEOTHER,
    

    /// Http Status Code 307 - Temporary Redirect maintaining HTTP method.
    ///
    /// "TEMPORARY_REDIRECT"
    #[serde(rename="TEMPORARY_REDIRECT")]
    TEMPORARYREDIRECT,
}

impl AsRef<str> for HttpRedirectActionRedirectResponseCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HttpRedirectActionRedirectResponseCodeEnum::FOUND => "FOUND",
            HttpRedirectActionRedirectResponseCodeEnum::MOVEDPERMANENTLYDEFAULT => "MOVED_PERMANENTLY_DEFAULT",
            HttpRedirectActionRedirectResponseCodeEnum::PERMANENTREDIRECT => "PERMANENT_REDIRECT",
            HttpRedirectActionRedirectResponseCodeEnum::SEEOTHER => "SEE_OTHER",
            HttpRedirectActionRedirectResponseCodeEnum::TEMPORARYREDIRECT => "TEMPORARY_REDIRECT",
        }
    }
}

impl std::convert::TryFrom< &str> for HttpRedirectActionRedirectResponseCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FOUND" => Ok(HttpRedirectActionRedirectResponseCodeEnum::FOUND),
           "MOVED_PERMANENTLY_DEFAULT" => Ok(HttpRedirectActionRedirectResponseCodeEnum::MOVEDPERMANENTLYDEFAULT),
           "PERMANENT_REDIRECT" => Ok(HttpRedirectActionRedirectResponseCodeEnum::PERMANENTREDIRECT),
           "SEE_OTHER" => Ok(HttpRedirectActionRedirectResponseCodeEnum::SEEOTHER),
           "TEMPORARY_REDIRECT" => Ok(HttpRedirectActionRedirectResponseCodeEnum::TEMPORARYREDIRECT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HttpRedirectActionRedirectResponseCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ImageArchitectureEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The architecture of the image. Valid values are ARM64 or X86_64.
pub enum ImageArchitectureEnum {
    

    /// Default value indicating Architecture is not set.
    ///
    /// "ARCHITECTURE_UNSPECIFIED"
    #[serde(rename="ARCHITECTURE_UNSPECIFIED")]
    ARCHITECTUREUNSPECIFIED,
    

    /// Machines with architecture ARM64
    ///
    /// "ARM64"
    #[serde(rename="ARM64")]
    ARM64,
    

    /// Machines with architecture X86_64
    ///
    /// "X86_64"
    #[serde(rename="X86_64")]
    X8664,
}

impl AsRef<str> for ImageArchitectureEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ImageArchitectureEnum::ARCHITECTUREUNSPECIFIED => "ARCHITECTURE_UNSPECIFIED",
            ImageArchitectureEnum::ARM64 => "ARM64",
            ImageArchitectureEnum::X8664 => "X86_64",
        }
    }
}

impl std::convert::TryFrom< &str> for ImageArchitectureEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ARCHITECTURE_UNSPECIFIED" => Ok(ImageArchitectureEnum::ARCHITECTUREUNSPECIFIED),
           "ARM64" => Ok(ImageArchitectureEnum::ARM64),
           "X86_64" => Ok(ImageArchitectureEnum::X8664),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ImageArchitectureEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ImageSourceTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of the image used to create this disk. The default and only valid value is RAW.
pub enum ImageSourceTypeEnum {
    
    /// "RAW"
    #[serde(rename="RAW")]
    RAW,
}

impl AsRef<str> for ImageSourceTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ImageSourceTypeEnum::RAW => "RAW",
        }
    }
}

impl std::convert::TryFrom< &str> for ImageSourceTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "RAW" => Ok(ImageSourceTypeEnum::RAW),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ImageSourceTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}

impl Default for ImageSourceTypeEnum {
    fn default() -> ImageSourceTypeEnum {
        ImageSourceTypeEnum::RAW
    }
}

// endregion


// region ImageStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY.
pub enum ImageStatusEnum {
    

    /// Image is deleting.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// Image creation failed due to an error.
    ///
    /// "FAILED"
    #[serde(rename="FAILED")]
    FAILED,
    

    /// Image hasn't been created as yet.
    ///
    /// "PENDING"
    #[serde(rename="PENDING")]
    PENDING,
    

    /// Image has been successfully created.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
}

impl AsRef<str> for ImageStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ImageStatusEnum::DELETING => "DELETING",
            ImageStatusEnum::FAILED => "FAILED",
            ImageStatusEnum::PENDING => "PENDING",
            ImageStatusEnum::READY => "READY",
        }
    }
}

impl std::convert::TryFrom< &str> for ImageStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DELETING" => Ok(ImageStatusEnum::DELETING),
           "FAILED" => Ok(ImageStatusEnum::FAILED),
           "PENDING" => Ok(ImageStatusEnum::PENDING),
           "READY" => Ok(ImageStatusEnum::READY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ImageStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceKeyRevocationActionTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
pub enum InstanceKeyRevocationActionTypeEnum {
    

    /// Default value. This value is unused.
    ///
    /// "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED"
    #[serde(rename="KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED")]
    KEYREVOCATIONACTIONTYPEUNSPECIFIED,
    

    /// Indicates user chose no operation.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// Indicates user chose to opt for VM shutdown on key revocation.
    ///
    /// "STOP"
    #[serde(rename="STOP")]
    STOP,
}

impl AsRef<str> for InstanceKeyRevocationActionTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceKeyRevocationActionTypeEnum::KEYREVOCATIONACTIONTYPEUNSPECIFIED => "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED",
            InstanceKeyRevocationActionTypeEnum::NONE => "NONE",
            InstanceKeyRevocationActionTypeEnum::STOP => "STOP",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceKeyRevocationActionTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED" => Ok(InstanceKeyRevocationActionTypeEnum::KEYREVOCATIONACTIONTYPEUNSPECIFIED),
           "NONE" => Ok(InstanceKeyRevocationActionTypeEnum::NONE),
           "STOP" => Ok(InstanceKeyRevocationActionTypeEnum::STOP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceKeyRevocationActionTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstancePrivateIpv6GoogleAccessEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The private IPv6 google access type for the VM. If not specified, use INHERIT_FROM_SUBNETWORK as default.
pub enum InstancePrivateIpv6GoogleAccessEnum {
    

    /// Bidirectional private IPv6 access to/from Google services. If specified, the subnetwork who is attached to the instance's default network interface will be assigned an internal IPv6 prefix if it doesn't have before.
    ///
    /// "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE"
    #[serde(rename="ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE")]
    ENABLEBIDIRECTIONALACCESSTOGOOGLE,
    

    /// Outbound private IPv6 access from VMs in this subnet to Google services. If specified, the subnetwork who is attached to the instance's default network interface will be assigned an internal IPv6 prefix if it doesn't have before.
    ///
    /// "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE"
    #[serde(rename="ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE")]
    ENABLEOUTBOUNDVMACCESSTOGOOGLE,
    

    /// Each network interface inherits PrivateIpv6GoogleAccess from its subnetwork.
    ///
    /// "INHERIT_FROM_SUBNETWORK"
    #[serde(rename="INHERIT_FROM_SUBNETWORK")]
    INHERITFROMSUBNETWORK,
}

impl AsRef<str> for InstancePrivateIpv6GoogleAccessEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstancePrivateIpv6GoogleAccessEnum::ENABLEBIDIRECTIONALACCESSTOGOOGLE => "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE",
            InstancePrivateIpv6GoogleAccessEnum::ENABLEOUTBOUNDVMACCESSTOGOOGLE => "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE",
            InstancePrivateIpv6GoogleAccessEnum::INHERITFROMSUBNETWORK => "INHERIT_FROM_SUBNETWORK",
        }
    }
}

impl std::convert::TryFrom< &str> for InstancePrivateIpv6GoogleAccessEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE" => Ok(InstancePrivateIpv6GoogleAccessEnum::ENABLEBIDIRECTIONALACCESSTOGOOGLE),
           "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE" => Ok(InstancePrivateIpv6GoogleAccessEnum::ENABLEOUTBOUNDVMACCESSTOGOOGLE),
           "INHERIT_FROM_SUBNETWORK" => Ok(InstancePrivateIpv6GoogleAccessEnum::INHERITFROMSUBNETWORK),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstancePrivateIpv6GoogleAccessEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more information about the status of the instance, see Instance life cycle.
pub enum InstanceStatusEnum {
    

    /// The instance is halted and we are performing tear down tasks like network deprogramming, releasing quota, IP, tearing down disks etc.
    ///
    /// "DEPROVISIONING"
    #[serde(rename="DEPROVISIONING")]
    DEPROVISIONING,
    

    /// Resources are being allocated for the instance.
    ///
    /// "PROVISIONING"
    #[serde(rename="PROVISIONING")]
    PROVISIONING,
    

    /// The instance is in repair.
    ///
    /// "REPAIRING"
    #[serde(rename="REPAIRING")]
    REPAIRING,
    

    /// The instance is running.
    ///
    /// "RUNNING"
    #[serde(rename="RUNNING")]
    RUNNING,
    

    /// All required resources have been allocated and the instance is being started.
    ///
    /// "STAGING"
    #[serde(rename="STAGING")]
    STAGING,
    

    /// The instance has stopped successfully.
    ///
    /// "STOPPED"
    #[serde(rename="STOPPED")]
    STOPPED,
    

    /// The instance is currently stopping (either being deleted or killed).
    ///
    /// "STOPPING"
    #[serde(rename="STOPPING")]
    STOPPING,
    

    /// The instance has suspended.
    ///
    /// "SUSPENDED"
    #[serde(rename="SUSPENDED")]
    SUSPENDED,
    

    /// The instance is suspending.
    ///
    /// "SUSPENDING"
    #[serde(rename="SUSPENDING")]
    SUSPENDING,
    

    /// The instance has stopped (either by explicit action or underlying failure).
    ///
    /// "TERMINATED"
    #[serde(rename="TERMINATED")]
    TERMINATED,
}

impl AsRef<str> for InstanceStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceStatusEnum::DEPROVISIONING => "DEPROVISIONING",
            InstanceStatusEnum::PROVISIONING => "PROVISIONING",
            InstanceStatusEnum::REPAIRING => "REPAIRING",
            InstanceStatusEnum::RUNNING => "RUNNING",
            InstanceStatusEnum::STAGING => "STAGING",
            InstanceStatusEnum::STOPPED => "STOPPED",
            InstanceStatusEnum::STOPPING => "STOPPING",
            InstanceStatusEnum::SUSPENDED => "SUSPENDED",
            InstanceStatusEnum::SUSPENDING => "SUSPENDING",
            InstanceStatusEnum::TERMINATED => "TERMINATED",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DEPROVISIONING" => Ok(InstanceStatusEnum::DEPROVISIONING),
           "PROVISIONING" => Ok(InstanceStatusEnum::PROVISIONING),
           "REPAIRING" => Ok(InstanceStatusEnum::REPAIRING),
           "RUNNING" => Ok(InstanceStatusEnum::RUNNING),
           "STAGING" => Ok(InstanceStatusEnum::STAGING),
           "STOPPED" => Ok(InstanceStatusEnum::STOPPED),
           "STOPPING" => Ok(InstanceStatusEnum::STOPPING),
           "SUSPENDED" => Ok(InstanceStatusEnum::SUSPENDED),
           "SUSPENDING" => Ok(InstanceStatusEnum::SUSPENDING),
           "TERMINATED" => Ok(InstanceStatusEnum::TERMINATED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerListManagedInstancesResultsEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Pagination behavior of the listManagedInstances API method for this managed instance group.
pub enum InstanceGroupManagerListManagedInstancesResultsEnum {
    

    /// (Default) Pagination is disabled for the group's listManagedInstances API method. maxResults and pageToken query parameters are ignored and all instances are returned in a single response.
    ///
    /// "PAGELESS"
    #[serde(rename="PAGELESS")]
    PAGELESS,
    

    /// Pagination is enabled for the group's listManagedInstances API method. maxResults and pageToken query parameters are respected.
    ///
    /// "PAGINATED"
    #[serde(rename="PAGINATED")]
    PAGINATED,
}

impl AsRef<str> for InstanceGroupManagerListManagedInstancesResultsEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerListManagedInstancesResultsEnum::PAGELESS => "PAGELESS",
            InstanceGroupManagerListManagedInstancesResultsEnum::PAGINATED => "PAGINATED",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerListManagedInstancesResultsEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "PAGELESS" => Ok(InstanceGroupManagerListManagedInstancesResultsEnum::PAGELESS),
           "PAGINATED" => Ok(InstanceGroupManagerListManagedInstancesResultsEnum::PAGINATED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerListManagedInstancesResultsEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerInstanceLifecyclePolicyDefaultActionOnFailureEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The action that a MIG performs on a failed or an unhealthy VM. A VM is marked as unhealthy when the application running on that VM fails a health check. Valid values are - REPAIR (default): MIG automatically repairs a failed or an unhealthy VM by recreating it. For more information, see About repairing VMs in a MIG. - DO_NOTHING: MIG does not repair a failed or an unhealthy VM. 
pub enum InstanceGroupManagerInstanceLifecyclePolicyDefaultActionOnFailureEnum {
    

    /// MIG does not repair a failed or an unhealthy VM.
    ///
    /// "DO_NOTHING"
    #[serde(rename="DO_NOTHING")]
    DONOTHING,
    

    /// (Default) MIG automatically repairs a failed or an unhealthy VM by recreating it. For more information, see About repairing VMs in a MIG.
    ///
    /// "REPAIR"
    #[serde(rename="REPAIR")]
    REPAIR,
}

impl AsRef<str> for InstanceGroupManagerInstanceLifecyclePolicyDefaultActionOnFailureEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerInstanceLifecyclePolicyDefaultActionOnFailureEnum::DONOTHING => "DO_NOTHING",
            InstanceGroupManagerInstanceLifecyclePolicyDefaultActionOnFailureEnum::REPAIR => "REPAIR",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerInstanceLifecyclePolicyDefaultActionOnFailureEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DO_NOTHING" => Ok(InstanceGroupManagerInstanceLifecyclePolicyDefaultActionOnFailureEnum::DONOTHING),
           "REPAIR" => Ok(InstanceGroupManagerInstanceLifecyclePolicyDefaultActionOnFailureEnum::REPAIR),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerInstanceLifecyclePolicyDefaultActionOnFailureEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepairEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// A bit indicating whether to forcefully apply the group's latest configuration when repairing a VM. Valid options are: - NO (default): If configuration updates are available, they are not forcefully applied during repair. Instead, configuration updates are applied according to the group's update policy. - YES: If configuration updates are available, they are applied during repair. 
pub enum InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepairEnum {
    
    /// "NO"
    #[serde(rename="NO")]
    NO,
    
    /// "YES"
    #[serde(rename="YES")]
    YES,
}

impl AsRef<str> for InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepairEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepairEnum::NO => "NO",
            InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepairEnum::YES => "YES",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepairEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NO" => Ok(InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepairEnum::NO),
           "YES" => Ok(InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepairEnum::YES),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepairEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerResizeRequestStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output only] Current state of the request.
pub enum InstanceGroupManagerResizeRequestStateEnum {
    

    /// The request was created successfully and was accepted for provisioning when the capacity becomes available.
    ///
    /// "ACCEPTED"
    #[serde(rename="ACCEPTED")]
    ACCEPTED,
    

    /// The request is cancelled.
    ///
    /// "CANCELLED"
    #[serde(rename="CANCELLED")]
    CANCELLED,
    

    /// Resize request is being created and may still fail creation.
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// The request failed before or during provisioning. If the request fails during provisioning, any VMs that were created during provisioning are rolled back and removed from the MIG.
    ///
    /// "FAILED"
    #[serde(rename="FAILED")]
    FAILED,
    

    /// Default value. This value should never be returned.
    ///
    /// "STATE_UNSPECIFIED"
    #[serde(rename="STATE_UNSPECIFIED")]
    STATEUNSPECIFIED,
    

    /// The request succeeded.
    ///
    /// "SUCCEEDED"
    #[serde(rename="SUCCEEDED")]
    SUCCEEDED,
}

impl AsRef<str> for InstanceGroupManagerResizeRequestStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerResizeRequestStateEnum::ACCEPTED => "ACCEPTED",
            InstanceGroupManagerResizeRequestStateEnum::CANCELLED => "CANCELLED",
            InstanceGroupManagerResizeRequestStateEnum::CREATING => "CREATING",
            InstanceGroupManagerResizeRequestStateEnum::FAILED => "FAILED",
            InstanceGroupManagerResizeRequestStateEnum::STATEUNSPECIFIED => "STATE_UNSPECIFIED",
            InstanceGroupManagerResizeRequestStateEnum::SUCCEEDED => "SUCCEEDED",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerResizeRequestStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACCEPTED" => Ok(InstanceGroupManagerResizeRequestStateEnum::ACCEPTED),
           "CANCELLED" => Ok(InstanceGroupManagerResizeRequestStateEnum::CANCELLED),
           "CREATING" => Ok(InstanceGroupManagerResizeRequestStateEnum::CREATING),
           "FAILED" => Ok(InstanceGroupManagerResizeRequestStateEnum::FAILED),
           "STATE_UNSPECIFIED" => Ok(InstanceGroupManagerResizeRequestStateEnum::STATEUNSPECIFIED),
           "SUCCEEDED" => Ok(InstanceGroupManagerResizeRequestStateEnum::SUCCEEDED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerResizeRequestStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled. 
pub enum InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum {
    

    /// No action is being proactively performed in order to bring this IGM to its target instance distribution.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// This IGM will actively converge to its target instance distribution.
    ///
    /// "PROACTIVE"
    #[serde(rename="PROACTIVE")]
    PROACTIVE,
}

impl AsRef<str> for InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum::NONE => "NONE",
            InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum::PROACTIVE => "PROACTIVE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum::NONE),
           "PROACTIVE" => Ok(InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum::PROACTIVE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerUpdatePolicyMinimalActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Minimal action to be taken on an instance. Use this option to minimize disruption as much as possible or to apply a more disruptive action than is necessary. - To limit disruption as much as possible, set the minimal action to REFRESH. If your update requires a more disruptive action, Compute Engine performs the necessary action to execute the update. - To apply a more disruptive action than is strictly necessary, set the minimal action to RESTART or REPLACE. For example, Compute Engine does not need to restart a VM to change its metadata. But if your application reads instance metadata only when a VM is restarted, you can set the minimal action to RESTART in order to pick up metadata changes. 
pub enum InstanceGroupManagerUpdatePolicyMinimalActionEnum {
    

    /// Do not perform any action.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// Do not stop the instance.
    ///
    /// "REFRESH"
    #[serde(rename="REFRESH")]
    REFRESH,
    

    /// (Default.) Replace the instance according to the replacement method option.
    ///
    /// "REPLACE"
    #[serde(rename="REPLACE")]
    REPLACE,
    

    /// Stop the instance and start it again.
    ///
    /// "RESTART"
    #[serde(rename="RESTART")]
    RESTART,
}

impl AsRef<str> for InstanceGroupManagerUpdatePolicyMinimalActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerUpdatePolicyMinimalActionEnum::NONE => "NONE",
            InstanceGroupManagerUpdatePolicyMinimalActionEnum::REFRESH => "REFRESH",
            InstanceGroupManagerUpdatePolicyMinimalActionEnum::REPLACE => "REPLACE",
            InstanceGroupManagerUpdatePolicyMinimalActionEnum::RESTART => "RESTART",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerUpdatePolicyMinimalActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(InstanceGroupManagerUpdatePolicyMinimalActionEnum::NONE),
           "REFRESH" => Ok(InstanceGroupManagerUpdatePolicyMinimalActionEnum::REFRESH),
           "REPLACE" => Ok(InstanceGroupManagerUpdatePolicyMinimalActionEnum::REPLACE),
           "RESTART" => Ok(InstanceGroupManagerUpdatePolicyMinimalActionEnum::RESTART),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerUpdatePolicyMinimalActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to avoid restarting the VM and to limit disruption as much as possible. RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.
pub enum InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum {
    

    /// Do not perform any action.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// Do not stop the instance.
    ///
    /// "REFRESH"
    #[serde(rename="REFRESH")]
    REFRESH,
    

    /// (Default.) Replace the instance according to the replacement method option.
    ///
    /// "REPLACE"
    #[serde(rename="REPLACE")]
    REPLACE,
    

    /// Stop the instance and start it again.
    ///
    /// "RESTART"
    #[serde(rename="RESTART")]
    RESTART,
}

impl AsRef<str> for InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum::NONE => "NONE",
            InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum::REFRESH => "REFRESH",
            InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum::REPLACE => "REPLACE",
            InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum::RESTART => "RESTART",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum::NONE),
           "REFRESH" => Ok(InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum::REFRESH),
           "REPLACE" => Ok(InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum::REPLACE),
           "RESTART" => Ok(InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum::RESTART),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerUpdatePolicyReplacementMethodEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// What action should be used to replace instances. See minimal_action.REPLACE
pub enum InstanceGroupManagerUpdatePolicyReplacementMethodEnum {
    

    /// Instances will be recreated (with the same name)
    ///
    /// "RECREATE"
    #[serde(rename="RECREATE")]
    RECREATE,
    

    /// Default option: instances will be deleted and created (with a new name)
    ///
    /// "SUBSTITUTE"
    #[serde(rename="SUBSTITUTE")]
    SUBSTITUTE,
}

impl AsRef<str> for InstanceGroupManagerUpdatePolicyReplacementMethodEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerUpdatePolicyReplacementMethodEnum::RECREATE => "RECREATE",
            InstanceGroupManagerUpdatePolicyReplacementMethodEnum::SUBSTITUTE => "SUBSTITUTE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerUpdatePolicyReplacementMethodEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "RECREATE" => Ok(InstanceGroupManagerUpdatePolicyReplacementMethodEnum::RECREATE),
           "SUBSTITUTE" => Ok(InstanceGroupManagerUpdatePolicyReplacementMethodEnum::SUBSTITUTE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerUpdatePolicyReplacementMethodEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerUpdatePolicyTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of update process. You can specify either PROACTIVE so that the MIG automatically updates VMs to the latest configurations or OPPORTUNISTIC so that you can select the VMs that you want to update.
pub enum InstanceGroupManagerUpdatePolicyTypeEnum {
    

    /// MIG will apply new configurations to existing VMs only when you selectively target specific or all VMs to be updated.
    ///
    /// "OPPORTUNISTIC"
    #[serde(rename="OPPORTUNISTIC")]
    OPPORTUNISTIC,
    

    /// MIG will automatically apply new configurations to all or a subset of existing VMs and also to new VMs that are added to the group.
    ///
    /// "PROACTIVE"
    #[serde(rename="PROACTIVE")]
    PROACTIVE,
}

impl AsRef<str> for InstanceGroupManagerUpdatePolicyTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerUpdatePolicyTypeEnum::OPPORTUNISTIC => "OPPORTUNISTIC",
            InstanceGroupManagerUpdatePolicyTypeEnum::PROACTIVE => "PROACTIVE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerUpdatePolicyTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "OPPORTUNISTIC" => Ok(InstanceGroupManagerUpdatePolicyTypeEnum::OPPORTUNISTIC),
           "PROACTIVE" => Ok(InstanceGroupManagerUpdatePolicyTypeEnum::PROACTIVE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerUpdatePolicyTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update.
pub enum InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum {
    

    /// Do not perform any action.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// Do not stop the instance.
    ///
    /// "REFRESH"
    #[serde(rename="REFRESH")]
    REFRESH,
    

    /// (Default.) Replace the instance according to the replacement method option.
    ///
    /// "REPLACE"
    #[serde(rename="REPLACE")]
    REPLACE,
    

    /// Stop the instance and start it again.
    ///
    /// "RESTART"
    #[serde(rename="RESTART")]
    RESTART,
}

impl AsRef<str> for InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::NONE => "NONE",
            InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::REFRESH => "REFRESH",
            InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::REPLACE => "REPLACE",
            InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::RESTART => "RESTART",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::NONE),
           "REFRESH" => Ok(InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::REFRESH),
           "REPLACE" => Ok(InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::REPLACE),
           "RESTART" => Ok(InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::RESTART),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail.
pub enum InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum {
    

    /// Do not perform any action.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// Do not stop the instance.
    ///
    /// "REFRESH"
    #[serde(rename="REFRESH")]
    REFRESH,
    

    /// (Default.) Replace the instance according to the replacement method option.
    ///
    /// "REPLACE"
    #[serde(rename="REPLACE")]
    REPLACE,
    

    /// Stop the instance and start it again.
    ///
    /// "RESTART"
    #[serde(rename="RESTART")]
    RESTART,
}

impl AsRef<str> for InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::NONE => "NONE",
            InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::REFRESH => "REFRESH",
            InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::REPLACE => "REPLACE",
            InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::RESTART => "RESTART",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::NONE),
           "REFRESH" => Ok(InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::REFRESH),
           "REPLACE" => Ok(InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::REPLACE),
           "RESTART" => Ok(InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::RESTART),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupsListInstancesRequestInstanceStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of their state.
pub enum InstanceGroupsListInstancesRequestInstanceStateEnum {
    

    /// Includes all instances in the generated list regardless of their state.
    ///
    /// "ALL"
    #[serde(rename="ALL")]
    ALL,
    

    /// Includes instances in the generated list only if they have a RUNNING state.
    ///
    /// "RUNNING"
    #[serde(rename="RUNNING")]
    RUNNING,
}

impl AsRef<str> for InstanceGroupsListInstancesRequestInstanceStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupsListInstancesRequestInstanceStateEnum::ALL => "ALL",
            InstanceGroupsListInstancesRequestInstanceStateEnum::RUNNING => "RUNNING",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupsListInstancesRequestInstanceStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALL" => Ok(InstanceGroupsListInstancesRequestInstanceStateEnum::ALL),
           "RUNNING" => Ok(InstanceGroupsListInstancesRequestInstanceStateEnum::RUNNING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupsListInstancesRequestInstanceStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceManagedByIgmErrorInstanceActionDetailActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Action that managed instance group was executing on the instance when the error occurred. Possible values:
pub enum InstanceManagedByIgmErrorInstanceActionDetailActionEnum {
    

    /// The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group.
    ///
    /// "ABANDONING"
    #[serde(rename="ABANDONING")]
    ABANDONING,
    

    /// The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful.
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group's targetSize value is decreased.
    ///
    /// "CREATING_WITHOUT_RETRIES"
    #[serde(rename="CREATING_WITHOUT_RETRIES")]
    CREATINGWITHOUTRETRIES,
    

    /// The managed instance group is permanently deleting this instance.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// The managed instance group has not scheduled any actions for this instance.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// The managed instance group is recreating this instance.
    ///
    /// "RECREATING"
    #[serde(rename="RECREATING")]
    RECREATING,
    

    /// The managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance.
    ///
    /// "REFRESHING"
    #[serde(rename="REFRESHING")]
    REFRESHING,
    

    /// The managed instance group is restarting this instance.
    ///
    /// "RESTARTING"
    #[serde(rename="RESTARTING")]
    RESTARTING,
    

    /// The managed instance group is resuming this instance.
    ///
    /// "RESUMING"
    #[serde(rename="RESUMING")]
    RESUMING,
    

    /// The managed instance group is starting this instance.
    ///
    /// "STARTING"
    #[serde(rename="STARTING")]
    STARTING,
    

    /// The managed instance group is stopping this instance.
    ///
    /// "STOPPING"
    #[serde(rename="STOPPING")]
    STOPPING,
    

    /// The managed instance group is suspending this instance.
    ///
    /// "SUSPENDING"
    #[serde(rename="SUSPENDING")]
    SUSPENDING,
    

    /// The managed instance group is verifying this already created instance. Verification happens every time the instance is (re)created or restarted and consists of: 1. Waiting until health check specified as part of this managed instance group's autohealing policy reports HEALTHY. Note: Applies only if autohealing policy has a health check specified 2. Waiting for addition verification steps performed as post-instance creation (subject to future extensions).
    ///
    /// "VERIFYING"
    #[serde(rename="VERIFYING")]
    VERIFYING,
}

impl AsRef<str> for InstanceManagedByIgmErrorInstanceActionDetailActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::ABANDONING => "ABANDONING",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::CREATING => "CREATING",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::CREATINGWITHOUTRETRIES => "CREATING_WITHOUT_RETRIES",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::DELETING => "DELETING",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::NONE => "NONE",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::RECREATING => "RECREATING",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::REFRESHING => "REFRESHING",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::RESTARTING => "RESTARTING",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::RESUMING => "RESUMING",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::STARTING => "STARTING",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::STOPPING => "STOPPING",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::SUSPENDING => "SUSPENDING",
            InstanceManagedByIgmErrorInstanceActionDetailActionEnum::VERIFYING => "VERIFYING",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceManagedByIgmErrorInstanceActionDetailActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ABANDONING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::ABANDONING),
           "CREATING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::CREATING),
           "CREATING_WITHOUT_RETRIES" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::CREATINGWITHOUTRETRIES),
           "DELETING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::DELETING),
           "NONE" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::NONE),
           "RECREATING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::RECREATING),
           "REFRESHING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::REFRESHING),
           "RESTARTING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::RESTARTING),
           "RESUMING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::RESUMING),
           "STARTING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::STARTING),
           "STOPPING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::STOPPING),
           "SUSPENDING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::SUSPENDING),
           "VERIFYING" => Ok(InstanceManagedByIgmErrorInstanceActionDetailActionEnum::VERIFYING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceManagedByIgmErrorInstanceActionDetailActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstancePropertyKeyRevocationActionTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
pub enum InstancePropertyKeyRevocationActionTypeEnum {
    

    /// Default value. This value is unused.
    ///
    /// "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED"
    #[serde(rename="KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED")]
    KEYREVOCATIONACTIONTYPEUNSPECIFIED,
    

    /// Indicates user chose no operation.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// Indicates user chose to opt for VM shutdown on key revocation.
    ///
    /// "STOP"
    #[serde(rename="STOP")]
    STOP,
}

impl AsRef<str> for InstancePropertyKeyRevocationActionTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstancePropertyKeyRevocationActionTypeEnum::KEYREVOCATIONACTIONTYPEUNSPECIFIED => "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED",
            InstancePropertyKeyRevocationActionTypeEnum::NONE => "NONE",
            InstancePropertyKeyRevocationActionTypeEnum::STOP => "STOP",
        }
    }
}

impl std::convert::TryFrom< &str> for InstancePropertyKeyRevocationActionTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED" => Ok(InstancePropertyKeyRevocationActionTypeEnum::KEYREVOCATIONACTIONTYPEUNSPECIFIED),
           "NONE" => Ok(InstancePropertyKeyRevocationActionTypeEnum::NONE),
           "STOP" => Ok(InstancePropertyKeyRevocationActionTypeEnum::STOP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstancePropertyKeyRevocationActionTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstancePropertyPrivateIpv6GoogleAccessEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default. Note that for MachineImage, this is not supported yet.
pub enum InstancePropertyPrivateIpv6GoogleAccessEnum {
    

    /// Bidirectional private IPv6 access to/from Google services. If specified, the subnetwork who is attached to the instance's default network interface will be assigned an internal IPv6 prefix if it doesn't have before.
    ///
    /// "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE"
    #[serde(rename="ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE")]
    ENABLEBIDIRECTIONALACCESSTOGOOGLE,
    

    /// Outbound private IPv6 access from VMs in this subnet to Google services. If specified, the subnetwork who is attached to the instance's default network interface will be assigned an internal IPv6 prefix if it doesn't have before.
    ///
    /// "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE"
    #[serde(rename="ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE")]
    ENABLEOUTBOUNDVMACCESSTOGOOGLE,
    

    /// Each network interface inherits PrivateIpv6GoogleAccess from its subnetwork.
    ///
    /// "INHERIT_FROM_SUBNETWORK"
    #[serde(rename="INHERIT_FROM_SUBNETWORK")]
    INHERITFROMSUBNETWORK,
}

impl AsRef<str> for InstancePropertyPrivateIpv6GoogleAccessEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstancePropertyPrivateIpv6GoogleAccessEnum::ENABLEBIDIRECTIONALACCESSTOGOOGLE => "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE",
            InstancePropertyPrivateIpv6GoogleAccessEnum::ENABLEOUTBOUNDVMACCESSTOGOOGLE => "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE",
            InstancePropertyPrivateIpv6GoogleAccessEnum::INHERITFROMSUBNETWORK => "INHERIT_FROM_SUBNETWORK",
        }
    }
}

impl std::convert::TryFrom< &str> for InstancePropertyPrivateIpv6GoogleAccessEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE" => Ok(InstancePropertyPrivateIpv6GoogleAccessEnum::ENABLEBIDIRECTIONALACCESSTOGOOGLE),
           "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE" => Ok(InstancePropertyPrivateIpv6GoogleAccessEnum::ENABLEOUTBOUNDVMACCESSTOGOOGLE),
           "INHERIT_FROM_SUBNETWORK" => Ok(InstancePropertyPrivateIpv6GoogleAccessEnum::INHERITFROMSUBNETWORK),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstancePropertyPrivateIpv6GoogleAccessEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceWithNamedPortStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the instance.
pub enum InstanceWithNamedPortStatusEnum {
    

    /// The instance is halted and we are performing tear down tasks like network deprogramming, releasing quota, IP, tearing down disks etc.
    ///
    /// "DEPROVISIONING"
    #[serde(rename="DEPROVISIONING")]
    DEPROVISIONING,
    

    /// Resources are being allocated for the instance.
    ///
    /// "PROVISIONING"
    #[serde(rename="PROVISIONING")]
    PROVISIONING,
    

    /// The instance is in repair.
    ///
    /// "REPAIRING"
    #[serde(rename="REPAIRING")]
    REPAIRING,
    

    /// The instance is running.
    ///
    /// "RUNNING"
    #[serde(rename="RUNNING")]
    RUNNING,
    

    /// All required resources have been allocated and the instance is being started.
    ///
    /// "STAGING"
    #[serde(rename="STAGING")]
    STAGING,
    

    /// The instance has stopped successfully.
    ///
    /// "STOPPED"
    #[serde(rename="STOPPED")]
    STOPPED,
    

    /// The instance is currently stopping (either being deleted or killed).
    ///
    /// "STOPPING"
    #[serde(rename="STOPPING")]
    STOPPING,
    

    /// The instance has suspended.
    ///
    /// "SUSPENDED"
    #[serde(rename="SUSPENDED")]
    SUSPENDED,
    

    /// The instance is suspending.
    ///
    /// "SUSPENDING"
    #[serde(rename="SUSPENDING")]
    SUSPENDING,
    

    /// The instance has stopped (either by explicit action or underlying failure).
    ///
    /// "TERMINATED"
    #[serde(rename="TERMINATED")]
    TERMINATED,
}

impl AsRef<str> for InstanceWithNamedPortStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceWithNamedPortStatusEnum::DEPROVISIONING => "DEPROVISIONING",
            InstanceWithNamedPortStatusEnum::PROVISIONING => "PROVISIONING",
            InstanceWithNamedPortStatusEnum::REPAIRING => "REPAIRING",
            InstanceWithNamedPortStatusEnum::RUNNING => "RUNNING",
            InstanceWithNamedPortStatusEnum::STAGING => "STAGING",
            InstanceWithNamedPortStatusEnum::STOPPED => "STOPPED",
            InstanceWithNamedPortStatusEnum::STOPPING => "STOPPING",
            InstanceWithNamedPortStatusEnum::SUSPENDED => "SUSPENDED",
            InstanceWithNamedPortStatusEnum::SUSPENDING => "SUSPENDING",
            InstanceWithNamedPortStatusEnum::TERMINATED => "TERMINATED",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceWithNamedPortStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DEPROVISIONING" => Ok(InstanceWithNamedPortStatusEnum::DEPROVISIONING),
           "PROVISIONING" => Ok(InstanceWithNamedPortStatusEnum::PROVISIONING),
           "REPAIRING" => Ok(InstanceWithNamedPortStatusEnum::REPAIRING),
           "RUNNING" => Ok(InstanceWithNamedPortStatusEnum::RUNNING),
           "STAGING" => Ok(InstanceWithNamedPortStatusEnum::STAGING),
           "STOPPED" => Ok(InstanceWithNamedPortStatusEnum::STOPPED),
           "STOPPING" => Ok(InstanceWithNamedPortStatusEnum::STOPPING),
           "SUSPENDED" => Ok(InstanceWithNamedPortStatusEnum::SUSPENDED),
           "SUSPENDING" => Ok(InstanceWithNamedPortStatusEnum::SUSPENDING),
           "TERMINATED" => Ok(InstanceWithNamedPortStatusEnum::TERMINATED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceWithNamedPortStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL, SYSTEM_GLOBAL, SYSTEM_REGIONAL.
pub enum InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    
    /// "HIERARCHY"
    #[serde(rename="HIERARCHY")]
    HIERARCHY,
    
    /// "NETWORK"
    #[serde(rename="NETWORK")]
    NETWORK,
    
    /// "NETWORK_REGIONAL"
    #[serde(rename="NETWORK_REGIONAL")]
    NETWORKREGIONAL,
    
    /// "UNSPECIFIED"
    #[serde(rename="UNSPECIFIED")]
    UNSPECIFIED,
}

impl AsRef<str> for InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::HIERARCHY => "HIERARCHY",
            InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::NETWORK => "NETWORK",
            InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::NETWORKREGIONAL => "NETWORK_REGIONAL",
            InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::UNSPECIFIED => "UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "HIERARCHY" => Ok(InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::HIERARCHY),
           "NETWORK" => Ok(InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::NETWORK),
           "NETWORK_REGIONAL" => Ok(InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::NETWORKREGIONAL),
           "UNSPECIFIED" => Ok(InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::UNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstantSnapshotArchitectureEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The architecture of the instant snapshot. Valid values are ARM64 or X86_64.
pub enum InstantSnapshotArchitectureEnum {
    

    /// Default value indicating Architecture is not set.
    ///
    /// "ARCHITECTURE_UNSPECIFIED"
    #[serde(rename="ARCHITECTURE_UNSPECIFIED")]
    ARCHITECTUREUNSPECIFIED,
    

    /// Machines with architecture ARM64
    ///
    /// "ARM64"
    #[serde(rename="ARM64")]
    ARM64,
    

    /// Machines with architecture X86_64
    ///
    /// "X86_64"
    #[serde(rename="X86_64")]
    X8664,
}

impl AsRef<str> for InstantSnapshotArchitectureEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstantSnapshotArchitectureEnum::ARCHITECTUREUNSPECIFIED => "ARCHITECTURE_UNSPECIFIED",
            InstantSnapshotArchitectureEnum::ARM64 => "ARM64",
            InstantSnapshotArchitectureEnum::X8664 => "X86_64",
        }
    }
}

impl std::convert::TryFrom< &str> for InstantSnapshotArchitectureEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ARCHITECTURE_UNSPECIFIED" => Ok(InstantSnapshotArchitectureEnum::ARCHITECTUREUNSPECIFIED),
           "ARM64" => Ok(InstantSnapshotArchitectureEnum::ARM64),
           "X86_64" => Ok(InstantSnapshotArchitectureEnum::X8664),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstantSnapshotArchitectureEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstantSnapshotStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the instantSnapshot. This can be CREATING, DELETING, FAILED, or READY.
pub enum InstantSnapshotStatusEnum {
    

    /// InstantSnapshot creation is in progress.
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// InstantSnapshot is currently being deleted.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// InstantSnapshot creation failed.
    ///
    /// "FAILED"
    #[serde(rename="FAILED")]
    FAILED,
    

    /// InstantSnapshot has been created successfully.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
    

    /// InstantSnapshot is currently unavailable and cannot be used for Disk restoration
    ///
    /// "UNAVAILABLE"
    #[serde(rename="UNAVAILABLE")]
    UNAVAILABLE,
}

impl AsRef<str> for InstantSnapshotStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstantSnapshotStatusEnum::CREATING => "CREATING",
            InstantSnapshotStatusEnum::DELETING => "DELETING",
            InstantSnapshotStatusEnum::FAILED => "FAILED",
            InstantSnapshotStatusEnum::READY => "READY",
            InstantSnapshotStatusEnum::UNAVAILABLE => "UNAVAILABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstantSnapshotStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(InstantSnapshotStatusEnum::CREATING),
           "DELETING" => Ok(InstantSnapshotStatusEnum::DELETING),
           "FAILED" => Ok(InstantSnapshotStatusEnum::FAILED),
           "READY" => Ok(InstantSnapshotStatusEnum::READY),
           "UNAVAILABLE" => Ok(InstantSnapshotStatusEnum::UNAVAILABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstantSnapshotStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAvailableFeaturesEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output only] List of features available for this Interconnect connection, which can take one of the following values: - MACSEC If present then the Interconnect connection is provisioned on MACsec capable hardware ports. If not present then the Interconnect connection is provisioned on non-MACsec capable ports and MACsec isn't supported and enabling MACsec fails.
pub enum InterconnectAvailableFeaturesEnum {
    

    /// Media Access Control security (MACsec)
    ///
    /// "IF_MACSEC"
    #[serde(rename="IF_MACSEC")]
    IFMACSEC,
}

impl AsRef<str> for InterconnectAvailableFeaturesEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAvailableFeaturesEnum::IFMACSEC => "IF_MACSEC",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAvailableFeaturesEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IF_MACSEC" => Ok(InterconnectAvailableFeaturesEnum::IFMACSEC),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAvailableFeaturesEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectInterconnectTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
pub enum InterconnectInterconnectTypeEnum {
    

    /// A dedicated physical interconnection with the customer.
    ///
    /// "DEDICATED"
    #[serde(rename="DEDICATED")]
    DEDICATED,
    

    /// [Deprecated] A private, physical interconnection with the customer.
    ///
    /// "IT_PRIVATE"
    #[serde(rename="IT_PRIVATE")]
    ITPRIVATE,
    

    /// A partner-managed interconnection shared between customers via partner.
    ///
    /// "PARTNER"
    #[serde(rename="PARTNER")]
    PARTNER,
}

impl AsRef<str> for InterconnectInterconnectTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectInterconnectTypeEnum::DEDICATED => "DEDICATED",
            InterconnectInterconnectTypeEnum::ITPRIVATE => "IT_PRIVATE",
            InterconnectInterconnectTypeEnum::PARTNER => "PARTNER",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectInterconnectTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DEDICATED" => Ok(InterconnectInterconnectTypeEnum::DEDICATED),
           "IT_PRIVATE" => Ok(InterconnectInterconnectTypeEnum::ITPRIVATE),
           "PARTNER" => Ok(InterconnectInterconnectTypeEnum::PARTNER),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectInterconnectTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectLinkTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
pub enum InterconnectLinkTypeEnum {
    

    /// 100G Ethernet, LR Optics.
    ///
    /// "LINK_TYPE_ETHERNET_100G_LR"
    #[serde(rename="LINK_TYPE_ETHERNET_100G_LR")]
    LINKTYPEETHERNET100GLR,
    

    /// 10G Ethernet, LR Optics. [(rate_bps) = 10000000000];
    ///
    /// "LINK_TYPE_ETHERNET_10G_LR"
    #[serde(rename="LINK_TYPE_ETHERNET_10G_LR")]
    LINKTYPEETHERNET10GLR,
}

impl AsRef<str> for InterconnectLinkTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectLinkTypeEnum::LINKTYPEETHERNET100GLR => "LINK_TYPE_ETHERNET_100G_LR",
            InterconnectLinkTypeEnum::LINKTYPEETHERNET10GLR => "LINK_TYPE_ETHERNET_10G_LR",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectLinkTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "LINK_TYPE_ETHERNET_100G_LR" => Ok(InterconnectLinkTypeEnum::LINKTYPEETHERNET100GLR),
           "LINK_TYPE_ETHERNET_10G_LR" => Ok(InterconnectLinkTypeEnum::LINKTYPEETHERNET10GLR),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectLinkTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectOperationalStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The current status of this Interconnect's functionality, which can take one of the following values: - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect. 
pub enum InterconnectOperationalStatusEnum {
    

    /// The interconnect is valid, turned up, and ready to use. Attachments may be provisioned on this interconnect.
    ///
    /// "OS_ACTIVE"
    #[serde(rename="OS_ACTIVE")]
    OSACTIVE,
    

    /// The interconnect has not completed turnup. No attachments may be provisioned on this interconnect.
    ///
    /// "OS_UNPROVISIONED"
    #[serde(rename="OS_UNPROVISIONED")]
    OSUNPROVISIONED,
}

impl AsRef<str> for InterconnectOperationalStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectOperationalStatusEnum::OSACTIVE => "OS_ACTIVE",
            InterconnectOperationalStatusEnum::OSUNPROVISIONED => "OS_UNPROVISIONED",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectOperationalStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "OS_ACTIVE" => Ok(InterconnectOperationalStatusEnum::OSACTIVE),
           "OS_UNPROVISIONED" => Ok(InterconnectOperationalStatusEnum::OSUNPROVISIONED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectOperationalStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectRequestedFeaturesEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Optional. List of features requested for this Interconnect connection, which can take one of the following values: - MACSEC If specified then the connection is created on MACsec capable hardware ports. If not specified, the default value is false, which allocates non-MACsec capable ports first if available. This parameter can be provided only with Interconnect INSERT. It isn't valid for Interconnect PATCH.
pub enum InterconnectRequestedFeaturesEnum {
    

    /// Media Access Control security (MACsec)
    ///
    /// "IF_MACSEC"
    #[serde(rename="IF_MACSEC")]
    IFMACSEC,
}

impl AsRef<str> for InterconnectRequestedFeaturesEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectRequestedFeaturesEnum::IFMACSEC => "IF_MACSEC",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectRequestedFeaturesEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IF_MACSEC" => Ok(InterconnectRequestedFeaturesEnum::IFMACSEC),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectRequestedFeaturesEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect. 
pub enum InterconnectStateEnum {
    

    /// The interconnect is valid, turned up, and ready to use. Attachments may be provisioned on this interconnect.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// The interconnect has not completed turnup. No attachments may be provisioned on this interconnect.
    ///
    /// "UNPROVISIONED"
    #[serde(rename="UNPROVISIONED")]
    UNPROVISIONED,
}

impl AsRef<str> for InterconnectStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectStateEnum::ACTIVE => "ACTIVE",
            InterconnectStateEnum::UNPROVISIONED => "UNPROVISIONED",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(InterconnectStateEnum::ACTIVE),
           "UNPROVISIONED" => Ok(InterconnectStateEnum::UNPROVISIONED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentBandwidthEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit/s - BPS_200M: 200 Mbit/s - BPS_300M: 300 Mbit/s - BPS_400M: 400 Mbit/s - BPS_500M: 500 Mbit/s - BPS_1G: 1 Gbit/s - BPS_2G: 2 Gbit/s - BPS_5G: 5 Gbit/s - BPS_10G: 10 Gbit/s - BPS_20G: 20 Gbit/s - BPS_50G: 50 Gbit/s 
pub enum InterconnectAttachmentBandwidthEnum {
    

    /// 100 Mbit/s
    ///
    /// "BPS_100M"
    #[serde(rename="BPS_100M")]
    BPS100M,
    

    /// 10 Gbit/s
    ///
    /// "BPS_10G"
    #[serde(rename="BPS_10G")]
    BPS10G,
    

    /// 1 Gbit/s
    ///
    /// "BPS_1G"
    #[serde(rename="BPS_1G")]
    BPS1G,
    

    /// 200 Mbit/s
    ///
    /// "BPS_200M"
    #[serde(rename="BPS_200M")]
    BPS200M,
    

    /// 20 Gbit/s
    ///
    /// "BPS_20G"
    #[serde(rename="BPS_20G")]
    BPS20G,
    

    /// 2 Gbit/s
    ///
    /// "BPS_2G"
    #[serde(rename="BPS_2G")]
    BPS2G,
    

    /// 300 Mbit/s
    ///
    /// "BPS_300M"
    #[serde(rename="BPS_300M")]
    BPS300M,
    

    /// 400 Mbit/s
    ///
    /// "BPS_400M"
    #[serde(rename="BPS_400M")]
    BPS400M,
    

    /// 500 Mbit/s
    ///
    /// "BPS_500M"
    #[serde(rename="BPS_500M")]
    BPS500M,
    

    /// 50 Gbit/s
    ///
    /// "BPS_50G"
    #[serde(rename="BPS_50G")]
    BPS50G,
    

    /// 50 Mbit/s
    ///
    /// "BPS_50M"
    #[serde(rename="BPS_50M")]
    BPS50M,
    

    /// 5 Gbit/s
    ///
    /// "BPS_5G"
    #[serde(rename="BPS_5G")]
    BPS5G,
}

impl AsRef<str> for InterconnectAttachmentBandwidthEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentBandwidthEnum::BPS100M => "BPS_100M",
            InterconnectAttachmentBandwidthEnum::BPS10G => "BPS_10G",
            InterconnectAttachmentBandwidthEnum::BPS1G => "BPS_1G",
            InterconnectAttachmentBandwidthEnum::BPS200M => "BPS_200M",
            InterconnectAttachmentBandwidthEnum::BPS20G => "BPS_20G",
            InterconnectAttachmentBandwidthEnum::BPS2G => "BPS_2G",
            InterconnectAttachmentBandwidthEnum::BPS300M => "BPS_300M",
            InterconnectAttachmentBandwidthEnum::BPS400M => "BPS_400M",
            InterconnectAttachmentBandwidthEnum::BPS500M => "BPS_500M",
            InterconnectAttachmentBandwidthEnum::BPS50G => "BPS_50G",
            InterconnectAttachmentBandwidthEnum::BPS50M => "BPS_50M",
            InterconnectAttachmentBandwidthEnum::BPS5G => "BPS_5G",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentBandwidthEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "BPS_100M" => Ok(InterconnectAttachmentBandwidthEnum::BPS100M),
           "BPS_10G" => Ok(InterconnectAttachmentBandwidthEnum::BPS10G),
           "BPS_1G" => Ok(InterconnectAttachmentBandwidthEnum::BPS1G),
           "BPS_200M" => Ok(InterconnectAttachmentBandwidthEnum::BPS200M),
           "BPS_20G" => Ok(InterconnectAttachmentBandwidthEnum::BPS20G),
           "BPS_2G" => Ok(InterconnectAttachmentBandwidthEnum::BPS2G),
           "BPS_300M" => Ok(InterconnectAttachmentBandwidthEnum::BPS300M),
           "BPS_400M" => Ok(InterconnectAttachmentBandwidthEnum::BPS400M),
           "BPS_500M" => Ok(InterconnectAttachmentBandwidthEnum::BPS500M),
           "BPS_50G" => Ok(InterconnectAttachmentBandwidthEnum::BPS50G),
           "BPS_50M" => Ok(InterconnectAttachmentBandwidthEnum::BPS50M),
           "BPS_5G" => Ok(InterconnectAttachmentBandwidthEnum::BPS5G),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentBandwidthEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentEdgeAvailabilityDomainEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY_DOMAIN_ANY - AVAILABILITY_DOMAIN_1 - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
pub enum InterconnectAttachmentEdgeAvailabilityDomainEnum {
    
    /// "AVAILABILITY_DOMAIN_1"
    #[serde(rename="AVAILABILITY_DOMAIN_1")]
    AVAILABILITYDOMAIN1,
    
    /// "AVAILABILITY_DOMAIN_2"
    #[serde(rename="AVAILABILITY_DOMAIN_2")]
    AVAILABILITYDOMAIN2,
    
    /// "AVAILABILITY_DOMAIN_ANY"
    #[serde(rename="AVAILABILITY_DOMAIN_ANY")]
    AVAILABILITYDOMAINANY,
}

impl AsRef<str> for InterconnectAttachmentEdgeAvailabilityDomainEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentEdgeAvailabilityDomainEnum::AVAILABILITYDOMAIN1 => "AVAILABILITY_DOMAIN_1",
            InterconnectAttachmentEdgeAvailabilityDomainEnum::AVAILABILITYDOMAIN2 => "AVAILABILITY_DOMAIN_2",
            InterconnectAttachmentEdgeAvailabilityDomainEnum::AVAILABILITYDOMAINANY => "AVAILABILITY_DOMAIN_ANY",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentEdgeAvailabilityDomainEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AVAILABILITY_DOMAIN_1" => Ok(InterconnectAttachmentEdgeAvailabilityDomainEnum::AVAILABILITYDOMAIN1),
           "AVAILABILITY_DOMAIN_2" => Ok(InterconnectAttachmentEdgeAvailabilityDomainEnum::AVAILABILITYDOMAIN2),
           "AVAILABILITY_DOMAIN_ANY" => Ok(InterconnectAttachmentEdgeAvailabilityDomainEnum::AVAILABILITYDOMAINANY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentEdgeAvailabilityDomainEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentEncryptionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments. Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use *HA VPN over Cloud Interconnect*, the VLAN attachment must be created with this option. 
pub enum InterconnectAttachmentEncryptionEnum {
    

    /// The interconnect attachment will carry only encrypted traffic that is encrypted by an IPsec device such as HA VPN gateway; VMs cannot directly send traffic to or receive traffic from such an interconnect attachment. To use HA VPN over Cloud Interconnect, the interconnect attachment must be created with this option.
    ///
    /// "IPSEC"
    #[serde(rename="IPSEC")]
    IPSEC,
    

    /// This is the default value, which means the Interconnect Attachment will carry unencrypted traffic. VMs will be able to send traffic to or receive traffic from such interconnect attachment.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
}

impl AsRef<str> for InterconnectAttachmentEncryptionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentEncryptionEnum::IPSEC => "IPSEC",
            InterconnectAttachmentEncryptionEnum::NONE => "NONE",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentEncryptionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPSEC" => Ok(InterconnectAttachmentEncryptionEnum::IPSEC),
           "NONE" => Ok(InterconnectAttachmentEncryptionEnum::NONE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentEncryptionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentOperationalStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: - OS_ACTIVE: The attachment has been turned up and is ready to use. - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. 
pub enum InterconnectAttachmentOperationalStatusEnum {
    

    /// Indicates that attachment has been turned up and is ready to use.
    ///
    /// "OS_ACTIVE"
    #[serde(rename="OS_ACTIVE")]
    OSACTIVE,
    

    /// Indicates that attachment is not ready to use yet, because turnup is not complete.
    ///
    /// "OS_UNPROVISIONED"
    #[serde(rename="OS_UNPROVISIONED")]
    OSUNPROVISIONED,
}

impl AsRef<str> for InterconnectAttachmentOperationalStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentOperationalStatusEnum::OSACTIVE => "OS_ACTIVE",
            InterconnectAttachmentOperationalStatusEnum::OSUNPROVISIONED => "OS_UNPROVISIONED",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentOperationalStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "OS_ACTIVE" => Ok(InterconnectAttachmentOperationalStatusEnum::OSACTIVE),
           "OS_UNPROVISIONED" => Ok(InterconnectAttachmentOperationalStatusEnum::OSUNPROVISIONED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentOperationalStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentStackTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update interconnect attachment operations.
pub enum InterconnectAttachmentStackTypeEnum {
    

    /// The interconnect attachment can have both IPv4 and IPv6 addresses.
    ///
    /// "IPV4_IPV6"
    #[serde(rename="IPV4_IPV6")]
    IPV4IPV6,
    

    /// The interconnect attachment will only be assigned IPv4 addresses.
    ///
    /// "IPV4_ONLY"
    #[serde(rename="IPV4_ONLY")]
    IPV4ONLY,
}

impl AsRef<str> for InterconnectAttachmentStackTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentStackTypeEnum::IPV4IPV6 => "IPV4_IPV6",
            InterconnectAttachmentStackTypeEnum::IPV4ONLY => "IPV4_ONLY",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentStackTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPV4_IPV6" => Ok(InterconnectAttachmentStackTypeEnum::IPV4IPV6),
           "IPV4_ONLY" => Ok(InterconnectAttachmentStackTypeEnum::IPV4ONLY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentStackTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: - ACTIVE: The attachment has been turned up and is ready to use. - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted. 
pub enum InterconnectAttachmentStateEnum {
    

    /// Indicates that attachment has been turned up and is ready to use.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was wiped out, or because the other side of a Partner attachment was deleted.
    ///
    /// "DEFUNCT"
    #[serde(rename="DEFUNCT")]
    DEFUNCT,
    

    /// A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it.
    ///
    /// "PARTNER_REQUEST_RECEIVED"
    #[serde(rename="PARTNER_REQUEST_RECEIVED")]
    PARTNERREQUESTRECEIVED,
    

    /// PARTNER or PARTNER_PROVIDER attachment that is waiting for the customer to activate.
    ///
    /// "PENDING_CUSTOMER"
    #[serde(rename="PENDING_CUSTOMER")]
    PENDINGCUSTOMER,
    

    /// A newly created PARTNER attachment that has not yet been configured on the Partner side.
    ///
    /// "PENDING_PARTNER"
    #[serde(rename="PENDING_PARTNER")]
    PENDINGPARTNER,
    
    /// "STATE_UNSPECIFIED"
    #[serde(rename="STATE_UNSPECIFIED")]
    STATEUNSPECIFIED,
    

    /// Indicates that attachment is not ready to use yet, because turnup is not complete.
    ///
    /// "UNPROVISIONED"
    #[serde(rename="UNPROVISIONED")]
    UNPROVISIONED,
}

impl AsRef<str> for InterconnectAttachmentStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentStateEnum::ACTIVE => "ACTIVE",
            InterconnectAttachmentStateEnum::DEFUNCT => "DEFUNCT",
            InterconnectAttachmentStateEnum::PARTNERREQUESTRECEIVED => "PARTNER_REQUEST_RECEIVED",
            InterconnectAttachmentStateEnum::PENDINGCUSTOMER => "PENDING_CUSTOMER",
            InterconnectAttachmentStateEnum::PENDINGPARTNER => "PENDING_PARTNER",
            InterconnectAttachmentStateEnum::STATEUNSPECIFIED => "STATE_UNSPECIFIED",
            InterconnectAttachmentStateEnum::UNPROVISIONED => "UNPROVISIONED",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(InterconnectAttachmentStateEnum::ACTIVE),
           "DEFUNCT" => Ok(InterconnectAttachmentStateEnum::DEFUNCT),
           "PARTNER_REQUEST_RECEIVED" => Ok(InterconnectAttachmentStateEnum::PARTNERREQUESTRECEIVED),
           "PENDING_CUSTOMER" => Ok(InterconnectAttachmentStateEnum::PENDINGCUSTOMER),
           "PENDING_PARTNER" => Ok(InterconnectAttachmentStateEnum::PENDINGPARTNER),
           "STATE_UNSPECIFIED" => Ok(InterconnectAttachmentStateEnum::STATEUNSPECIFIED),
           "UNPROVISIONED" => Ok(InterconnectAttachmentStateEnum::UNPROVISIONED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner. 
pub enum InterconnectAttachmentTypeEnum {
    

    /// Attachment to a dedicated interconnect.
    ///
    /// "DEDICATED"
    #[serde(rename="DEDICATED")]
    DEDICATED,
    

    /// Attachment to a partner interconnect, created by the customer.
    ///
    /// "PARTNER"
    #[serde(rename="PARTNER")]
    PARTNER,
    

    /// Attachment to a partner interconnect, created by the partner.
    ///
    /// "PARTNER_PROVIDER"
    #[serde(rename="PARTNER_PROVIDER")]
    PARTNERPROVIDER,
}

impl AsRef<str> for InterconnectAttachmentTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentTypeEnum::DEDICATED => "DEDICATED",
            InterconnectAttachmentTypeEnum::PARTNER => "PARTNER",
            InterconnectAttachmentTypeEnum::PARTNERPROVIDER => "PARTNER_PROVIDER",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DEDICATED" => Ok(InterconnectAttachmentTypeEnum::DEDICATED),
           "PARTNER" => Ok(InterconnectAttachmentTypeEnum::PARTNER),
           "PARTNER_PROVIDER" => Ok(InterconnectAttachmentTypeEnum::PARTNERPROVIDER),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentConfigurationConstraintBgpMd5Enum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Whether the attachment's BGP session requires/allows/disallows BGP MD5 authentication. This can take one of the following values: MD5_OPTIONAL, MD5_REQUIRED, MD5_UNSUPPORTED. For example, a Cross-Cloud Interconnect connection to a remote cloud provider that requires BGP MD5 authentication has the interconnectRemoteLocation attachment_configuration_constraints.bgp_md5 field set to MD5_REQUIRED, and that property is propagated to the attachment. Similarly, if BGP MD5 is MD5_UNSUPPORTED, an error is returned if MD5 is requested.
pub enum InterconnectAttachmentConfigurationConstraintBgpMd5Enum {
    

    /// MD5_OPTIONAL: BGP MD5 authentication is supported and can optionally be configured.
    ///
    /// "MD5_OPTIONAL"
    #[serde(rename="MD5_OPTIONAL")]
    MD5OPTIONAL,
    

    /// MD5_REQUIRED: BGP MD5 authentication must be configured.
    ///
    /// "MD5_REQUIRED"
    #[serde(rename="MD5_REQUIRED")]
    MD5REQUIRED,
    

    /// MD5_UNSUPPORTED: BGP MD5 authentication must not be configured
    ///
    /// "MD5_UNSUPPORTED"
    #[serde(rename="MD5_UNSUPPORTED")]
    MD5UNSUPPORTED,
}

impl AsRef<str> for InterconnectAttachmentConfigurationConstraintBgpMd5Enum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentConfigurationConstraintBgpMd5Enum::MD5OPTIONAL => "MD5_OPTIONAL",
            InterconnectAttachmentConfigurationConstraintBgpMd5Enum::MD5REQUIRED => "MD5_REQUIRED",
            InterconnectAttachmentConfigurationConstraintBgpMd5Enum::MD5UNSUPPORTED => "MD5_UNSUPPORTED",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentConfigurationConstraintBgpMd5Enum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "MD5_OPTIONAL" => Ok(InterconnectAttachmentConfigurationConstraintBgpMd5Enum::MD5OPTIONAL),
           "MD5_REQUIRED" => Ok(InterconnectAttachmentConfigurationConstraintBgpMd5Enum::MD5REQUIRED),
           "MD5_UNSUPPORTED" => Ok(InterconnectAttachmentConfigurationConstraintBgpMd5Enum::MD5UNSUPPORTED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentConfigurationConstraintBgpMd5Enum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectDiagnosticBundleAggregationTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The aggregation type of the bundle interface.
pub enum InterconnectDiagnosticBundleAggregationTypeEnum {
    

    /// LACP is enabled.
    ///
    /// "BUNDLE_AGGREGATION_TYPE_LACP"
    #[serde(rename="BUNDLE_AGGREGATION_TYPE_LACP")]
    BUNDLEAGGREGATIONTYPELACP,
    

    /// LACP is disabled.
    ///
    /// "BUNDLE_AGGREGATION_TYPE_STATIC"
    #[serde(rename="BUNDLE_AGGREGATION_TYPE_STATIC")]
    BUNDLEAGGREGATIONTYPESTATIC,
}

impl AsRef<str> for InterconnectDiagnosticBundleAggregationTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectDiagnosticBundleAggregationTypeEnum::BUNDLEAGGREGATIONTYPELACP => "BUNDLE_AGGREGATION_TYPE_LACP",
            InterconnectDiagnosticBundleAggregationTypeEnum::BUNDLEAGGREGATIONTYPESTATIC => "BUNDLE_AGGREGATION_TYPE_STATIC",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectDiagnosticBundleAggregationTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "BUNDLE_AGGREGATION_TYPE_LACP" => Ok(InterconnectDiagnosticBundleAggregationTypeEnum::BUNDLEAGGREGATIONTYPELACP),
           "BUNDLE_AGGREGATION_TYPE_STATIC" => Ok(InterconnectDiagnosticBundleAggregationTypeEnum::BUNDLEAGGREGATIONTYPESTATIC),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectDiagnosticBundleAggregationTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectDiagnosticBundleOperationalStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The operational status of the bundle interface.
pub enum InterconnectDiagnosticBundleOperationalStatusEnum {
    

    /// If bundleAggregationType is LACP: LACP is not established and/or all links in the bundle have DOWN operational status. If bundleAggregationType is STATIC: one or more links in the bundle has DOWN operational status.
    ///
    /// "BUNDLE_OPERATIONAL_STATUS_DOWN"
    #[serde(rename="BUNDLE_OPERATIONAL_STATUS_DOWN")]
    BUNDLEOPERATIONALSTATUSDOWN,
    

    /// If bundleAggregationType is LACP: LACP is established and at least one link in the bundle has UP operational status. If bundleAggregationType is STATIC: all links in the bundle (typically just one) have UP operational status.
    ///
    /// "BUNDLE_OPERATIONAL_STATUS_UP"
    #[serde(rename="BUNDLE_OPERATIONAL_STATUS_UP")]
    BUNDLEOPERATIONALSTATUSUP,
}

impl AsRef<str> for InterconnectDiagnosticBundleOperationalStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectDiagnosticBundleOperationalStatusEnum::BUNDLEOPERATIONALSTATUSDOWN => "BUNDLE_OPERATIONAL_STATUS_DOWN",
            InterconnectDiagnosticBundleOperationalStatusEnum::BUNDLEOPERATIONALSTATUSUP => "BUNDLE_OPERATIONAL_STATUS_UP",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectDiagnosticBundleOperationalStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "BUNDLE_OPERATIONAL_STATUS_DOWN" => Ok(InterconnectDiagnosticBundleOperationalStatusEnum::BUNDLEOPERATIONALSTATUSDOWN),
           "BUNDLE_OPERATIONAL_STATUS_UP" => Ok(InterconnectDiagnosticBundleOperationalStatusEnum::BUNDLEOPERATIONALSTATUSUP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectDiagnosticBundleOperationalStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectDiagnosticsLinkLACPStatusStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The state of a LACP link, which can take one of the following values: - ACTIVE: The link is configured and active within the bundle. - DETACHED: The link is not configured within the bundle. This means that the rest of the object should be empty. 
pub enum InterconnectDiagnosticsLinkLACPStatusStateEnum {
    

    /// The link is configured and active within the bundle.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// The link is not configured within the bundle, this means the rest of the object should be empty.
    ///
    /// "DETACHED"
    #[serde(rename="DETACHED")]
    DETACHED,
}

impl AsRef<str> for InterconnectDiagnosticsLinkLACPStatusStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectDiagnosticsLinkLACPStatusStateEnum::ACTIVE => "ACTIVE",
            InterconnectDiagnosticsLinkLACPStatusStateEnum::DETACHED => "DETACHED",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectDiagnosticsLinkLACPStatusStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(InterconnectDiagnosticsLinkLACPStatusStateEnum::ACTIVE),
           "DETACHED" => Ok(InterconnectDiagnosticsLinkLACPStatusStateEnum::DETACHED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectDiagnosticsLinkLACPStatusStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectDiagnosticsLinkOpticalPowerStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include: - OK: The value has not crossed a warning threshold. - LOW_WARNING: The value has crossed below the low warning threshold. - HIGH_WARNING: The value has crossed above the high warning threshold. - LOW_ALARM: The value has crossed below the low alarm threshold. - HIGH_ALARM: The value has crossed above the high alarm threshold. 
pub enum InterconnectDiagnosticsLinkOpticalPowerStateEnum {
    

    /// The value has crossed above the high alarm threshold.
    ///
    /// "HIGH_ALARM"
    #[serde(rename="HIGH_ALARM")]
    HIGHALARM,
    

    /// The value of the current optical power has crossed above the high warning threshold.
    ///
    /// "HIGH_WARNING"
    #[serde(rename="HIGH_WARNING")]
    HIGHWARNING,
    

    /// The value of the current optical power has crossed below the low alarm threshold.
    ///
    /// "LOW_ALARM"
    #[serde(rename="LOW_ALARM")]
    LOWALARM,
    

    /// The value of the current optical power has crossed below the low warning threshold.
    ///
    /// "LOW_WARNING"
    #[serde(rename="LOW_WARNING")]
    LOWWARNING,
    

    /// The value of the current optical power has not crossed a warning threshold.
    ///
    /// "OK"
    #[serde(rename="OK")]
    OK,
}

impl AsRef<str> for InterconnectDiagnosticsLinkOpticalPowerStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectDiagnosticsLinkOpticalPowerStateEnum::HIGHALARM => "HIGH_ALARM",
            InterconnectDiagnosticsLinkOpticalPowerStateEnum::HIGHWARNING => "HIGH_WARNING",
            InterconnectDiagnosticsLinkOpticalPowerStateEnum::LOWALARM => "LOW_ALARM",
            InterconnectDiagnosticsLinkOpticalPowerStateEnum::LOWWARNING => "LOW_WARNING",
            InterconnectDiagnosticsLinkOpticalPowerStateEnum::OK => "OK",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectDiagnosticsLinkOpticalPowerStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "HIGH_ALARM" => Ok(InterconnectDiagnosticsLinkOpticalPowerStateEnum::HIGHALARM),
           "HIGH_WARNING" => Ok(InterconnectDiagnosticsLinkOpticalPowerStateEnum::HIGHWARNING),
           "LOW_ALARM" => Ok(InterconnectDiagnosticsLinkOpticalPowerStateEnum::LOWALARM),
           "LOW_WARNING" => Ok(InterconnectDiagnosticsLinkOpticalPowerStateEnum::LOWWARNING),
           "OK" => Ok(InterconnectDiagnosticsLinkOpticalPowerStateEnum::OK),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectDiagnosticsLinkOpticalPowerStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectDiagnosticsLinkStatusOperationalStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The operational status of the link.
pub enum InterconnectDiagnosticsLinkStatusOperationalStatusEnum {
    

    /// The interface is unable to communicate with the remote end.
    ///
    /// "LINK_OPERATIONAL_STATUS_DOWN"
    #[serde(rename="LINK_OPERATIONAL_STATUS_DOWN")]
    LINKOPERATIONALSTATUSDOWN,
    

    /// The interface has low level communication with the remote end.
    ///
    /// "LINK_OPERATIONAL_STATUS_UP"
    #[serde(rename="LINK_OPERATIONAL_STATUS_UP")]
    LINKOPERATIONALSTATUSUP,
}

impl AsRef<str> for InterconnectDiagnosticsLinkStatusOperationalStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectDiagnosticsLinkStatusOperationalStatusEnum::LINKOPERATIONALSTATUSDOWN => "LINK_OPERATIONAL_STATUS_DOWN",
            InterconnectDiagnosticsLinkStatusOperationalStatusEnum::LINKOPERATIONALSTATUSUP => "LINK_OPERATIONAL_STATUS_UP",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectDiagnosticsLinkStatusOperationalStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "LINK_OPERATIONAL_STATUS_DOWN" => Ok(InterconnectDiagnosticsLinkStatusOperationalStatusEnum::LINKOPERATIONALSTATUSDOWN),
           "LINK_OPERATIONAL_STATUS_UP" => Ok(InterconnectDiagnosticsLinkStatusOperationalStatusEnum::LINKOPERATIONALSTATUSUP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectDiagnosticsLinkStatusOperationalStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectLocationAvailableFeaturesEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output only] List of features available at this InterconnectLocation, which can take one of the following values: - MACSEC 
pub enum InterconnectLocationAvailableFeaturesEnum {
    

    /// Media Access Control security (MACsec)
    ///
    /// "IF_MACSEC"
    #[serde(rename="IF_MACSEC")]
    IFMACSEC,
}

impl AsRef<str> for InterconnectLocationAvailableFeaturesEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectLocationAvailableFeaturesEnum::IFMACSEC => "IF_MACSEC",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectLocationAvailableFeaturesEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IF_MACSEC" => Ok(InterconnectLocationAvailableFeaturesEnum::IFMACSEC),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectLocationAvailableFeaturesEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectLocationAvailableLinkTypesEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output only] List of link types available at this InterconnectLocation, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR - LINK_TYPE_ETHERNET_100G_LR 
pub enum InterconnectLocationAvailableLinkTypesEnum {
    

    /// 100G Ethernet, LR Optics.
    ///
    /// "LINK_TYPE_ETHERNET_100G_LR"
    #[serde(rename="LINK_TYPE_ETHERNET_100G_LR")]
    LINKTYPEETHERNET100GLR,
    

    /// 10G Ethernet, LR Optics. [(rate_bps) = 10000000000];
    ///
    /// "LINK_TYPE_ETHERNET_10G_LR"
    #[serde(rename="LINK_TYPE_ETHERNET_10G_LR")]
    LINKTYPEETHERNET10GLR,
}

impl AsRef<str> for InterconnectLocationAvailableLinkTypesEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectLocationAvailableLinkTypesEnum::LINKTYPEETHERNET100GLR => "LINK_TYPE_ETHERNET_100G_LR",
            InterconnectLocationAvailableLinkTypesEnum::LINKTYPEETHERNET10GLR => "LINK_TYPE_ETHERNET_10G_LR",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectLocationAvailableLinkTypesEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "LINK_TYPE_ETHERNET_100G_LR" => Ok(InterconnectLocationAvailableLinkTypesEnum::LINKTYPEETHERNET100GLR),
           "LINK_TYPE_ETHERNET_10G_LR" => Ok(InterconnectLocationAvailableLinkTypesEnum::LINKTYPEETHERNET10GLR),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectLocationAvailableLinkTypesEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectLocationContinentEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA 
pub enum InterconnectLocationContinentEnum {
    
    /// "AFRICA"
    #[serde(rename="AFRICA")]
    AFRICA,
    
    /// "ASIA_PAC"
    #[serde(rename="ASIA_PAC")]
    ASIAPAC,
    
    /// "C_AFRICA"
    #[serde(rename="C_AFRICA")]
    CAFRICA,
    
    /// "C_ASIA_PAC"
    #[serde(rename="C_ASIA_PAC")]
    CASIAPAC,
    
    /// "C_EUROPE"
    #[serde(rename="C_EUROPE")]
    CEUROPE,
    
    /// "C_NORTH_AMERICA"
    #[serde(rename="C_NORTH_AMERICA")]
    CNORTHAMERICA,
    
    /// "C_SOUTH_AMERICA"
    #[serde(rename="C_SOUTH_AMERICA")]
    CSOUTHAMERICA,
    
    /// "EUROPE"
    #[serde(rename="EUROPE")]
    EUROPE,
    
    /// "NORTH_AMERICA"
    #[serde(rename="NORTH_AMERICA")]
    NORTHAMERICA,
    
    /// "SOUTH_AMERICA"
    #[serde(rename="SOUTH_AMERICA")]
    SOUTHAMERICA,
}

impl AsRef<str> for InterconnectLocationContinentEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectLocationContinentEnum::AFRICA => "AFRICA",
            InterconnectLocationContinentEnum::ASIAPAC => "ASIA_PAC",
            InterconnectLocationContinentEnum::CAFRICA => "C_AFRICA",
            InterconnectLocationContinentEnum::CASIAPAC => "C_ASIA_PAC",
            InterconnectLocationContinentEnum::CEUROPE => "C_EUROPE",
            InterconnectLocationContinentEnum::CNORTHAMERICA => "C_NORTH_AMERICA",
            InterconnectLocationContinentEnum::CSOUTHAMERICA => "C_SOUTH_AMERICA",
            InterconnectLocationContinentEnum::EUROPE => "EUROPE",
            InterconnectLocationContinentEnum::NORTHAMERICA => "NORTH_AMERICA",
            InterconnectLocationContinentEnum::SOUTHAMERICA => "SOUTH_AMERICA",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectLocationContinentEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AFRICA" => Ok(InterconnectLocationContinentEnum::AFRICA),
           "ASIA_PAC" => Ok(InterconnectLocationContinentEnum::ASIAPAC),
           "C_AFRICA" => Ok(InterconnectLocationContinentEnum::CAFRICA),
           "C_ASIA_PAC" => Ok(InterconnectLocationContinentEnum::CASIAPAC),
           "C_EUROPE" => Ok(InterconnectLocationContinentEnum::CEUROPE),
           "C_NORTH_AMERICA" => Ok(InterconnectLocationContinentEnum::CNORTHAMERICA),
           "C_SOUTH_AMERICA" => Ok(InterconnectLocationContinentEnum::CSOUTHAMERICA),
           "EUROPE" => Ok(InterconnectLocationContinentEnum::EUROPE),
           "NORTH_AMERICA" => Ok(InterconnectLocationContinentEnum::NORTHAMERICA),
           "SOUTH_AMERICA" => Ok(InterconnectLocationContinentEnum::SOUTHAMERICA),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectLocationContinentEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectLocationStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of this InterconnectLocation, which can take one of the following values: - CLOSED: The InterconnectLocation is closed and is unavailable for provisioning new Interconnects. - AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects. 
pub enum InterconnectLocationStatusEnum {
    

    /// The InterconnectLocation is available for provisioning new Interconnects.
    ///
    /// "AVAILABLE"
    #[serde(rename="AVAILABLE")]
    AVAILABLE,
    

    /// The InterconnectLocation is closed for provisioning new Interconnects.
    ///
    /// "CLOSED"
    #[serde(rename="CLOSED")]
    CLOSED,
}

impl AsRef<str> for InterconnectLocationStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectLocationStatusEnum::AVAILABLE => "AVAILABLE",
            InterconnectLocationStatusEnum::CLOSED => "CLOSED",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectLocationStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AVAILABLE" => Ok(InterconnectLocationStatusEnum::AVAILABLE),
           "CLOSED" => Ok(InterconnectLocationStatusEnum::CLOSED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectLocationStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectLocationRegionInfoLocationPresenceEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Identifies the network presence of this location.
pub enum InterconnectLocationRegionInfoLocationPresenceEnum {
    

    /// This region is not in any common network presence with this InterconnectLocation.
    ///
    /// "GLOBAL"
    #[serde(rename="GLOBAL")]
    GLOBAL,
    

    /// This region shares the same regional network presence as this InterconnectLocation.
    ///
    /// "LOCAL_REGION"
    #[serde(rename="LOCAL_REGION")]
    LOCALREGION,
    

    /// [Deprecated] This region is not in any common network presence with this InterconnectLocation.
    ///
    /// "LP_GLOBAL"
    #[serde(rename="LP_GLOBAL")]
    LPGLOBAL,
    

    /// [Deprecated] This region shares the same regional network presence as this InterconnectLocation.
    ///
    /// "LP_LOCAL_REGION"
    #[serde(rename="LP_LOCAL_REGION")]
    LPLOCALREGION,
}

impl AsRef<str> for InterconnectLocationRegionInfoLocationPresenceEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectLocationRegionInfoLocationPresenceEnum::GLOBAL => "GLOBAL",
            InterconnectLocationRegionInfoLocationPresenceEnum::LOCALREGION => "LOCAL_REGION",
            InterconnectLocationRegionInfoLocationPresenceEnum::LPGLOBAL => "LP_GLOBAL",
            InterconnectLocationRegionInfoLocationPresenceEnum::LPLOCALREGION => "LP_LOCAL_REGION",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectLocationRegionInfoLocationPresenceEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GLOBAL" => Ok(InterconnectLocationRegionInfoLocationPresenceEnum::GLOBAL),
           "LOCAL_REGION" => Ok(InterconnectLocationRegionInfoLocationPresenceEnum::LOCALREGION),
           "LP_GLOBAL" => Ok(InterconnectLocationRegionInfoLocationPresenceEnum::LPGLOBAL),
           "LP_LOCAL_REGION" => Ok(InterconnectLocationRegionInfoLocationPresenceEnum::LPLOCALREGION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectLocationRegionInfoLocationPresenceEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectOutageNotificationIssueTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Form this outage is expected to take, which can take one of the following values: - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values.
pub enum InterconnectOutageNotificationIssueTypeEnum {
    

    /// [Deprecated] The Interconnect may be completely out of service for some or all of the specified window.
    ///
    /// "IT_OUTAGE"
    #[serde(rename="IT_OUTAGE")]
    ITOUTAGE,
    

    /// [Deprecated] Some circuits comprising the Interconnect will be out of service during the expected window. The interconnect as a whole should remain up, albeit with reduced bandwidth.
    ///
    /// "IT_PARTIAL_OUTAGE"
    #[serde(rename="IT_PARTIAL_OUTAGE")]
    ITPARTIALOUTAGE,
    

    /// The Interconnect may be completely out of service for some or all of the specified window.
    ///
    /// "OUTAGE"
    #[serde(rename="OUTAGE")]
    OUTAGE,
    

    /// Some circuits comprising the Interconnect will be out of service during the expected window. The interconnect as a whole should remain up, albeit with reduced bandwidth.
    ///
    /// "PARTIAL_OUTAGE"
    #[serde(rename="PARTIAL_OUTAGE")]
    PARTIALOUTAGE,
}

impl AsRef<str> for InterconnectOutageNotificationIssueTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectOutageNotificationIssueTypeEnum::ITOUTAGE => "IT_OUTAGE",
            InterconnectOutageNotificationIssueTypeEnum::ITPARTIALOUTAGE => "IT_PARTIAL_OUTAGE",
            InterconnectOutageNotificationIssueTypeEnum::OUTAGE => "OUTAGE",
            InterconnectOutageNotificationIssueTypeEnum::PARTIALOUTAGE => "PARTIAL_OUTAGE",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectOutageNotificationIssueTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IT_OUTAGE" => Ok(InterconnectOutageNotificationIssueTypeEnum::ITOUTAGE),
           "IT_PARTIAL_OUTAGE" => Ok(InterconnectOutageNotificationIssueTypeEnum::ITPARTIALOUTAGE),
           "OUTAGE" => Ok(InterconnectOutageNotificationIssueTypeEnum::OUTAGE),
           "PARTIAL_OUTAGE" => Ok(InterconnectOutageNotificationIssueTypeEnum::PARTIALOUTAGE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectOutageNotificationIssueTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectOutageNotificationSourceEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The party that generated this notification, which can take the following value: - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
pub enum InterconnectOutageNotificationSourceEnum {
    

    /// This notification was generated by Google.
    ///
    /// "GOOGLE"
    #[serde(rename="GOOGLE")]
    GOOGLE,
    

    /// [Deprecated] This notification was generated by Google.
    ///
    /// "NSRC_GOOGLE"
    #[serde(rename="NSRC_GOOGLE")]
    NSRCGOOGLE,
}

impl AsRef<str> for InterconnectOutageNotificationSourceEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectOutageNotificationSourceEnum::GOOGLE => "GOOGLE",
            InterconnectOutageNotificationSourceEnum::NSRCGOOGLE => "NSRC_GOOGLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectOutageNotificationSourceEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GOOGLE" => Ok(InterconnectOutageNotificationSourceEnum::GOOGLE),
           "NSRC_GOOGLE" => Ok(InterconnectOutageNotificationSourceEnum::NSRCGOOGLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectOutageNotificationSourceEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectOutageNotificationStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// State of this notification, which can take one of the following values: - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. - COMPLETED: The outage associated with this notification is complete. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values.
pub enum InterconnectOutageNotificationStateEnum {
    

    /// This outage notification is active. The event could be in the future, present, or past. See start_time and end_time for scheduling.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// The outage associated with this notification was cancelled before the outage was due to start.
    ///
    /// "CANCELLED"
    #[serde(rename="CANCELLED")]
    CANCELLED,
    

    /// The outage associated with this notification is complete.
    ///
    /// "COMPLETED"
    #[serde(rename="COMPLETED")]
    COMPLETED,
    

    /// [Deprecated] This outage notification is active. The event could be in the future, present, or past. See start_time and end_time for scheduling.
    ///
    /// "NS_ACTIVE"
    #[serde(rename="NS_ACTIVE")]
    NSACTIVE,
    

    /// [Deprecated] The outage associated with this notification was canceled before the outage was due to start.
    ///
    /// "NS_CANCELED"
    #[serde(rename="NS_CANCELED")]
    NSCANCELED,
}

impl AsRef<str> for InterconnectOutageNotificationStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectOutageNotificationStateEnum::ACTIVE => "ACTIVE",
            InterconnectOutageNotificationStateEnum::CANCELLED => "CANCELLED",
            InterconnectOutageNotificationStateEnum::COMPLETED => "COMPLETED",
            InterconnectOutageNotificationStateEnum::NSACTIVE => "NS_ACTIVE",
            InterconnectOutageNotificationStateEnum::NSCANCELED => "NS_CANCELED",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectOutageNotificationStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(InterconnectOutageNotificationStateEnum::ACTIVE),
           "CANCELLED" => Ok(InterconnectOutageNotificationStateEnum::CANCELLED),
           "COMPLETED" => Ok(InterconnectOutageNotificationStateEnum::COMPLETED),
           "NS_ACTIVE" => Ok(InterconnectOutageNotificationStateEnum::NSACTIVE),
           "NS_CANCELED" => Ok(InterconnectOutageNotificationStateEnum::NSCANCELED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectOutageNotificationStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectRemoteLocationContinentEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA 
pub enum InterconnectRemoteLocationContinentEnum {
    
    /// "AFRICA"
    #[serde(rename="AFRICA")]
    AFRICA,
    
    /// "ASIA_PAC"
    #[serde(rename="ASIA_PAC")]
    ASIAPAC,
    
    /// "EUROPE"
    #[serde(rename="EUROPE")]
    EUROPE,
    
    /// "NORTH_AMERICA"
    #[serde(rename="NORTH_AMERICA")]
    NORTHAMERICA,
    
    /// "SOUTH_AMERICA"
    #[serde(rename="SOUTH_AMERICA")]
    SOUTHAMERICA,
}

impl AsRef<str> for InterconnectRemoteLocationContinentEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectRemoteLocationContinentEnum::AFRICA => "AFRICA",
            InterconnectRemoteLocationContinentEnum::ASIAPAC => "ASIA_PAC",
            InterconnectRemoteLocationContinentEnum::EUROPE => "EUROPE",
            InterconnectRemoteLocationContinentEnum::NORTHAMERICA => "NORTH_AMERICA",
            InterconnectRemoteLocationContinentEnum::SOUTHAMERICA => "SOUTH_AMERICA",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectRemoteLocationContinentEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AFRICA" => Ok(InterconnectRemoteLocationContinentEnum::AFRICA),
           "ASIA_PAC" => Ok(InterconnectRemoteLocationContinentEnum::ASIAPAC),
           "EUROPE" => Ok(InterconnectRemoteLocationContinentEnum::EUROPE),
           "NORTH_AMERICA" => Ok(InterconnectRemoteLocationContinentEnum::NORTHAMERICA),
           "SOUTH_AMERICA" => Ok(InterconnectRemoteLocationContinentEnum::SOUTHAMERICA),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectRemoteLocationContinentEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectRemoteLocationLacpEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Link Aggregation Control Protocol (LACP) constraints, which can take one of the following values: LACP_SUPPORTED, LACP_UNSUPPORTED
pub enum InterconnectRemoteLocationLacpEnum {
    

    /// LACP_SUPPORTED: LACP is supported, and enabled by default on the Cross-Cloud Interconnect.
    ///
    /// "LACP_SUPPORTED"
    #[serde(rename="LACP_SUPPORTED")]
    LACPSUPPORTED,
    

    /// LACP_UNSUPPORTED: LACP is not supported and is not be enabled on this port. GetDiagnostics shows bundleAggregationType as "static". GCP does not support LAGs without LACP, so requestedLinkCount must be 1.
    ///
    /// "LACP_UNSUPPORTED"
    #[serde(rename="LACP_UNSUPPORTED")]
    LACPUNSUPPORTED,
}

impl AsRef<str> for InterconnectRemoteLocationLacpEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectRemoteLocationLacpEnum::LACPSUPPORTED => "LACP_SUPPORTED",
            InterconnectRemoteLocationLacpEnum::LACPUNSUPPORTED => "LACP_UNSUPPORTED",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectRemoteLocationLacpEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "LACP_SUPPORTED" => Ok(InterconnectRemoteLocationLacpEnum::LACPSUPPORTED),
           "LACP_UNSUPPORTED" => Ok(InterconnectRemoteLocationLacpEnum::LACPUNSUPPORTED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectRemoteLocationLacpEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectRemoteLocationStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of this InterconnectRemoteLocation, which can take one of the following values: - CLOSED: The InterconnectRemoteLocation is closed and is unavailable for provisioning new Cross-Cloud Interconnects. - AVAILABLE: The InterconnectRemoteLocation is available for provisioning new Cross-Cloud Interconnects. 
pub enum InterconnectRemoteLocationStatusEnum {
    

    /// The InterconnectRemoteLocation is available for provisioning new Cross-Cloud Interconnects.
    ///
    /// "AVAILABLE"
    #[serde(rename="AVAILABLE")]
    AVAILABLE,
    

    /// The InterconnectRemoteLocation is closed for provisioning new Cross-Cloud Interconnects.
    ///
    /// "CLOSED"
    #[serde(rename="CLOSED")]
    CLOSED,
}

impl AsRef<str> for InterconnectRemoteLocationStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectRemoteLocationStatusEnum::AVAILABLE => "AVAILABLE",
            InterconnectRemoteLocationStatusEnum::CLOSED => "CLOSED",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectRemoteLocationStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AVAILABLE" => Ok(InterconnectRemoteLocationStatusEnum::AVAILABLE),
           "CLOSED" => Ok(InterconnectRemoteLocationStatusEnum::CLOSED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectRemoteLocationStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectRemoteLocationConstraintPortPairRemoteLocationEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Port pair remote location constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION, PORT_PAIR_MATCHING_REMOTE_LOCATION. Google Cloud API refers only to individual ports, but the UI uses this field when ordering a pair of ports, to prevent users from accidentally ordering something that is incompatible with their cloud provider. Specifically, when ordering a redundant pair of Cross-Cloud Interconnect ports, and one of them uses a remote location with portPairMatchingRemoteLocation set to matching, the UI requires that both ports use the same remote location.
pub enum InterconnectRemoteLocationConstraintPortPairRemoteLocationEnum {
    

    /// If PORT_PAIR_MATCHING_REMOTE_LOCATION, the remote cloud provider allocates ports in pairs, and the user should choose the same remote location for both ports.
    ///
    /// "PORT_PAIR_MATCHING_REMOTE_LOCATION"
    #[serde(rename="PORT_PAIR_MATCHING_REMOTE_LOCATION")]
    PORTPAIRMATCHINGREMOTELOCATION,
    

    /// If PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION, a user may opt to provision a redundant pair of Cross-Cloud Interconnects using two different remote locations in the same city.
    ///
    /// "PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION"
    #[serde(rename="PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION")]
    PORTPAIRUNCONSTRAINEDREMOTELOCATION,
}

impl AsRef<str> for InterconnectRemoteLocationConstraintPortPairRemoteLocationEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectRemoteLocationConstraintPortPairRemoteLocationEnum::PORTPAIRMATCHINGREMOTELOCATION => "PORT_PAIR_MATCHING_REMOTE_LOCATION",
            InterconnectRemoteLocationConstraintPortPairRemoteLocationEnum::PORTPAIRUNCONSTRAINEDREMOTELOCATION => "PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectRemoteLocationConstraintPortPairRemoteLocationEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "PORT_PAIR_MATCHING_REMOTE_LOCATION" => Ok(InterconnectRemoteLocationConstraintPortPairRemoteLocationEnum::PORTPAIRMATCHINGREMOTELOCATION),
           "PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION" => Ok(InterconnectRemoteLocationConstraintPortPairRemoteLocationEnum::PORTPAIRUNCONSTRAINEDREMOTELOCATION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectRemoteLocationConstraintPortPairRemoteLocationEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectRemoteLocationConstraintPortPairVlanEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Port pair VLAN constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_VLAN, PORT_PAIR_MATCHING_VLAN
pub enum InterconnectRemoteLocationConstraintPortPairVlanEnum {
    

    /// If PORT_PAIR_MATCHING_VLAN, the Interconnect for this attachment is part of a pair of ports that should have matching VLAN allocations. This occurs with Cross-Cloud Interconnect to Azure remote locations. While GCP's API does not explicitly group pairs of ports, the UI uses this field to ensure matching VLAN ids when configuring a redundant VLAN pair.
    ///
    /// "PORT_PAIR_MATCHING_VLAN"
    #[serde(rename="PORT_PAIR_MATCHING_VLAN")]
    PORTPAIRMATCHINGVLAN,
    

    /// PORT_PAIR_UNCONSTRAINED_VLAN means there is no constraint.
    ///
    /// "PORT_PAIR_UNCONSTRAINED_VLAN"
    #[serde(rename="PORT_PAIR_UNCONSTRAINED_VLAN")]
    PORTPAIRUNCONSTRAINEDVLAN,
}

impl AsRef<str> for InterconnectRemoteLocationConstraintPortPairVlanEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectRemoteLocationConstraintPortPairVlanEnum::PORTPAIRMATCHINGVLAN => "PORT_PAIR_MATCHING_VLAN",
            InterconnectRemoteLocationConstraintPortPairVlanEnum::PORTPAIRUNCONSTRAINEDVLAN => "PORT_PAIR_UNCONSTRAINED_VLAN",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectRemoteLocationConstraintPortPairVlanEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "PORT_PAIR_MATCHING_VLAN" => Ok(InterconnectRemoteLocationConstraintPortPairVlanEnum::PORTPAIRMATCHINGVLAN),
           "PORT_PAIR_UNCONSTRAINED_VLAN" => Ok(InterconnectRemoteLocationConstraintPortPairVlanEnum::PORTPAIRUNCONSTRAINEDVLAN),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectRemoteLocationConstraintPortPairVlanEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region LicenseCodeStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Current state of this License Code.
pub enum LicenseCodeStateEnum {
    

    /// Machines are not allowed to attach boot disks with this License Code. Requests to create new resources with this license will be rejected.
    ///
    /// "DISABLED"
    #[serde(rename="DISABLED")]
    DISABLED,
    

    /// Use is allowed for anyone with USE_READ_ONLY access to this License Code.
    ///
    /// "ENABLED"
    #[serde(rename="ENABLED")]
    ENABLED,
    

    /// Use of this license is limited to a project whitelist.
    ///
    /// "RESTRICTED"
    #[serde(rename="RESTRICTED")]
    RESTRICTED,
    
    /// "STATE_UNSPECIFIED"
    #[serde(rename="STATE_UNSPECIFIED")]
    STATEUNSPECIFIED,
    

    /// Reserved state.
    ///
    /// "TERMINATED"
    #[serde(rename="TERMINATED")]
    TERMINATED,
}

impl AsRef<str> for LicenseCodeStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            LicenseCodeStateEnum::DISABLED => "DISABLED",
            LicenseCodeStateEnum::ENABLED => "ENABLED",
            LicenseCodeStateEnum::RESTRICTED => "RESTRICTED",
            LicenseCodeStateEnum::STATEUNSPECIFIED => "STATE_UNSPECIFIED",
            LicenseCodeStateEnum::TERMINATED => "TERMINATED",
        }
    }
}

impl std::convert::TryFrom< &str> for LicenseCodeStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DISABLED" => Ok(LicenseCodeStateEnum::DISABLED),
           "ENABLED" => Ok(LicenseCodeStateEnum::ENABLED),
           "RESTRICTED" => Ok(LicenseCodeStateEnum::RESTRICTED),
           "STATE_UNSPECIFIED" => Ok(LicenseCodeStateEnum::STATEUNSPECIFIED),
           "TERMINATED" => Ok(LicenseCodeStateEnum::TERMINATED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a LicenseCodeStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region LocationPolicyTargetShapeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Strategy for distributing VMs across zones in a region.
pub enum LocationPolicyTargetShapeEnum {
    

    /// GCE picks zones for creating VM instances to fulfill the requested number of VMs within present resource constraints and to maximize utilization of unused zonal reservations. Recommended for batch workloads that do not require high availability.
    ///
    /// "ANY"
    #[serde(rename="ANY")]
    ANY,
    

    /// GCE always selects a single zone for all the VMs, optimizing for resource quotas, available reservations and general capacity. Recommended for batch workloads that cannot tollerate distribution over multiple zones. This the default shape in Bulk Insert and Capacity Advisor APIs.
    ///
    /// "ANY_SINGLE_ZONE"
    #[serde(rename="ANY_SINGLE_ZONE")]
    ANYSINGLEZONE,
    

    /// GCE prioritizes acquisition of resources, scheduling VMs in zones where resources are available while distributing VMs as evenly as possible across allowed zones to minimize the impact of zonal failure. Recommended for highly available serving workloads.
    ///
    /// "BALANCED"
    #[serde(rename="BALANCED")]
    BALANCED,
}

impl AsRef<str> for LocationPolicyTargetShapeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            LocationPolicyTargetShapeEnum::ANY => "ANY",
            LocationPolicyTargetShapeEnum::ANYSINGLEZONE => "ANY_SINGLE_ZONE",
            LocationPolicyTargetShapeEnum::BALANCED => "BALANCED",
        }
    }
}

impl std::convert::TryFrom< &str> for LocationPolicyTargetShapeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ANY" => Ok(LocationPolicyTargetShapeEnum::ANY),
           "ANY_SINGLE_ZONE" => Ok(LocationPolicyTargetShapeEnum::ANYSINGLEZONE),
           "BALANCED" => Ok(LocationPolicyTargetShapeEnum::BALANCED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a LocationPolicyTargetShapeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region LocationPolicyLocationPreferenceEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Preference for a given location. Set to either ALLOW or DENY.
pub enum LocationPolicyLocationPreferenceEnum {
    

    /// Location is allowed for use.
    ///
    /// "ALLOW"
    #[serde(rename="ALLOW")]
    ALLOW,
    

    /// Location is prohibited.
    ///
    /// "DENY"
    #[serde(rename="DENY")]
    DENY,
    

    /// Default value, unused.
    ///
    /// "PREFERENCE_UNSPECIFIED"
    #[serde(rename="PREFERENCE_UNSPECIFIED")]
    PREFERENCEUNSPECIFIED,
}

impl AsRef<str> for LocationPolicyLocationPreferenceEnum {
    fn as_ref(&self) -> &str {
        match *self {
            LocationPolicyLocationPreferenceEnum::ALLOW => "ALLOW",
            LocationPolicyLocationPreferenceEnum::DENY => "DENY",
            LocationPolicyLocationPreferenceEnum::PREFERENCEUNSPECIFIED => "PREFERENCE_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for LocationPolicyLocationPreferenceEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALLOW" => Ok(LocationPolicyLocationPreferenceEnum::ALLOW),
           "DENY" => Ok(LocationPolicyLocationPreferenceEnum::DENY),
           "PREFERENCE_UNSPECIFIED" => Ok(LocationPolicyLocationPreferenceEnum::PREFERENCEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a LocationPolicyLocationPreferenceEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region LogConfigCloudAuditOptionLogNameEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This is deprecated and has no effect. Do not use.
pub enum LogConfigCloudAuditOptionLogNameEnum {
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "ADMIN_ACTIVITY"
    #[serde(rename="ADMIN_ACTIVITY")]
    ADMINACTIVITY,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "DATA_ACCESS"
    #[serde(rename="DATA_ACCESS")]
    DATAACCESS,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "UNSPECIFIED_LOG_NAME"
    #[serde(rename="UNSPECIFIED_LOG_NAME")]
    UNSPECIFIEDLOGNAME,
}

impl AsRef<str> for LogConfigCloudAuditOptionLogNameEnum {
    fn as_ref(&self) -> &str {
        match *self {
            LogConfigCloudAuditOptionLogNameEnum::ADMINACTIVITY => "ADMIN_ACTIVITY",
            LogConfigCloudAuditOptionLogNameEnum::DATAACCESS => "DATA_ACCESS",
            LogConfigCloudAuditOptionLogNameEnum::UNSPECIFIEDLOGNAME => "UNSPECIFIED_LOG_NAME",
        }
    }
}

impl std::convert::TryFrom< &str> for LogConfigCloudAuditOptionLogNameEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ADMIN_ACTIVITY" => Ok(LogConfigCloudAuditOptionLogNameEnum::ADMINACTIVITY),
           "DATA_ACCESS" => Ok(LogConfigCloudAuditOptionLogNameEnum::DATAACCESS),
           "UNSPECIFIED_LOG_NAME" => Ok(LogConfigCloudAuditOptionLogNameEnum::UNSPECIFIEDLOGNAME),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a LogConfigCloudAuditOptionLogNameEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region LogConfigDataAccessOptionLogModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This is deprecated and has no effect. Do not use.
pub enum LogConfigDataAccessOptionLogModeEnum {
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "LOG_FAIL_CLOSED"
    #[serde(rename="LOG_FAIL_CLOSED")]
    LOGFAILCLOSED,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "LOG_MODE_UNSPECIFIED"
    #[serde(rename="LOG_MODE_UNSPECIFIED")]
    LOGMODEUNSPECIFIED,
}

impl AsRef<str> for LogConfigDataAccessOptionLogModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            LogConfigDataAccessOptionLogModeEnum::LOGFAILCLOSED => "LOG_FAIL_CLOSED",
            LogConfigDataAccessOptionLogModeEnum::LOGMODEUNSPECIFIED => "LOG_MODE_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for LogConfigDataAccessOptionLogModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "LOG_FAIL_CLOSED" => Ok(LogConfigDataAccessOptionLogModeEnum::LOGFAILCLOSED),
           "LOG_MODE_UNSPECIFIED" => Ok(LogConfigDataAccessOptionLogModeEnum::LOGMODEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a LogConfigDataAccessOptionLogModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region MachineImageStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the machine image. One of the following values: INVALID, CREATING, READY, DELETING, and UPLOADING.
pub enum MachineImageStatusEnum {
    
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    
    /// "READY"
    #[serde(rename="READY")]
    READY,
    
    /// "UPLOADING"
    #[serde(rename="UPLOADING")]
    UPLOADING,
}

impl AsRef<str> for MachineImageStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            MachineImageStatusEnum::CREATING => "CREATING",
            MachineImageStatusEnum::DELETING => "DELETING",
            MachineImageStatusEnum::INVALID => "INVALID",
            MachineImageStatusEnum::READY => "READY",
            MachineImageStatusEnum::UPLOADING => "UPLOADING",
        }
    }
}

impl std::convert::TryFrom< &str> for MachineImageStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(MachineImageStatusEnum::CREATING),
           "DELETING" => Ok(MachineImageStatusEnum::DELETING),
           "INVALID" => Ok(MachineImageStatusEnum::INVALID),
           "READY" => Ok(MachineImageStatusEnum::READY),
           "UPLOADING" => Ok(MachineImageStatusEnum::UPLOADING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a MachineImageStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ManagedInstanceCurrentActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The current action that the managed instance group has scheduled for the instance. Possible values: - NONE The instance is running, and the managed instance group does not have any scheduled actions for this instance. - CREATING The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful. - CREATING_WITHOUT_RETRIES The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group's targetSize value is decreased instead. - RECREATING The managed instance group is recreating this instance. - DELETING The managed instance group is permanently deleting this instance. - ABANDONING The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group. - RESTARTING The managed instance group is restarting the instance. - REFRESHING The managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance. - VERIFYING The managed instance group has created the instance and it is in the process of being verified. 
pub enum ManagedInstanceCurrentActionEnum {
    

    /// The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group.
    ///
    /// "ABANDONING"
    #[serde(rename="ABANDONING")]
    ABANDONING,
    

    /// The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful.
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group's targetSize value is decreased.
    ///
    /// "CREATING_WITHOUT_RETRIES"
    #[serde(rename="CREATING_WITHOUT_RETRIES")]
    CREATINGWITHOUTRETRIES,
    

    /// The managed instance group is permanently deleting this instance.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// The managed instance group has not scheduled any actions for this instance.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// The managed instance group is recreating this instance.
    ///
    /// "RECREATING"
    #[serde(rename="RECREATING")]
    RECREATING,
    

    /// The managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance.
    ///
    /// "REFRESHING"
    #[serde(rename="REFRESHING")]
    REFRESHING,
    

    /// The managed instance group is restarting this instance.
    ///
    /// "RESTARTING"
    #[serde(rename="RESTARTING")]
    RESTARTING,
    

    /// The managed instance group is resuming this instance.
    ///
    /// "RESUMING"
    #[serde(rename="RESUMING")]
    RESUMING,
    

    /// The managed instance group is starting this instance.
    ///
    /// "STARTING"
    #[serde(rename="STARTING")]
    STARTING,
    

    /// The managed instance group is stopping this instance.
    ///
    /// "STOPPING"
    #[serde(rename="STOPPING")]
    STOPPING,
    

    /// The managed instance group is suspending this instance.
    ///
    /// "SUSPENDING"
    #[serde(rename="SUSPENDING")]
    SUSPENDING,
    

    /// The managed instance group is verifying this already created instance. Verification happens every time the instance is (re)created or restarted and consists of: 1. Waiting until health check specified as part of this managed instance group's autohealing policy reports HEALTHY. Note: Applies only if autohealing policy has a health check specified 2. Waiting for addition verification steps performed as post-instance creation (subject to future extensions).
    ///
    /// "VERIFYING"
    #[serde(rename="VERIFYING")]
    VERIFYING,
}

impl AsRef<str> for ManagedInstanceCurrentActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ManagedInstanceCurrentActionEnum::ABANDONING => "ABANDONING",
            ManagedInstanceCurrentActionEnum::CREATING => "CREATING",
            ManagedInstanceCurrentActionEnum::CREATINGWITHOUTRETRIES => "CREATING_WITHOUT_RETRIES",
            ManagedInstanceCurrentActionEnum::DELETING => "DELETING",
            ManagedInstanceCurrentActionEnum::NONE => "NONE",
            ManagedInstanceCurrentActionEnum::RECREATING => "RECREATING",
            ManagedInstanceCurrentActionEnum::REFRESHING => "REFRESHING",
            ManagedInstanceCurrentActionEnum::RESTARTING => "RESTARTING",
            ManagedInstanceCurrentActionEnum::RESUMING => "RESUMING",
            ManagedInstanceCurrentActionEnum::STARTING => "STARTING",
            ManagedInstanceCurrentActionEnum::STOPPING => "STOPPING",
            ManagedInstanceCurrentActionEnum::SUSPENDING => "SUSPENDING",
            ManagedInstanceCurrentActionEnum::VERIFYING => "VERIFYING",
        }
    }
}

impl std::convert::TryFrom< &str> for ManagedInstanceCurrentActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ABANDONING" => Ok(ManagedInstanceCurrentActionEnum::ABANDONING),
           "CREATING" => Ok(ManagedInstanceCurrentActionEnum::CREATING),
           "CREATING_WITHOUT_RETRIES" => Ok(ManagedInstanceCurrentActionEnum::CREATINGWITHOUTRETRIES),
           "DELETING" => Ok(ManagedInstanceCurrentActionEnum::DELETING),
           "NONE" => Ok(ManagedInstanceCurrentActionEnum::NONE),
           "RECREATING" => Ok(ManagedInstanceCurrentActionEnum::RECREATING),
           "REFRESHING" => Ok(ManagedInstanceCurrentActionEnum::REFRESHING),
           "RESTARTING" => Ok(ManagedInstanceCurrentActionEnum::RESTARTING),
           "RESUMING" => Ok(ManagedInstanceCurrentActionEnum::RESUMING),
           "STARTING" => Ok(ManagedInstanceCurrentActionEnum::STARTING),
           "STOPPING" => Ok(ManagedInstanceCurrentActionEnum::STOPPING),
           "SUSPENDING" => Ok(ManagedInstanceCurrentActionEnum::SUSPENDING),
           "VERIFYING" => Ok(ManagedInstanceCurrentActionEnum::VERIFYING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ManagedInstanceCurrentActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ManagedInstanceInstanceStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the instance. This field is empty when the instance does not exist.
pub enum ManagedInstanceInstanceStatusEnum {
    

    /// The instance is halted and we are performing tear down tasks like network deprogramming, releasing quota, IP, tearing down disks etc.
    ///
    /// "DEPROVISIONING"
    #[serde(rename="DEPROVISIONING")]
    DEPROVISIONING,
    

    /// Resources are being allocated for the instance.
    ///
    /// "PROVISIONING"
    #[serde(rename="PROVISIONING")]
    PROVISIONING,
    

    /// The instance is in repair.
    ///
    /// "REPAIRING"
    #[serde(rename="REPAIRING")]
    REPAIRING,
    

    /// The instance is running.
    ///
    /// "RUNNING"
    #[serde(rename="RUNNING")]
    RUNNING,
    

    /// All required resources have been allocated and the instance is being started.
    ///
    /// "STAGING"
    #[serde(rename="STAGING")]
    STAGING,
    

    /// The instance has stopped successfully.
    ///
    /// "STOPPED"
    #[serde(rename="STOPPED")]
    STOPPED,
    

    /// The instance is currently stopping (either being deleted or killed).
    ///
    /// "STOPPING"
    #[serde(rename="STOPPING")]
    STOPPING,
    

    /// The instance has suspended.
    ///
    /// "SUSPENDED"
    #[serde(rename="SUSPENDED")]
    SUSPENDED,
    

    /// The instance is suspending.
    ///
    /// "SUSPENDING"
    #[serde(rename="SUSPENDING")]
    SUSPENDING,
    

    /// The instance has stopped (either by explicit action or underlying failure).
    ///
    /// "TERMINATED"
    #[serde(rename="TERMINATED")]
    TERMINATED,
}

impl AsRef<str> for ManagedInstanceInstanceStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ManagedInstanceInstanceStatusEnum::DEPROVISIONING => "DEPROVISIONING",
            ManagedInstanceInstanceStatusEnum::PROVISIONING => "PROVISIONING",
            ManagedInstanceInstanceStatusEnum::REPAIRING => "REPAIRING",
            ManagedInstanceInstanceStatusEnum::RUNNING => "RUNNING",
            ManagedInstanceInstanceStatusEnum::STAGING => "STAGING",
            ManagedInstanceInstanceStatusEnum::STOPPED => "STOPPED",
            ManagedInstanceInstanceStatusEnum::STOPPING => "STOPPING",
            ManagedInstanceInstanceStatusEnum::SUSPENDED => "SUSPENDED",
            ManagedInstanceInstanceStatusEnum::SUSPENDING => "SUSPENDING",
            ManagedInstanceInstanceStatusEnum::TERMINATED => "TERMINATED",
        }
    }
}

impl std::convert::TryFrom< &str> for ManagedInstanceInstanceStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DEPROVISIONING" => Ok(ManagedInstanceInstanceStatusEnum::DEPROVISIONING),
           "PROVISIONING" => Ok(ManagedInstanceInstanceStatusEnum::PROVISIONING),
           "REPAIRING" => Ok(ManagedInstanceInstanceStatusEnum::REPAIRING),
           "RUNNING" => Ok(ManagedInstanceInstanceStatusEnum::RUNNING),
           "STAGING" => Ok(ManagedInstanceInstanceStatusEnum::STAGING),
           "STOPPED" => Ok(ManagedInstanceInstanceStatusEnum::STOPPED),
           "STOPPING" => Ok(ManagedInstanceInstanceStatusEnum::STOPPING),
           "SUSPENDED" => Ok(ManagedInstanceInstanceStatusEnum::SUSPENDED),
           "SUSPENDING" => Ok(ManagedInstanceInstanceStatusEnum::SUSPENDING),
           "TERMINATED" => Ok(ManagedInstanceInstanceStatusEnum::TERMINATED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ManagedInstanceInstanceStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ManagedInstanceInstanceHealthDetailedHealthStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The current detailed instance health state.
pub enum ManagedInstanceInstanceHealthDetailedHealthStateEnum {
    

    /// The instance is being drained. The existing connections to the instance have time to complete, but the new ones are being refused.
    ///
    /// "DRAINING"
    #[serde(rename="DRAINING")]
    DRAINING,
    

    /// The instance is reachable i.e. a connection to the application health checking endpoint can be established, and conforms to the requirements defined by the health check.
    ///
    /// "HEALTHY"
    #[serde(rename="HEALTHY")]
    HEALTHY,
    

    /// The instance is unreachable i.e. a connection to the application health checking endpoint cannot be established, or the server does not respond within the specified timeout.
    ///
    /// "TIMEOUT"
    #[serde(rename="TIMEOUT")]
    TIMEOUT,
    

    /// The instance is reachable, but does not conform to the requirements defined by the health check.
    ///
    /// "UNHEALTHY"
    #[serde(rename="UNHEALTHY")]
    UNHEALTHY,
    

    /// The health checking system is aware of the instance but its health is not known at the moment.
    ///
    /// "UNKNOWN"
    #[serde(rename="UNKNOWN")]
    UNKNOWN,
}

impl AsRef<str> for ManagedInstanceInstanceHealthDetailedHealthStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ManagedInstanceInstanceHealthDetailedHealthStateEnum::DRAINING => "DRAINING",
            ManagedInstanceInstanceHealthDetailedHealthStateEnum::HEALTHY => "HEALTHY",
            ManagedInstanceInstanceHealthDetailedHealthStateEnum::TIMEOUT => "TIMEOUT",
            ManagedInstanceInstanceHealthDetailedHealthStateEnum::UNHEALTHY => "UNHEALTHY",
            ManagedInstanceInstanceHealthDetailedHealthStateEnum::UNKNOWN => "UNKNOWN",
        }
    }
}

impl std::convert::TryFrom< &str> for ManagedInstanceInstanceHealthDetailedHealthStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DRAINING" => Ok(ManagedInstanceInstanceHealthDetailedHealthStateEnum::DRAINING),
           "HEALTHY" => Ok(ManagedInstanceInstanceHealthDetailedHealthStateEnum::HEALTHY),
           "TIMEOUT" => Ok(ManagedInstanceInstanceHealthDetailedHealthStateEnum::TIMEOUT),
           "UNHEALTHY" => Ok(ManagedInstanceInstanceHealthDetailedHealthStateEnum::UNHEALTHY),
           "UNKNOWN" => Ok(ManagedInstanceInstanceHealthDetailedHealthStateEnum::UNKNOWN),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ManagedInstanceInstanceHealthDetailedHealthStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region MetadataFilterFilterMatchCriteriaEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies how individual filter label matches within the list of filterLabels and contributes toward the overall metadataFilter match. Supported values are: - MATCH_ANY: at least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: all filterLabels must have matching labels in the provided metadata. 
pub enum MetadataFilterFilterMatchCriteriaEnum {
    

    /// Specifies that all filterLabels must match for the metadataFilter to be considered a match.
    ///
    /// "MATCH_ALL"
    #[serde(rename="MATCH_ALL")]
    MATCHALL,
    

    /// Specifies that any filterLabel must match for the metadataFilter to be considered a match.
    ///
    /// "MATCH_ANY"
    #[serde(rename="MATCH_ANY")]
    MATCHANY,
    

    /// Indicates that the match criteria was not set. A metadataFilter must never be created with this value.
    ///
    /// "NOT_SET"
    #[serde(rename="NOT_SET")]
    NOTSET,
}

impl AsRef<str> for MetadataFilterFilterMatchCriteriaEnum {
    fn as_ref(&self) -> &str {
        match *self {
            MetadataFilterFilterMatchCriteriaEnum::MATCHALL => "MATCH_ALL",
            MetadataFilterFilterMatchCriteriaEnum::MATCHANY => "MATCH_ANY",
            MetadataFilterFilterMatchCriteriaEnum::NOTSET => "NOT_SET",
        }
    }
}

impl std::convert::TryFrom< &str> for MetadataFilterFilterMatchCriteriaEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "MATCH_ALL" => Ok(MetadataFilterFilterMatchCriteriaEnum::MATCHALL),
           "MATCH_ANY" => Ok(MetadataFilterFilterMatchCriteriaEnum::MATCHANY),
           "NOT_SET" => Ok(MetadataFilterFilterMatchCriteriaEnum::NOTSET),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a MetadataFilterFilterMatchCriteriaEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NatIpInfoNatIpInfoMappingModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies whether NAT IP is auto or manual.
pub enum NatIpInfoNatIpInfoMappingModeEnum {
    
    /// "AUTO"
    #[serde(rename="AUTO")]
    AUTO,
    
    /// "MANUAL"
    #[serde(rename="MANUAL")]
    MANUAL,
}

impl AsRef<str> for NatIpInfoNatIpInfoMappingModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NatIpInfoNatIpInfoMappingModeEnum::AUTO => "AUTO",
            NatIpInfoNatIpInfoMappingModeEnum::MANUAL => "MANUAL",
        }
    }
}

impl std::convert::TryFrom< &str> for NatIpInfoNatIpInfoMappingModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AUTO" => Ok(NatIpInfoNatIpInfoMappingModeEnum::AUTO),
           "MANUAL" => Ok(NatIpInfoNatIpInfoMappingModeEnum::MANUAL),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NatIpInfoNatIpInfoMappingModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NatIpInfoNatIpInfoMappingUsageEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies whether NAT IP is currently serving at least one endpoint or not.
pub enum NatIpInfoNatIpInfoMappingUsageEnum {
    
    /// "IN_USE"
    #[serde(rename="IN_USE")]
    INUSE,
    
    /// "UNUSED"
    #[serde(rename="UNUSED")]
    UNUSED,
}

impl AsRef<str> for NatIpInfoNatIpInfoMappingUsageEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NatIpInfoNatIpInfoMappingUsageEnum::INUSE => "IN_USE",
            NatIpInfoNatIpInfoMappingUsageEnum::UNUSED => "UNUSED",
        }
    }
}

impl std::convert::TryFrom< &str> for NatIpInfoNatIpInfoMappingUsageEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IN_USE" => Ok(NatIpInfoNatIpInfoMappingUsageEnum::INUSE),
           "UNUSED" => Ok(NatIpInfoNatIpInfoMappingUsageEnum::UNUSED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NatIpInfoNatIpInfoMappingUsageEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkNetworkFirewallPolicyEnforcementOrderEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The network firewall policy enforcement order. Can be either AFTER_CLASSIC_FIREWALL or BEFORE_CLASSIC_FIREWALL. Defaults to AFTER_CLASSIC_FIREWALL if the field is not specified.
pub enum NetworkNetworkFirewallPolicyEnforcementOrderEnum {
    
    /// "AFTER_CLASSIC_FIREWALL"
    #[serde(rename="AFTER_CLASSIC_FIREWALL")]
    AFTERCLASSICFIREWALL,
    
    /// "BEFORE_CLASSIC_FIREWALL"
    #[serde(rename="BEFORE_CLASSIC_FIREWALL")]
    BEFORECLASSICFIREWALL,
}

impl AsRef<str> for NetworkNetworkFirewallPolicyEnforcementOrderEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkNetworkFirewallPolicyEnforcementOrderEnum::AFTERCLASSICFIREWALL => "AFTER_CLASSIC_FIREWALL",
            NetworkNetworkFirewallPolicyEnforcementOrderEnum::BEFORECLASSICFIREWALL => "BEFORE_CLASSIC_FIREWALL",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkNetworkFirewallPolicyEnforcementOrderEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AFTER_CLASSIC_FIREWALL" => Ok(NetworkNetworkFirewallPolicyEnforcementOrderEnum::AFTERCLASSICFIREWALL),
           "BEFORE_CLASSIC_FIREWALL" => Ok(NetworkNetworkFirewallPolicyEnforcementOrderEnum::BEFORECLASSICFIREWALL),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkNetworkFirewallPolicyEnforcementOrderEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkAttachmentConnectionPreferenceEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum NetworkAttachmentConnectionPreferenceEnum {
    
    /// "ACCEPT_AUTOMATIC"
    #[serde(rename="ACCEPT_AUTOMATIC")]
    ACCEPTAUTOMATIC,
    
    /// "ACCEPT_MANUAL"
    #[serde(rename="ACCEPT_MANUAL")]
    ACCEPTMANUAL,
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
}

impl AsRef<str> for NetworkAttachmentConnectionPreferenceEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkAttachmentConnectionPreferenceEnum::ACCEPTAUTOMATIC => "ACCEPT_AUTOMATIC",
            NetworkAttachmentConnectionPreferenceEnum::ACCEPTMANUAL => "ACCEPT_MANUAL",
            NetworkAttachmentConnectionPreferenceEnum::INVALID => "INVALID",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkAttachmentConnectionPreferenceEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACCEPT_AUTOMATIC" => Ok(NetworkAttachmentConnectionPreferenceEnum::ACCEPTAUTOMATIC),
           "ACCEPT_MANUAL" => Ok(NetworkAttachmentConnectionPreferenceEnum::ACCEPTMANUAL),
           "INVALID" => Ok(NetworkAttachmentConnectionPreferenceEnum::INVALID),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkAttachmentConnectionPreferenceEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkAttachmentConnectedEndpointStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The status of a connected endpoint to this network attachment.
pub enum NetworkAttachmentConnectedEndpointStatusEnum {
    

    /// The consumer allows traffic from the producer to reach its VPC.
    ///
    /// "ACCEPTED"
    #[serde(rename="ACCEPTED")]
    ACCEPTED,
    

    /// The consumer network attachment no longer exists.
    ///
    /// "CLOSED"
    #[serde(rename="CLOSED")]
    CLOSED,
    

    /// The consumer needs to take further action before traffic can be served.
    ///
    /// "NEEDS_ATTENTION"
    #[serde(rename="NEEDS_ATTENTION")]
    NEEDSATTENTION,
    

    /// The consumer neither allows nor prohibits traffic from the producer to reach its VPC.
    ///
    /// "PENDING"
    #[serde(rename="PENDING")]
    PENDING,
    

    /// The consumer prohibits traffic from the producer to reach its VPC.
    ///
    /// "REJECTED"
    #[serde(rename="REJECTED")]
    REJECTED,
    
    /// "STATUS_UNSPECIFIED"
    #[serde(rename="STATUS_UNSPECIFIED")]
    STATUSUNSPECIFIED,
}

impl AsRef<str> for NetworkAttachmentConnectedEndpointStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkAttachmentConnectedEndpointStatusEnum::ACCEPTED => "ACCEPTED",
            NetworkAttachmentConnectedEndpointStatusEnum::CLOSED => "CLOSED",
            NetworkAttachmentConnectedEndpointStatusEnum::NEEDSATTENTION => "NEEDS_ATTENTION",
            NetworkAttachmentConnectedEndpointStatusEnum::PENDING => "PENDING",
            NetworkAttachmentConnectedEndpointStatusEnum::REJECTED => "REJECTED",
            NetworkAttachmentConnectedEndpointStatusEnum::STATUSUNSPECIFIED => "STATUS_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkAttachmentConnectedEndpointStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACCEPTED" => Ok(NetworkAttachmentConnectedEndpointStatusEnum::ACCEPTED),
           "CLOSED" => Ok(NetworkAttachmentConnectedEndpointStatusEnum::CLOSED),
           "NEEDS_ATTENTION" => Ok(NetworkAttachmentConnectedEndpointStatusEnum::NEEDSATTENTION),
           "PENDING" => Ok(NetworkAttachmentConnectedEndpointStatusEnum::PENDING),
           "REJECTED" => Ok(NetworkAttachmentConnectedEndpointStatusEnum::REJECTED),
           "STATUS_UNSPECIFIED" => Ok(NetworkAttachmentConnectedEndpointStatusEnum::STATUSUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkAttachmentConnectedEndpointStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkEndpointGroupNetworkEndpointTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, SERVERLESS, PRIVATE_SERVICE_CONNECT, GCE_VM_IP_PORTMAP.
pub enum NetworkEndpointGroupNetworkEndpointTypeEnum {
    

    /// The network endpoint is represented by an IP address.
    ///
    /// "GCE_VM_IP"
    #[serde(rename="GCE_VM_IP")]
    GCEVMIP,
    

    /// The network endpoint is represented by IP address and port pair.
    ///
    /// "GCE_VM_IP_PORT"
    #[serde(rename="GCE_VM_IP_PORT")]
    GCEVMIPPORT,
    

    /// The network endpoint is represented by fully qualified domain name and port.
    ///
    /// "INTERNET_FQDN_PORT"
    #[serde(rename="INTERNET_FQDN_PORT")]
    INTERNETFQDNPORT,
    

    /// The network endpoint is represented by an internet IP address and port.
    ///
    /// "INTERNET_IP_PORT"
    #[serde(rename="INTERNET_IP_PORT")]
    INTERNETIPPORT,
    

    /// The network endpoint is represented by an IP address and port. The endpoint belongs to a VM or pod running in a customer's on-premises.
    ///
    /// "NON_GCP_PRIVATE_IP_PORT"
    #[serde(rename="NON_GCP_PRIVATE_IP_PORT")]
    NONGCPPRIVATEIPPORT,
    

    /// The network endpoint is either public Google APIs or services exposed by other GCP Project with a Service Attachment. The connection is set up by private service connect
    ///
    /// "PRIVATE_SERVICE_CONNECT"
    #[serde(rename="PRIVATE_SERVICE_CONNECT")]
    PRIVATESERVICECONNECT,
    

    /// The network endpoint is handled by specified serverless infrastructure.
    ///
    /// "SERVERLESS"
    #[serde(rename="SERVERLESS")]
    SERVERLESS,
}

impl AsRef<str> for NetworkEndpointGroupNetworkEndpointTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkEndpointGroupNetworkEndpointTypeEnum::GCEVMIP => "GCE_VM_IP",
            NetworkEndpointGroupNetworkEndpointTypeEnum::GCEVMIPPORT => "GCE_VM_IP_PORT",
            NetworkEndpointGroupNetworkEndpointTypeEnum::INTERNETFQDNPORT => "INTERNET_FQDN_PORT",
            NetworkEndpointGroupNetworkEndpointTypeEnum::INTERNETIPPORT => "INTERNET_IP_PORT",
            NetworkEndpointGroupNetworkEndpointTypeEnum::NONGCPPRIVATEIPPORT => "NON_GCP_PRIVATE_IP_PORT",
            NetworkEndpointGroupNetworkEndpointTypeEnum::PRIVATESERVICECONNECT => "PRIVATE_SERVICE_CONNECT",
            NetworkEndpointGroupNetworkEndpointTypeEnum::SERVERLESS => "SERVERLESS",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkEndpointGroupNetworkEndpointTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GCE_VM_IP" => Ok(NetworkEndpointGroupNetworkEndpointTypeEnum::GCEVMIP),
           "GCE_VM_IP_PORT" => Ok(NetworkEndpointGroupNetworkEndpointTypeEnum::GCEVMIPPORT),
           "INTERNET_FQDN_PORT" => Ok(NetworkEndpointGroupNetworkEndpointTypeEnum::INTERNETFQDNPORT),
           "INTERNET_IP_PORT" => Ok(NetworkEndpointGroupNetworkEndpointTypeEnum::INTERNETIPPORT),
           "NON_GCP_PRIVATE_IP_PORT" => Ok(NetworkEndpointGroupNetworkEndpointTypeEnum::NONGCPPRIVATEIPPORT),
           "PRIVATE_SERVICE_CONNECT" => Ok(NetworkEndpointGroupNetworkEndpointTypeEnum::PRIVATESERVICECONNECT),
           "SERVERLESS" => Ok(NetworkEndpointGroupNetworkEndpointTypeEnum::SERVERLESS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkEndpointGroupNetworkEndpointTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkEndpointGroupPscDataPscConnectionStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The connection status of the PSC Forwarding Rule.
pub enum NetworkEndpointGroupPscDataPscConnectionStatusEnum {
    

    /// The connection has been accepted by the producer.
    ///
    /// "ACCEPTED"
    #[serde(rename="ACCEPTED")]
    ACCEPTED,
    

    /// The connection has been closed by the producer and will not serve traffic going forward.
    ///
    /// "CLOSED"
    #[serde(rename="CLOSED")]
    CLOSED,
    

    /// The connection has been accepted by the producer, but the producer needs to take further action before the forwarding rule can serve traffic.
    ///
    /// "NEEDS_ATTENTION"
    #[serde(rename="NEEDS_ATTENTION")]
    NEEDSATTENTION,
    

    /// The connection is pending acceptance by the producer.
    ///
    /// "PENDING"
    #[serde(rename="PENDING")]
    PENDING,
    

    /// The connection has been rejected by the producer.
    ///
    /// "REJECTED"
    #[serde(rename="REJECTED")]
    REJECTED,
    
    /// "STATUS_UNSPECIFIED"
    #[serde(rename="STATUS_UNSPECIFIED")]
    STATUSUNSPECIFIED,
}

impl AsRef<str> for NetworkEndpointGroupPscDataPscConnectionStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkEndpointGroupPscDataPscConnectionStatusEnum::ACCEPTED => "ACCEPTED",
            NetworkEndpointGroupPscDataPscConnectionStatusEnum::CLOSED => "CLOSED",
            NetworkEndpointGroupPscDataPscConnectionStatusEnum::NEEDSATTENTION => "NEEDS_ATTENTION",
            NetworkEndpointGroupPscDataPscConnectionStatusEnum::PENDING => "PENDING",
            NetworkEndpointGroupPscDataPscConnectionStatusEnum::REJECTED => "REJECTED",
            NetworkEndpointGroupPscDataPscConnectionStatusEnum::STATUSUNSPECIFIED => "STATUS_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkEndpointGroupPscDataPscConnectionStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACCEPTED" => Ok(NetworkEndpointGroupPscDataPscConnectionStatusEnum::ACCEPTED),
           "CLOSED" => Ok(NetworkEndpointGroupPscDataPscConnectionStatusEnum::CLOSED),
           "NEEDS_ATTENTION" => Ok(NetworkEndpointGroupPscDataPscConnectionStatusEnum::NEEDSATTENTION),
           "PENDING" => Ok(NetworkEndpointGroupPscDataPscConnectionStatusEnum::PENDING),
           "REJECTED" => Ok(NetworkEndpointGroupPscDataPscConnectionStatusEnum::REJECTED),
           "STATUS_UNSPECIFIED" => Ok(NetworkEndpointGroupPscDataPscConnectionStatusEnum::STATUSUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkEndpointGroupPscDataPscConnectionStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Optional query parameter for showing the health status of each network endpoint. Valid options are SKIP or SHOW. If you don't specify this parameter, the health status of network endpoints will not be provided.
pub enum NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum {
    

    /// Show the health status for each network endpoint. Impacts latency of the call.
    ///
    /// "SHOW"
    #[serde(rename="SHOW")]
    SHOW,
    

    /// Health status for network endpoints will not be provided.
    ///
    /// "SKIP"
    #[serde(rename="SKIP")]
    SKIP,
}

impl AsRef<str> for NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum::SHOW => "SHOW",
            NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum::SKIP => "SKIP",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "SHOW" => Ok(NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum::SHOW),
           "SKIP" => Ok(NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum::SKIP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkInterfaceIpv6AccessTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
pub enum NetworkInterfaceIpv6AccessTypeEnum {
    

    /// This network interface can have external IPv6.
    ///
    /// "EXTERNAL"
    #[serde(rename="EXTERNAL")]
    EXTERNAL,
    

    /// This network interface can have internal IPv6.
    ///
    /// "INTERNAL"
    #[serde(rename="INTERNAL")]
    INTERNAL,
}

impl AsRef<str> for NetworkInterfaceIpv6AccessTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkInterfaceIpv6AccessTypeEnum::EXTERNAL => "EXTERNAL",
            NetworkInterfaceIpv6AccessTypeEnum::INTERNAL => "INTERNAL",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkInterfaceIpv6AccessTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EXTERNAL" => Ok(NetworkInterfaceIpv6AccessTypeEnum::EXTERNAL),
           "INTERNAL" => Ok(NetworkInterfaceIpv6AccessTypeEnum::INTERNAL),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkInterfaceIpv6AccessTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkInterfaceNicTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
pub enum NetworkInterfaceNicTypeEnum {
    

    /// GVNIC
    ///
    /// "GVNIC"
    #[serde(rename="GVNIC")]
    GVNIC,
    

    /// No type specified.
    ///
    /// "UNSPECIFIED_NIC_TYPE"
    #[serde(rename="UNSPECIFIED_NIC_TYPE")]
    UNSPECIFIEDNICTYPE,
    

    /// VIRTIO
    ///
    /// "VIRTIO_NET"
    #[serde(rename="VIRTIO_NET")]
    VIRTIONET,
}

impl AsRef<str> for NetworkInterfaceNicTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkInterfaceNicTypeEnum::GVNIC => "GVNIC",
            NetworkInterfaceNicTypeEnum::UNSPECIFIEDNICTYPE => "UNSPECIFIED_NIC_TYPE",
            NetworkInterfaceNicTypeEnum::VIRTIONET => "VIRTIO_NET",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkInterfaceNicTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GVNIC" => Ok(NetworkInterfaceNicTypeEnum::GVNIC),
           "UNSPECIFIED_NIC_TYPE" => Ok(NetworkInterfaceNicTypeEnum::UNSPECIFIEDNICTYPE),
           "VIRTIO_NET" => Ok(NetworkInterfaceNicTypeEnum::VIRTIONET),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkInterfaceNicTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkInterfaceStackTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The stack type for this network interface. To assign only IPv4 addresses, use IPV4_ONLY. To assign both IPv4 and IPv6 addresses, use IPV4_IPV6. If not specified, IPV4_ONLY is used. This field can be both set at instance creation and update network interface operations.
pub enum NetworkInterfaceStackTypeEnum {
    

    /// The network interface can have both IPv4 and IPv6 addresses.
    ///
    /// "IPV4_IPV6"
    #[serde(rename="IPV4_IPV6")]
    IPV4IPV6,
    

    /// The network interface will be assigned IPv4 address.
    ///
    /// "IPV4_ONLY"
    #[serde(rename="IPV4_ONLY")]
    IPV4ONLY,
}

impl AsRef<str> for NetworkInterfaceStackTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkInterfaceStackTypeEnum::IPV4IPV6 => "IPV4_IPV6",
            NetworkInterfaceStackTypeEnum::IPV4ONLY => "IPV4_ONLY",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkInterfaceStackTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPV4_IPV6" => Ok(NetworkInterfaceStackTypeEnum::IPV4IPV6),
           "IPV4_ONLY" => Ok(NetworkInterfaceStackTypeEnum::IPV4ONLY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkInterfaceStackTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkPeeringStackTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY.
pub enum NetworkPeeringStackTypeEnum {
    

    /// This Peering will allow IPv4 traffic and routes to be exchanged. Additionally if the matching peering is IPV4_IPV6, IPv6 traffic and routes will be exchanged as well.
    ///
    /// "IPV4_IPV6"
    #[serde(rename="IPV4_IPV6")]
    IPV4IPV6,
    

    /// This Peering will only allow IPv4 traffic and routes to be exchanged, even if the matching peering is IPV4_IPV6.
    ///
    /// "IPV4_ONLY"
    #[serde(rename="IPV4_ONLY")]
    IPV4ONLY,
}

impl AsRef<str> for NetworkPeeringStackTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkPeeringStackTypeEnum::IPV4IPV6 => "IPV4_IPV6",
            NetworkPeeringStackTypeEnum::IPV4ONLY => "IPV4_ONLY",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkPeeringStackTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPV4_IPV6" => Ok(NetworkPeeringStackTypeEnum::IPV4IPV6),
           "IPV4_ONLY" => Ok(NetworkPeeringStackTypeEnum::IPV4ONLY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkPeeringStackTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkPeeringStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
pub enum NetworkPeeringStateEnum {
    

    /// Matching configuration exists on the peer.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// There is no matching configuration on the peer, including the case when peer does not exist.
    ///
    /// "INACTIVE"
    #[serde(rename="INACTIVE")]
    INACTIVE,
}

impl AsRef<str> for NetworkPeeringStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkPeeringStateEnum::ACTIVE => "ACTIVE",
            NetworkPeeringStateEnum::INACTIVE => "INACTIVE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkPeeringStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(NetworkPeeringStateEnum::ACTIVE),
           "INACTIVE" => Ok(NetworkPeeringStateEnum::INACTIVE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkPeeringStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkPerformanceConfigTotalEgressBandwidthTierEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum NetworkPerformanceConfigTotalEgressBandwidthTierEnum {
    
    /// "DEFAULT"
    #[serde(rename="DEFAULT")]
    DEFAULT,
    
    /// "TIER_1"
    #[serde(rename="TIER_1")]
    TIER1,
}

impl AsRef<str> for NetworkPerformanceConfigTotalEgressBandwidthTierEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkPerformanceConfigTotalEgressBandwidthTierEnum::DEFAULT => "DEFAULT",
            NetworkPerformanceConfigTotalEgressBandwidthTierEnum::TIER1 => "TIER_1",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkPerformanceConfigTotalEgressBandwidthTierEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DEFAULT" => Ok(NetworkPerformanceConfigTotalEgressBandwidthTierEnum::DEFAULT),
           "TIER_1" => Ok(NetworkPerformanceConfigTotalEgressBandwidthTierEnum::TIER1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkPerformanceConfigTotalEgressBandwidthTierEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkRoutingConfigRoutingModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
pub enum NetworkRoutingConfigRoutingModeEnum {
    
    /// "GLOBAL"
    #[serde(rename="GLOBAL")]
    GLOBAL,
    
    /// "REGIONAL"
    #[serde(rename="REGIONAL")]
    REGIONAL,
}

impl AsRef<str> for NetworkRoutingConfigRoutingModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkRoutingConfigRoutingModeEnum::GLOBAL => "GLOBAL",
            NetworkRoutingConfigRoutingModeEnum::REGIONAL => "REGIONAL",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkRoutingConfigRoutingModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GLOBAL" => Ok(NetworkRoutingConfigRoutingModeEnum::GLOBAL),
           "REGIONAL" => Ok(NetworkRoutingConfigRoutingModeEnum::REGIONAL),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkRoutingConfigRoutingModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The type of the firewall policy.
pub enum NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    
    /// "HIERARCHY"
    #[serde(rename="HIERARCHY")]
    HIERARCHY,
    
    /// "NETWORK"
    #[serde(rename="NETWORK")]
    NETWORK,
    
    /// "UNSPECIFIED"
    #[serde(rename="UNSPECIFIED")]
    UNSPECIFIED,
}

impl AsRef<str> for NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::HIERARCHY => "HIERARCHY",
            NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::NETWORK => "NETWORK",
            NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::UNSPECIFIED => "UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "HIERARCHY" => Ok(NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::HIERARCHY),
           "NETWORK" => Ok(NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::NETWORK),
           "UNSPECIFIED" => Ok(NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::UNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeGroupMaintenancePolicyEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT. For more information, see Maintenance policies.
pub enum NodeGroupMaintenancePolicyEnum {
    

    /// Allow the node and corresponding instances to retain default maintenance behavior.
    ///
    /// "DEFAULT"
    #[serde(rename="DEFAULT")]
    DEFAULT,
    
    /// "MAINTENANCE_POLICY_UNSPECIFIED"
    #[serde(rename="MAINTENANCE_POLICY_UNSPECIFIED")]
    MAINTENANCEPOLICYUNSPECIFIED,
    

    /// When maintenance must be done on a node, the instances on that node will be moved to other nodes in the group. Instances with onHostMaintenance = MIGRATE will live migrate to their destinations while instances with onHostMaintenance = TERMINATE will terminate and then restart on their destination nodes if automaticRestart = true.
    ///
    /// "MIGRATE_WITHIN_NODE_GROUP"
    #[serde(rename="MIGRATE_WITHIN_NODE_GROUP")]
    MIGRATEWITHINNODEGROUP,
    

    /// Instances in this group will restart on the same node when maintenance has completed. Instances must have onHostMaintenance = TERMINATE, and they will only restart if automaticRestart = true.
    ///
    /// "RESTART_IN_PLACE"
    #[serde(rename="RESTART_IN_PLACE")]
    RESTARTINPLACE,
}

impl AsRef<str> for NodeGroupMaintenancePolicyEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeGroupMaintenancePolicyEnum::DEFAULT => "DEFAULT",
            NodeGroupMaintenancePolicyEnum::MAINTENANCEPOLICYUNSPECIFIED => "MAINTENANCE_POLICY_UNSPECIFIED",
            NodeGroupMaintenancePolicyEnum::MIGRATEWITHINNODEGROUP => "MIGRATE_WITHIN_NODE_GROUP",
            NodeGroupMaintenancePolicyEnum::RESTARTINPLACE => "RESTART_IN_PLACE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeGroupMaintenancePolicyEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DEFAULT" => Ok(NodeGroupMaintenancePolicyEnum::DEFAULT),
           "MAINTENANCE_POLICY_UNSPECIFIED" => Ok(NodeGroupMaintenancePolicyEnum::MAINTENANCEPOLICYUNSPECIFIED),
           "MIGRATE_WITHIN_NODE_GROUP" => Ok(NodeGroupMaintenancePolicyEnum::MIGRATEWITHINNODEGROUP),
           "RESTART_IN_PLACE" => Ok(NodeGroupMaintenancePolicyEnum::RESTARTINPLACE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeGroupMaintenancePolicyEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeGroupStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum NodeGroupStatusEnum {
    
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    
    /// "READY"
    #[serde(rename="READY")]
    READY,
}

impl AsRef<str> for NodeGroupStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeGroupStatusEnum::CREATING => "CREATING",
            NodeGroupStatusEnum::DELETING => "DELETING",
            NodeGroupStatusEnum::INVALID => "INVALID",
            NodeGroupStatusEnum::READY => "READY",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeGroupStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(NodeGroupStatusEnum::CREATING),
           "DELETING" => Ok(NodeGroupStatusEnum::DELETING),
           "INVALID" => Ok(NodeGroupStatusEnum::INVALID),
           "READY" => Ok(NodeGroupStatusEnum::READY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeGroupStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeGroupAutoscalingPolicyModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
pub enum NodeGroupAutoscalingPolicyModeEnum {
    
    /// "MODE_UNSPECIFIED"
    #[serde(rename="MODE_UNSPECIFIED")]
    MODEUNSPECIFIED,
    

    /// Autoscaling is disabled.
    ///
    /// "OFF"
    #[serde(rename="OFF")]
    OFF,
    

    /// Autocaling is fully enabled.
    ///
    /// "ON"
    #[serde(rename="ON")]
    ON,
    

    /// Autoscaling will only scale out and will not remove nodes.
    ///
    /// "ONLY_SCALE_OUT"
    #[serde(rename="ONLY_SCALE_OUT")]
    ONLYSCALEOUT,
}

impl AsRef<str> for NodeGroupAutoscalingPolicyModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeGroupAutoscalingPolicyModeEnum::MODEUNSPECIFIED => "MODE_UNSPECIFIED",
            NodeGroupAutoscalingPolicyModeEnum::OFF => "OFF",
            NodeGroupAutoscalingPolicyModeEnum::ON => "ON",
            NodeGroupAutoscalingPolicyModeEnum::ONLYSCALEOUT => "ONLY_SCALE_OUT",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeGroupAutoscalingPolicyModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "MODE_UNSPECIFIED" => Ok(NodeGroupAutoscalingPolicyModeEnum::MODEUNSPECIFIED),
           "OFF" => Ok(NodeGroupAutoscalingPolicyModeEnum::OFF),
           "ON" => Ok(NodeGroupAutoscalingPolicyModeEnum::ON),
           "ONLY_SCALE_OUT" => Ok(NodeGroupAutoscalingPolicyModeEnum::ONLYSCALEOUT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeGroupAutoscalingPolicyModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeGroupNodeCpuOvercommitTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// CPU overcommit.
pub enum NodeGroupNodeCpuOvercommitTypeEnum {
    
    /// "CPU_OVERCOMMIT_TYPE_UNSPECIFIED"
    #[serde(rename="CPU_OVERCOMMIT_TYPE_UNSPECIFIED")]
    CPUOVERCOMMITTYPEUNSPECIFIED,
    
    /// "ENABLED"
    #[serde(rename="ENABLED")]
    ENABLED,
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
}

impl AsRef<str> for NodeGroupNodeCpuOvercommitTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeGroupNodeCpuOvercommitTypeEnum::CPUOVERCOMMITTYPEUNSPECIFIED => "CPU_OVERCOMMIT_TYPE_UNSPECIFIED",
            NodeGroupNodeCpuOvercommitTypeEnum::ENABLED => "ENABLED",
            NodeGroupNodeCpuOvercommitTypeEnum::NONE => "NONE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeGroupNodeCpuOvercommitTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CPU_OVERCOMMIT_TYPE_UNSPECIFIED" => Ok(NodeGroupNodeCpuOvercommitTypeEnum::CPUOVERCOMMITTYPEUNSPECIFIED),
           "ENABLED" => Ok(NodeGroupNodeCpuOvercommitTypeEnum::ENABLED),
           "NONE" => Ok(NodeGroupNodeCpuOvercommitTypeEnum::NONE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeGroupNodeCpuOvercommitTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeGroupNodeStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum NodeGroupNodeStatusEnum {
    
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    
    /// "READY"
    #[serde(rename="READY")]
    READY,
    
    /// "REPAIRING"
    #[serde(rename="REPAIRING")]
    REPAIRING,
}

impl AsRef<str> for NodeGroupNodeStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeGroupNodeStatusEnum::CREATING => "CREATING",
            NodeGroupNodeStatusEnum::DELETING => "DELETING",
            NodeGroupNodeStatusEnum::INVALID => "INVALID",
            NodeGroupNodeStatusEnum::READY => "READY",
            NodeGroupNodeStatusEnum::REPAIRING => "REPAIRING",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeGroupNodeStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(NodeGroupNodeStatusEnum::CREATING),
           "DELETING" => Ok(NodeGroupNodeStatusEnum::DELETING),
           "INVALID" => Ok(NodeGroupNodeStatusEnum::INVALID),
           "READY" => Ok(NodeGroupNodeStatusEnum::READY),
           "REPAIRING" => Ok(NodeGroupNodeStatusEnum::REPAIRING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeGroupNodeStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeTemplateCpuOvercommitTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// CPU overcommit.
pub enum NodeTemplateCpuOvercommitTypeEnum {
    
    /// "CPU_OVERCOMMIT_TYPE_UNSPECIFIED"
    #[serde(rename="CPU_OVERCOMMIT_TYPE_UNSPECIFIED")]
    CPUOVERCOMMITTYPEUNSPECIFIED,
    
    /// "ENABLED"
    #[serde(rename="ENABLED")]
    ENABLED,
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
}

impl AsRef<str> for NodeTemplateCpuOvercommitTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeTemplateCpuOvercommitTypeEnum::CPUOVERCOMMITTYPEUNSPECIFIED => "CPU_OVERCOMMIT_TYPE_UNSPECIFIED",
            NodeTemplateCpuOvercommitTypeEnum::ENABLED => "ENABLED",
            NodeTemplateCpuOvercommitTypeEnum::NONE => "NONE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeTemplateCpuOvercommitTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CPU_OVERCOMMIT_TYPE_UNSPECIFIED" => Ok(NodeTemplateCpuOvercommitTypeEnum::CPUOVERCOMMITTYPEUNSPECIFIED),
           "ENABLED" => Ok(NodeTemplateCpuOvercommitTypeEnum::ENABLED),
           "NONE" => Ok(NodeTemplateCpuOvercommitTypeEnum::NONE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeTemplateCpuOvercommitTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeTemplateStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING.
pub enum NodeTemplateStatusEnum {
    

    /// Resources are being allocated.
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// The node template is currently being deleted.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// Invalid status.
    ///
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    

    /// The node template is ready.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
}

impl AsRef<str> for NodeTemplateStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeTemplateStatusEnum::CREATING => "CREATING",
            NodeTemplateStatusEnum::DELETING => "DELETING",
            NodeTemplateStatusEnum::INVALID => "INVALID",
            NodeTemplateStatusEnum::READY => "READY",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeTemplateStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(NodeTemplateStatusEnum::CREATING),
           "DELETING" => Ok(NodeTemplateStatusEnum::DELETING),
           "INVALID" => Ok(NodeTemplateStatusEnum::INVALID),
           "READY" => Ok(NodeTemplateStatusEnum::READY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeTemplateStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region OperationStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
pub enum OperationStatusEnum {
    
    /// "DONE"
    #[serde(rename="DONE")]
    DONE,
    
    /// "PENDING"
    #[serde(rename="PENDING")]
    PENDING,
    
    /// "RUNNING"
    #[serde(rename="RUNNING")]
    RUNNING,
}

impl AsRef<str> for OperationStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            OperationStatusEnum::DONE => "DONE",
            OperationStatusEnum::PENDING => "PENDING",
            OperationStatusEnum::RUNNING => "RUNNING",
        }
    }
}

impl std::convert::TryFrom< &str> for OperationStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DONE" => Ok(OperationStatusEnum::DONE),
           "PENDING" => Ok(OperationStatusEnum::PENDING),
           "RUNNING" => Ok(OperationStatusEnum::RUNNING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a OperationStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PacketIntervalDurationEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// From how long ago in the past these intervals were observed.
pub enum PacketIntervalDurationEnum {
    
    /// "DURATION_UNSPECIFIED"
    #[serde(rename="DURATION_UNSPECIFIED")]
    DURATIONUNSPECIFIED,
    
    /// "HOUR"
    #[serde(rename="HOUR")]
    HOUR,
    

    /// From BfdSession object creation time.
    ///
    /// "MAX"
    #[serde(rename="MAX")]
    MAX,
    
    /// "MINUTE"
    #[serde(rename="MINUTE")]
    MINUTE,
}

impl AsRef<str> for PacketIntervalDurationEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PacketIntervalDurationEnum::DURATIONUNSPECIFIED => "DURATION_UNSPECIFIED",
            PacketIntervalDurationEnum::HOUR => "HOUR",
            PacketIntervalDurationEnum::MAX => "MAX",
            PacketIntervalDurationEnum::MINUTE => "MINUTE",
        }
    }
}

impl std::convert::TryFrom< &str> for PacketIntervalDurationEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DURATION_UNSPECIFIED" => Ok(PacketIntervalDurationEnum::DURATIONUNSPECIFIED),
           "HOUR" => Ok(PacketIntervalDurationEnum::HOUR),
           "MAX" => Ok(PacketIntervalDurationEnum::MAX),
           "MINUTE" => Ok(PacketIntervalDurationEnum::MINUTE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PacketIntervalDurationEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PacketIntervalTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of packets for which inter-packet intervals were computed.
pub enum PacketIntervalTypeEnum {
    

    /// Only applies to Echo packets. This shows the intervals between sending and receiving the same packet.
    ///
    /// "LOOPBACK"
    #[serde(rename="LOOPBACK")]
    LOOPBACK,
    

    /// Intervals between received packets.
    ///
    /// "RECEIVE"
    #[serde(rename="RECEIVE")]
    RECEIVE,
    

    /// Intervals between transmitted packets.
    ///
    /// "TRANSMIT"
    #[serde(rename="TRANSMIT")]
    TRANSMIT,
    
    /// "TYPE_UNSPECIFIED"
    #[serde(rename="TYPE_UNSPECIFIED")]
    TYPEUNSPECIFIED,
}

impl AsRef<str> for PacketIntervalTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PacketIntervalTypeEnum::LOOPBACK => "LOOPBACK",
            PacketIntervalTypeEnum::RECEIVE => "RECEIVE",
            PacketIntervalTypeEnum::TRANSMIT => "TRANSMIT",
            PacketIntervalTypeEnum::TYPEUNSPECIFIED => "TYPE_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for PacketIntervalTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "LOOPBACK" => Ok(PacketIntervalTypeEnum::LOOPBACK),
           "RECEIVE" => Ok(PacketIntervalTypeEnum::RECEIVE),
           "TRANSMIT" => Ok(PacketIntervalTypeEnum::TRANSMIT),
           "TYPE_UNSPECIFIED" => Ok(PacketIntervalTypeEnum::TYPEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PacketIntervalTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PacketMirroringEnableEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network. The default is TRUE.
pub enum PacketMirroringEnableEnum {
    
    /// "FALSE"
    #[serde(rename="FALSE")]
    FALSE,
    
    /// "TRUE"
    #[serde(rename="TRUE")]
    TRUE,
}

impl AsRef<str> for PacketMirroringEnableEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PacketMirroringEnableEnum::FALSE => "FALSE",
            PacketMirroringEnableEnum::TRUE => "TRUE",
        }
    }
}

impl std::convert::TryFrom< &str> for PacketMirroringEnableEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FALSE" => Ok(PacketMirroringEnableEnum::FALSE),
           "TRUE" => Ok(PacketMirroringEnableEnum::TRUE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PacketMirroringEnableEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PacketMirroringFilterDirectionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
pub enum PacketMirroringFilterDirectionEnum {
    

    /// Default, both directions are mirrored.
    ///
    /// "BOTH"
    #[serde(rename="BOTH")]
    BOTH,
    

    /// Only egress traffic is mirrored.
    ///
    /// "EGRESS"
    #[serde(rename="EGRESS")]
    EGRESS,
    

    /// Only ingress traffic is mirrored.
    ///
    /// "INGRESS"
    #[serde(rename="INGRESS")]
    INGRESS,
}

impl AsRef<str> for PacketMirroringFilterDirectionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PacketMirroringFilterDirectionEnum::BOTH => "BOTH",
            PacketMirroringFilterDirectionEnum::EGRESS => "EGRESS",
            PacketMirroringFilterDirectionEnum::INGRESS => "INGRESS",
        }
    }
}

impl std::convert::TryFrom< &str> for PacketMirroringFilterDirectionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "BOTH" => Ok(PacketMirroringFilterDirectionEnum::BOTH),
           "EGRESS" => Ok(PacketMirroringFilterDirectionEnum::EGRESS),
           "INGRESS" => Ok(PacketMirroringFilterDirectionEnum::INGRESS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PacketMirroringFilterDirectionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PerInstanceConfigStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The status of applying this per-instance configuration on the corresponding managed instance.
pub enum PerInstanceConfigStatusEnum {
    

    /// The per-instance configuration is being applied to the instance, but is not yet effective, possibly waiting for the instance to, for example, REFRESH.
    ///
    /// "APPLYING"
    #[serde(rename="APPLYING")]
    APPLYING,
    

    /// The per-instance configuration deletion is being applied on the instance, possibly waiting for the instance to, for example, REFRESH.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// The per-instance configuration is effective on the instance, meaning that all disks, ips and metadata specified in this configuration are attached or set on the instance.
    ///
    /// "EFFECTIVE"
    #[serde(rename="EFFECTIVE")]
    EFFECTIVE,
    

    /// *[Default]* The default status, when no per-instance configuration exists.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// The per-instance configuration is set on an instance but not been applied yet.
    ///
    /// "UNAPPLIED"
    #[serde(rename="UNAPPLIED")]
    UNAPPLIED,
    

    /// The per-instance configuration has been deleted, but the deletion is not yet applied.
    ///
    /// "UNAPPLIED_DELETION"
    #[serde(rename="UNAPPLIED_DELETION")]
    UNAPPLIEDDELETION,
}

impl AsRef<str> for PerInstanceConfigStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PerInstanceConfigStatusEnum::APPLYING => "APPLYING",
            PerInstanceConfigStatusEnum::DELETING => "DELETING",
            PerInstanceConfigStatusEnum::EFFECTIVE => "EFFECTIVE",
            PerInstanceConfigStatusEnum::NONE => "NONE",
            PerInstanceConfigStatusEnum::UNAPPLIED => "UNAPPLIED",
            PerInstanceConfigStatusEnum::UNAPPLIEDDELETION => "UNAPPLIED_DELETION",
        }
    }
}

impl std::convert::TryFrom< &str> for PerInstanceConfigStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "APPLYING" => Ok(PerInstanceConfigStatusEnum::APPLYING),
           "DELETING" => Ok(PerInstanceConfigStatusEnum::DELETING),
           "EFFECTIVE" => Ok(PerInstanceConfigStatusEnum::EFFECTIVE),
           "NONE" => Ok(PerInstanceConfigStatusEnum::NONE),
           "UNAPPLIED" => Ok(PerInstanceConfigStatusEnum::UNAPPLIED),
           "UNAPPLIED_DELETION" => Ok(PerInstanceConfigStatusEnum::UNAPPLIEDDELETION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PerInstanceConfigStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PreservedStatePreservedDiskAutoDeleteEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// These stateful disks will never be deleted during autohealing, update, instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole MIG is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
pub enum PreservedStatePreservedDiskAutoDeleteEnum {
    
    /// "NEVER"
    #[serde(rename="NEVER")]
    NEVER,
    
    /// "ON_PERMANENT_INSTANCE_DELETION"
    #[serde(rename="ON_PERMANENT_INSTANCE_DELETION")]
    ONPERMANENTINSTANCEDELETION,
}

impl AsRef<str> for PreservedStatePreservedDiskAutoDeleteEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PreservedStatePreservedDiskAutoDeleteEnum::NEVER => "NEVER",
            PreservedStatePreservedDiskAutoDeleteEnum::ONPERMANENTINSTANCEDELETION => "ON_PERMANENT_INSTANCE_DELETION",
        }
    }
}

impl std::convert::TryFrom< &str> for PreservedStatePreservedDiskAutoDeleteEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NEVER" => Ok(PreservedStatePreservedDiskAutoDeleteEnum::NEVER),
           "ON_PERMANENT_INSTANCE_DELETION" => Ok(PreservedStatePreservedDiskAutoDeleteEnum::ONPERMANENTINSTANCEDELETION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PreservedStatePreservedDiskAutoDeleteEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PreservedStatePreservedDiskModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
pub enum PreservedStatePreservedDiskModeEnum {
    

    /// Attaches this disk in read-only mode. Multiple VM instances can use a disk in READ_ONLY mode at a time.
    ///
    /// "READ_ONLY"
    #[serde(rename="READ_ONLY")]
    READONLY,
    

    /// *[Default]* Attaches this disk in READ_WRITE mode. Only one VM instance at a time can be attached to a disk in READ_WRITE mode.
    ///
    /// "READ_WRITE"
    #[serde(rename="READ_WRITE")]
    READWRITE,
}

impl AsRef<str> for PreservedStatePreservedDiskModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PreservedStatePreservedDiskModeEnum::READONLY => "READ_ONLY",
            PreservedStatePreservedDiskModeEnum::READWRITE => "READ_WRITE",
        }
    }
}

impl std::convert::TryFrom< &str> for PreservedStatePreservedDiskModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "READ_ONLY" => Ok(PreservedStatePreservedDiskModeEnum::READONLY),
           "READ_WRITE" => Ok(PreservedStatePreservedDiskModeEnum::READWRITE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PreservedStatePreservedDiskModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PreservedStatePreservedNetworkIpAutoDeleteEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted.
pub enum PreservedStatePreservedNetworkIpAutoDeleteEnum {
    
    /// "NEVER"
    #[serde(rename="NEVER")]
    NEVER,
    
    /// "ON_PERMANENT_INSTANCE_DELETION"
    #[serde(rename="ON_PERMANENT_INSTANCE_DELETION")]
    ONPERMANENTINSTANCEDELETION,
}

impl AsRef<str> for PreservedStatePreservedNetworkIpAutoDeleteEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PreservedStatePreservedNetworkIpAutoDeleteEnum::NEVER => "NEVER",
            PreservedStatePreservedNetworkIpAutoDeleteEnum::ONPERMANENTINSTANCEDELETION => "ON_PERMANENT_INSTANCE_DELETION",
        }
    }
}

impl std::convert::TryFrom< &str> for PreservedStatePreservedNetworkIpAutoDeleteEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NEVER" => Ok(PreservedStatePreservedNetworkIpAutoDeleteEnum::NEVER),
           "ON_PERMANENT_INSTANCE_DELETION" => Ok(PreservedStatePreservedNetworkIpAutoDeleteEnum::ONPERMANENTINSTANCEDELETION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PreservedStatePreservedNetworkIpAutoDeleteEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ProjectCloudArmorTierEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The Cloud Armor tier for this project. It can be one of the following values: CA_STANDARD, CA_ENTERPRISE_PAYGO. If this field is not specified, it is assumed to be CA_STANDARD.
pub enum ProjectCloudArmorTierEnum {
    

    /// Enterprise tier protection billed annually.
    ///
    /// "CA_ENTERPRISE_ANNUAL"
    #[serde(rename="CA_ENTERPRISE_ANNUAL")]
    CAENTERPRISEANNUAL,
    

    /// Enterprise tier protection billed monthly.
    ///
    /// "CA_ENTERPRISE_PAYGO"
    #[serde(rename="CA_ENTERPRISE_PAYGO")]
    CAENTERPRISEPAYGO,
    

    /// Standard protection.
    ///
    /// "CA_STANDARD"
    #[serde(rename="CA_STANDARD")]
    CASTANDARD,
}

impl AsRef<str> for ProjectCloudArmorTierEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ProjectCloudArmorTierEnum::CAENTERPRISEANNUAL => "CA_ENTERPRISE_ANNUAL",
            ProjectCloudArmorTierEnum::CAENTERPRISEPAYGO => "CA_ENTERPRISE_PAYGO",
            ProjectCloudArmorTierEnum::CASTANDARD => "CA_STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for ProjectCloudArmorTierEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CA_ENTERPRISE_ANNUAL" => Ok(ProjectCloudArmorTierEnum::CAENTERPRISEANNUAL),
           "CA_ENTERPRISE_PAYGO" => Ok(ProjectCloudArmorTierEnum::CAENTERPRISEPAYGO),
           "CA_STANDARD" => Ok(ProjectCloudArmorTierEnum::CASTANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ProjectCloudArmorTierEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ProjectDefaultNetworkTierEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This signifies the default network tier used for configuring resources of the project and can only take the following values: PREMIUM, STANDARD. Initially the default network tier is PREMIUM.
pub enum ProjectDefaultNetworkTierEnum {
    

    /// Public internet quality with fixed bandwidth.
    ///
    /// "FIXED_STANDARD"
    #[serde(rename="FIXED_STANDARD")]
    FIXEDSTANDARD,
    

    /// High quality, Google-grade network tier, support for all networking products.
    ///
    /// "PREMIUM"
    #[serde(rename="PREMIUM")]
    PREMIUM,
    

    /// Public internet quality, only limited support for other networking products.
    ///
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
    

    /// (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    ///
    /// "STANDARD_OVERRIDES_FIXED_STANDARD"
    #[serde(rename="STANDARD_OVERRIDES_FIXED_STANDARD")]
    STANDARDOVERRIDESFIXEDSTANDARD,
}

impl AsRef<str> for ProjectDefaultNetworkTierEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ProjectDefaultNetworkTierEnum::FIXEDSTANDARD => "FIXED_STANDARD",
            ProjectDefaultNetworkTierEnum::PREMIUM => "PREMIUM",
            ProjectDefaultNetworkTierEnum::STANDARD => "STANDARD",
            ProjectDefaultNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD => "STANDARD_OVERRIDES_FIXED_STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for ProjectDefaultNetworkTierEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FIXED_STANDARD" => Ok(ProjectDefaultNetworkTierEnum::FIXEDSTANDARD),
           "PREMIUM" => Ok(ProjectDefaultNetworkTierEnum::PREMIUM),
           "STANDARD" => Ok(ProjectDefaultNetworkTierEnum::STANDARD),
           "STANDARD_OVERRIDES_FIXED_STANDARD" => Ok(ProjectDefaultNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ProjectDefaultNetworkTierEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ProjectVmDnsSettingEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Default internal DNS setting used by VMs running in this project.
pub enum ProjectVmDnsSettingEnum {
    
    /// "GLOBAL_DEFAULT"
    #[serde(rename="GLOBAL_DEFAULT")]
    GLOBALDEFAULT,
    
    /// "UNSPECIFIED_VM_DNS_SETTING"
    #[serde(rename="UNSPECIFIED_VM_DNS_SETTING")]
    UNSPECIFIEDVMDNSSETTING,
    
    /// "ZONAL_DEFAULT"
    #[serde(rename="ZONAL_DEFAULT")]
    ZONALDEFAULT,
    
    /// "ZONAL_ONLY"
    #[serde(rename="ZONAL_ONLY")]
    ZONALONLY,
}

impl AsRef<str> for ProjectVmDnsSettingEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ProjectVmDnsSettingEnum::GLOBALDEFAULT => "GLOBAL_DEFAULT",
            ProjectVmDnsSettingEnum::UNSPECIFIEDVMDNSSETTING => "UNSPECIFIED_VM_DNS_SETTING",
            ProjectVmDnsSettingEnum::ZONALDEFAULT => "ZONAL_DEFAULT",
            ProjectVmDnsSettingEnum::ZONALONLY => "ZONAL_ONLY",
        }
    }
}

impl std::convert::TryFrom< &str> for ProjectVmDnsSettingEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GLOBAL_DEFAULT" => Ok(ProjectVmDnsSettingEnum::GLOBALDEFAULT),
           "UNSPECIFIED_VM_DNS_SETTING" => Ok(ProjectVmDnsSettingEnum::UNSPECIFIEDVMDNSSETTING),
           "ZONAL_DEFAULT" => Ok(ProjectVmDnsSettingEnum::ZONALDEFAULT),
           "ZONAL_ONLY" => Ok(ProjectVmDnsSettingEnum::ZONALONLY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ProjectVmDnsSettingEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ProjectXpnProjectStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The role this project has in a shared VPC configuration. Currently, only projects with the host role, which is specified by the value HOST, are differentiated.
pub enum ProjectXpnProjectStatusEnum {
    
    /// "HOST"
    #[serde(rename="HOST")]
    HOST,
    
    /// "UNSPECIFIED_XPN_PROJECT_STATUS"
    #[serde(rename="UNSPECIFIED_XPN_PROJECT_STATUS")]
    UNSPECIFIEDXPNPROJECTSTATUS,
}

impl AsRef<str> for ProjectXpnProjectStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ProjectXpnProjectStatusEnum::HOST => "HOST",
            ProjectXpnProjectStatusEnum::UNSPECIFIEDXPNPROJECTSTATUS => "UNSPECIFIED_XPN_PROJECT_STATUS",
        }
    }
}

impl std::convert::TryFrom< &str> for ProjectXpnProjectStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "HOST" => Ok(ProjectXpnProjectStatusEnum::HOST),
           "UNSPECIFIED_XPN_PROJECT_STATUS" => Ok(ProjectXpnProjectStatusEnum::UNSPECIFIEDXPNPROJECTSTATUS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ProjectXpnProjectStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ProjectsSetCloudArmorTierRequestCloudArmorTierEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Managed protection tier to be set.
pub enum ProjectsSetCloudArmorTierRequestCloudArmorTierEnum {
    

    /// Enterprise tier protection billed annually.
    ///
    /// "CA_ENTERPRISE_ANNUAL"
    #[serde(rename="CA_ENTERPRISE_ANNUAL")]
    CAENTERPRISEANNUAL,
    

    /// Enterprise tier protection billed monthly.
    ///
    /// "CA_ENTERPRISE_PAYGO"
    #[serde(rename="CA_ENTERPRISE_PAYGO")]
    CAENTERPRISEPAYGO,
    

    /// Standard protection.
    ///
    /// "CA_STANDARD"
    #[serde(rename="CA_STANDARD")]
    CASTANDARD,
}

impl AsRef<str> for ProjectsSetCloudArmorTierRequestCloudArmorTierEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ProjectsSetCloudArmorTierRequestCloudArmorTierEnum::CAENTERPRISEANNUAL => "CA_ENTERPRISE_ANNUAL",
            ProjectsSetCloudArmorTierRequestCloudArmorTierEnum::CAENTERPRISEPAYGO => "CA_ENTERPRISE_PAYGO",
            ProjectsSetCloudArmorTierRequestCloudArmorTierEnum::CASTANDARD => "CA_STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for ProjectsSetCloudArmorTierRequestCloudArmorTierEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CA_ENTERPRISE_ANNUAL" => Ok(ProjectsSetCloudArmorTierRequestCloudArmorTierEnum::CAENTERPRISEANNUAL),
           "CA_ENTERPRISE_PAYGO" => Ok(ProjectsSetCloudArmorTierRequestCloudArmorTierEnum::CAENTERPRISEPAYGO),
           "CA_STANDARD" => Ok(ProjectsSetCloudArmorTierRequestCloudArmorTierEnum::CASTANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ProjectsSetCloudArmorTierRequestCloudArmorTierEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ProjectsSetDefaultNetworkTierRequestNetworkTierEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Default network tier to be set.
pub enum ProjectsSetDefaultNetworkTierRequestNetworkTierEnum {
    

    /// Public internet quality with fixed bandwidth.
    ///
    /// "FIXED_STANDARD"
    #[serde(rename="FIXED_STANDARD")]
    FIXEDSTANDARD,
    

    /// High quality, Google-grade network tier, support for all networking products.
    ///
    /// "PREMIUM"
    #[serde(rename="PREMIUM")]
    PREMIUM,
    

    /// Public internet quality, only limited support for other networking products.
    ///
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
    

    /// (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    ///
    /// "STANDARD_OVERRIDES_FIXED_STANDARD"
    #[serde(rename="STANDARD_OVERRIDES_FIXED_STANDARD")]
    STANDARDOVERRIDESFIXEDSTANDARD,
}

impl AsRef<str> for ProjectsSetDefaultNetworkTierRequestNetworkTierEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ProjectsSetDefaultNetworkTierRequestNetworkTierEnum::FIXEDSTANDARD => "FIXED_STANDARD",
            ProjectsSetDefaultNetworkTierRequestNetworkTierEnum::PREMIUM => "PREMIUM",
            ProjectsSetDefaultNetworkTierRequestNetworkTierEnum::STANDARD => "STANDARD",
            ProjectsSetDefaultNetworkTierRequestNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD => "STANDARD_OVERRIDES_FIXED_STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for ProjectsSetDefaultNetworkTierRequestNetworkTierEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FIXED_STANDARD" => Ok(ProjectsSetDefaultNetworkTierRequestNetworkTierEnum::FIXEDSTANDARD),
           "PREMIUM" => Ok(ProjectsSetDefaultNetworkTierRequestNetworkTierEnum::PREMIUM),
           "STANDARD" => Ok(ProjectsSetDefaultNetworkTierRequestNetworkTierEnum::STANDARD),
           "STANDARD_OVERRIDES_FIXED_STANDARD" => Ok(ProjectsSetDefaultNetworkTierRequestNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ProjectsSetDefaultNetworkTierRequestNetworkTierEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PublicAdvertisedPrefixByoipApiVersionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The version of BYOIP API.
pub enum PublicAdvertisedPrefixByoipApiVersionEnum {
    

    /// This public advertised prefix can be used to create both regional and global public delegated prefixes. It usually takes 4 weeks to create or delete a public delegated prefix. The BGP status cannot be changed.
    ///
    /// "V1"
    #[serde(rename="V1")]
    V1,
    

    /// This public advertised prefix can only be used to create regional public delegated prefixes. Public delegated prefix creation and deletion takes minutes and the BGP status can be modified.
    ///
    /// "V2"
    #[serde(rename="V2")]
    V2,
}

impl AsRef<str> for PublicAdvertisedPrefixByoipApiVersionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PublicAdvertisedPrefixByoipApiVersionEnum::V1 => "V1",
            PublicAdvertisedPrefixByoipApiVersionEnum::V2 => "V2",
        }
    }
}

impl std::convert::TryFrom< &str> for PublicAdvertisedPrefixByoipApiVersionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "V1" => Ok(PublicAdvertisedPrefixByoipApiVersionEnum::V1),
           "V2" => Ok(PublicAdvertisedPrefixByoipApiVersionEnum::V2),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PublicAdvertisedPrefixByoipApiVersionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PublicAdvertisedPrefixPdpScopeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies how child public delegated prefix will be scoped. It could be one of following values: - `REGIONAL`: The public delegated prefix is regional only. The provisioning will take a few minutes. - `GLOBAL`: The public delegated prefix is global only. The provisioning will take ~4 weeks. - `GLOBAL_AND_REGIONAL` [output only]: The public delegated prefixes is BYOIP V1 legacy prefix. This is output only value and no longer supported in BYOIP V2. 
pub enum PublicAdvertisedPrefixPdpScopeEnum {
    

    /// The public delegated prefix is global only. The provisioning will take ~4 weeks.
    ///
    /// "GLOBAL"
    #[serde(rename="GLOBAL")]
    GLOBAL,
    

    /// The public delegated prefixes is BYOIP V1 legacy prefix. This is output only value and no longer supported in BYOIP V2.
    ///
    /// "GLOBAL_AND_REGIONAL"
    #[serde(rename="GLOBAL_AND_REGIONAL")]
    GLOBALANDREGIONAL,
    

    /// The public delegated prefix is regional only. The provisioning will take a few minutes.
    ///
    /// "REGIONAL"
    #[serde(rename="REGIONAL")]
    REGIONAL,
}

impl AsRef<str> for PublicAdvertisedPrefixPdpScopeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PublicAdvertisedPrefixPdpScopeEnum::GLOBAL => "GLOBAL",
            PublicAdvertisedPrefixPdpScopeEnum::GLOBALANDREGIONAL => "GLOBAL_AND_REGIONAL",
            PublicAdvertisedPrefixPdpScopeEnum::REGIONAL => "REGIONAL",
        }
    }
}

impl std::convert::TryFrom< &str> for PublicAdvertisedPrefixPdpScopeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GLOBAL" => Ok(PublicAdvertisedPrefixPdpScopeEnum::GLOBAL),
           "GLOBAL_AND_REGIONAL" => Ok(PublicAdvertisedPrefixPdpScopeEnum::GLOBALANDREGIONAL),
           "REGIONAL" => Ok(PublicAdvertisedPrefixPdpScopeEnum::REGIONAL),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PublicAdvertisedPrefixPdpScopeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PublicAdvertisedPrefixStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The status of the public advertised prefix. Possible values include: - `INITIAL`: RPKI validation is complete. - `PTR_CONFIGURED`: User has configured the PTR. - `VALIDATED`: Reverse DNS lookup is successful. - `REVERSE_DNS_LOOKUP_FAILED`: Reverse DNS lookup failed. - `PREFIX_CONFIGURATION_IN_PROGRESS`: The prefix is being configured. - `PREFIX_CONFIGURATION_COMPLETE`: The prefix is fully configured. - `PREFIX_REMOVAL_IN_PROGRESS`: The prefix is being removed. 
pub enum PublicAdvertisedPrefixStatusEnum {
    

    /// The prefix is announced to Internet.
    ///
    /// "ANNOUNCED_TO_INTERNET"
    #[serde(rename="ANNOUNCED_TO_INTERNET")]
    ANNOUNCEDTOINTERNET,
    

    /// RPKI validation is complete.
    ///
    /// "INITIAL"
    #[serde(rename="INITIAL")]
    INITIAL,
    

    /// The prefix is fully configured.
    ///
    /// "PREFIX_CONFIGURATION_COMPLETE"
    #[serde(rename="PREFIX_CONFIGURATION_COMPLETE")]
    PREFIXCONFIGURATIONCOMPLETE,
    

    /// The prefix is being configured.
    ///
    /// "PREFIX_CONFIGURATION_IN_PROGRESS"
    #[serde(rename="PREFIX_CONFIGURATION_IN_PROGRESS")]
    PREFIXCONFIGURATIONINPROGRESS,
    

    /// The prefix is being removed.
    ///
    /// "PREFIX_REMOVAL_IN_PROGRESS"
    #[serde(rename="PREFIX_REMOVAL_IN_PROGRESS")]
    PREFIXREMOVALINPROGRESS,
    

    /// User has configured the PTR.
    ///
    /// "PTR_CONFIGURED"
    #[serde(rename="PTR_CONFIGURED")]
    PTRCONFIGURED,
    

    /// The prefix is currently withdrawn but ready to be announced.
    ///
    /// "READY_TO_ANNOUNCE"
    #[serde(rename="READY_TO_ANNOUNCE")]
    READYTOANNOUNCE,
    

    /// Reverse DNS lookup failed.
    ///
    /// "REVERSE_DNS_LOOKUP_FAILED"
    #[serde(rename="REVERSE_DNS_LOOKUP_FAILED")]
    REVERSEDNSLOOKUPFAILED,
    

    /// Reverse DNS lookup is successful.
    ///
    /// "VALIDATED"
    #[serde(rename="VALIDATED")]
    VALIDATED,
}

impl AsRef<str> for PublicAdvertisedPrefixStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PublicAdvertisedPrefixStatusEnum::ANNOUNCEDTOINTERNET => "ANNOUNCED_TO_INTERNET",
            PublicAdvertisedPrefixStatusEnum::INITIAL => "INITIAL",
            PublicAdvertisedPrefixStatusEnum::PREFIXCONFIGURATIONCOMPLETE => "PREFIX_CONFIGURATION_COMPLETE",
            PublicAdvertisedPrefixStatusEnum::PREFIXCONFIGURATIONINPROGRESS => "PREFIX_CONFIGURATION_IN_PROGRESS",
            PublicAdvertisedPrefixStatusEnum::PREFIXREMOVALINPROGRESS => "PREFIX_REMOVAL_IN_PROGRESS",
            PublicAdvertisedPrefixStatusEnum::PTRCONFIGURED => "PTR_CONFIGURED",
            PublicAdvertisedPrefixStatusEnum::READYTOANNOUNCE => "READY_TO_ANNOUNCE",
            PublicAdvertisedPrefixStatusEnum::REVERSEDNSLOOKUPFAILED => "REVERSE_DNS_LOOKUP_FAILED",
            PublicAdvertisedPrefixStatusEnum::VALIDATED => "VALIDATED",
        }
    }
}

impl std::convert::TryFrom< &str> for PublicAdvertisedPrefixStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ANNOUNCED_TO_INTERNET" => Ok(PublicAdvertisedPrefixStatusEnum::ANNOUNCEDTOINTERNET),
           "INITIAL" => Ok(PublicAdvertisedPrefixStatusEnum::INITIAL),
           "PREFIX_CONFIGURATION_COMPLETE" => Ok(PublicAdvertisedPrefixStatusEnum::PREFIXCONFIGURATIONCOMPLETE),
           "PREFIX_CONFIGURATION_IN_PROGRESS" => Ok(PublicAdvertisedPrefixStatusEnum::PREFIXCONFIGURATIONINPROGRESS),
           "PREFIX_REMOVAL_IN_PROGRESS" => Ok(PublicAdvertisedPrefixStatusEnum::PREFIXREMOVALINPROGRESS),
           "PTR_CONFIGURED" => Ok(PublicAdvertisedPrefixStatusEnum::PTRCONFIGURED),
           "READY_TO_ANNOUNCE" => Ok(PublicAdvertisedPrefixStatusEnum::READYTOANNOUNCE),
           "REVERSE_DNS_LOOKUP_FAILED" => Ok(PublicAdvertisedPrefixStatusEnum::REVERSEDNSLOOKUPFAILED),
           "VALIDATED" => Ok(PublicAdvertisedPrefixStatusEnum::VALIDATED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PublicAdvertisedPrefixStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PublicDelegatedPrefixByoipApiVersionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The version of BYOIP API.
pub enum PublicDelegatedPrefixByoipApiVersionEnum {
    

    /// This public delegated prefix usually takes 4 weeks to delete, and the BGP status cannot be changed. Announce and Withdraw APIs can not be used on this prefix.
    ///
    /// "V1"
    #[serde(rename="V1")]
    V1,
    

    /// This public delegated prefix takes minutes to delete. Announce and Withdraw APIs can be used on this prefix to change the BGP status.
    ///
    /// "V2"
    #[serde(rename="V2")]
    V2,
}

impl AsRef<str> for PublicDelegatedPrefixByoipApiVersionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PublicDelegatedPrefixByoipApiVersionEnum::V1 => "V1",
            PublicDelegatedPrefixByoipApiVersionEnum::V2 => "V2",
        }
    }
}

impl std::convert::TryFrom< &str> for PublicDelegatedPrefixByoipApiVersionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "V1" => Ok(PublicDelegatedPrefixByoipApiVersionEnum::V1),
           "V2" => Ok(PublicDelegatedPrefixByoipApiVersionEnum::V2),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PublicDelegatedPrefixByoipApiVersionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PublicDelegatedPrefixStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the public delegated prefix, which can be one of following values: - `INITIALIZING` The public delegated prefix is being initialized and addresses cannot be created yet. - `READY_TO_ANNOUNCE` The public delegated prefix is a live migration prefix and is active. - `ANNOUNCED` The public delegated prefix is active. - `DELETING` The public delegated prefix is being deprovsioned. 
pub enum PublicDelegatedPrefixStatusEnum {
    

    /// The public delegated prefix is active.
    ///
    /// "ANNOUNCED"
    #[serde(rename="ANNOUNCED")]
    ANNOUNCED,
    

    /// The prefix is announced within Google network.
    ///
    /// "ANNOUNCED_TO_GOOGLE"
    #[serde(rename="ANNOUNCED_TO_GOOGLE")]
    ANNOUNCEDTOGOOGLE,
    

    /// The prefix is announced to Internet and within Google.
    ///
    /// "ANNOUNCED_TO_INTERNET"
    #[serde(rename="ANNOUNCED_TO_INTERNET")]
    ANNOUNCEDTOINTERNET,
    

    /// The public delegated prefix is being deprovsioned.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// The public delegated prefix is being initialized and addresses cannot be created yet.
    ///
    /// "INITIALIZING"
    #[serde(rename="INITIALIZING")]
    INITIALIZING,
    

    /// The public delegated prefix is currently withdrawn but ready to be announced.
    ///
    /// "READY_TO_ANNOUNCE"
    #[serde(rename="READY_TO_ANNOUNCE")]
    READYTOANNOUNCE,
}

impl AsRef<str> for PublicDelegatedPrefixStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PublicDelegatedPrefixStatusEnum::ANNOUNCED => "ANNOUNCED",
            PublicDelegatedPrefixStatusEnum::ANNOUNCEDTOGOOGLE => "ANNOUNCED_TO_GOOGLE",
            PublicDelegatedPrefixStatusEnum::ANNOUNCEDTOINTERNET => "ANNOUNCED_TO_INTERNET",
            PublicDelegatedPrefixStatusEnum::DELETING => "DELETING",
            PublicDelegatedPrefixStatusEnum::INITIALIZING => "INITIALIZING",
            PublicDelegatedPrefixStatusEnum::READYTOANNOUNCE => "READY_TO_ANNOUNCE",
        }
    }
}

impl std::convert::TryFrom< &str> for PublicDelegatedPrefixStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ANNOUNCED" => Ok(PublicDelegatedPrefixStatusEnum::ANNOUNCED),
           "ANNOUNCED_TO_GOOGLE" => Ok(PublicDelegatedPrefixStatusEnum::ANNOUNCEDTOGOOGLE),
           "ANNOUNCED_TO_INTERNET" => Ok(PublicDelegatedPrefixStatusEnum::ANNOUNCEDTOINTERNET),
           "DELETING" => Ok(PublicDelegatedPrefixStatusEnum::DELETING),
           "INITIALIZING" => Ok(PublicDelegatedPrefixStatusEnum::INITIALIZING),
           "READY_TO_ANNOUNCE" => Ok(PublicDelegatedPrefixStatusEnum::READYTOANNOUNCE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PublicDelegatedPrefixStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the sub public delegated prefix.
pub enum PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum {
    
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    
    /// "INACTIVE"
    #[serde(rename="INACTIVE")]
    INACTIVE,
}

impl AsRef<str> for PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum::ACTIVE => "ACTIVE",
            PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum::INACTIVE => "INACTIVE",
        }
    }
}

impl std::convert::TryFrom< &str> for PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum::ACTIVE),
           "INACTIVE" => Ok(PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum::INACTIVE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region QuotaMetricEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Name of the quota metric.
pub enum QuotaMetricEnum {
    
    /// "A2_CPUS"
    #[serde(rename="A2_CPUS")]
    A2CPUS,
    
    /// "AFFINITY_GROUPS"
    #[serde(rename="AFFINITY_GROUPS")]
    AFFINITYGROUPS,
    
    /// "AUTOSCALERS"
    #[serde(rename="AUTOSCALERS")]
    AUTOSCALERS,
    
    /// "BACKEND_BUCKETS"
    #[serde(rename="BACKEND_BUCKETS")]
    BACKENDBUCKETS,
    
    /// "BACKEND_SERVICES"
    #[serde(rename="BACKEND_SERVICES")]
    BACKENDSERVICES,
    
    /// "C2D_CPUS"
    #[serde(rename="C2D_CPUS")]
    C2DCPUS,
    
    /// "C2_CPUS"
    #[serde(rename="C2_CPUS")]
    C2CPUS,
    
    /// "C3_CPUS"
    #[serde(rename="C3_CPUS")]
    C3CPUS,
    
    /// "COMMITMENTS"
    #[serde(rename="COMMITMENTS")]
    COMMITMENTS,
    
    /// "COMMITTED_A2_CPUS"
    #[serde(rename="COMMITTED_A2_CPUS")]
    COMMITTEDA2CPUS,
    
    /// "COMMITTED_C2D_CPUS"
    #[serde(rename="COMMITTED_C2D_CPUS")]
    COMMITTEDC2DCPUS,
    
    /// "COMMITTED_C2_CPUS"
    #[serde(rename="COMMITTED_C2_CPUS")]
    COMMITTEDC2CPUS,
    
    /// "COMMITTED_C3_CPUS"
    #[serde(rename="COMMITTED_C3_CPUS")]
    COMMITTEDC3CPUS,
    
    /// "COMMITTED_CPUS"
    #[serde(rename="COMMITTED_CPUS")]
    COMMITTEDCPUS,
    
    /// "COMMITTED_E2_CPUS"
    #[serde(rename="COMMITTED_E2_CPUS")]
    COMMITTEDE2CPUS,
    
    /// "COMMITTED_LICENSES"
    #[serde(rename="COMMITTED_LICENSES")]
    COMMITTEDLICENSES,
    
    /// "COMMITTED_LOCAL_SSD_TOTAL_GB"
    #[serde(rename="COMMITTED_LOCAL_SSD_TOTAL_GB")]
    COMMITTEDLOCALSSDTOTALGB,
    
    /// "COMMITTED_M3_CPUS"
    #[serde(rename="COMMITTED_M3_CPUS")]
    COMMITTEDM3CPUS,
    
    /// "COMMITTED_MEMORY_OPTIMIZED_CPUS"
    #[serde(rename="COMMITTED_MEMORY_OPTIMIZED_CPUS")]
    COMMITTEDMEMORYOPTIMIZEDCPUS,
    
    /// "COMMITTED_N2A_CPUS"
    #[serde(rename="COMMITTED_N2A_CPUS")]
    COMMITTEDN2ACPUS,
    
    /// "COMMITTED_N2D_CPUS"
    #[serde(rename="COMMITTED_N2D_CPUS")]
    COMMITTEDN2DCPUS,
    
    /// "COMMITTED_N2_CPUS"
    #[serde(rename="COMMITTED_N2_CPUS")]
    COMMITTEDN2CPUS,
    
    /// "COMMITTED_NVIDIA_A100_80GB_GPUS"
    #[serde(rename="COMMITTED_NVIDIA_A100_80GB_GPUS")]
    COMMITTEDNVIDIAA10080GBGPUS,
    
    /// "COMMITTED_NVIDIA_A100_GPUS"
    #[serde(rename="COMMITTED_NVIDIA_A100_GPUS")]
    COMMITTEDNVIDIAA100GPUS,
    
    /// "COMMITTED_NVIDIA_H100_GPUS"
    #[serde(rename="COMMITTED_NVIDIA_H100_GPUS")]
    COMMITTEDNVIDIAH100GPUS,
    
    /// "COMMITTED_NVIDIA_K80_GPUS"
    #[serde(rename="COMMITTED_NVIDIA_K80_GPUS")]
    COMMITTEDNVIDIAK80GPUS,
    
    /// "COMMITTED_NVIDIA_L4_GPUS"
    #[serde(rename="COMMITTED_NVIDIA_L4_GPUS")]
    COMMITTEDNVIDIAL4GPUS,
    
    /// "COMMITTED_NVIDIA_P100_GPUS"
    #[serde(rename="COMMITTED_NVIDIA_P100_GPUS")]
    COMMITTEDNVIDIAP100GPUS,
    
    /// "COMMITTED_NVIDIA_P4_GPUS"
    #[serde(rename="COMMITTED_NVIDIA_P4_GPUS")]
    COMMITTEDNVIDIAP4GPUS,
    
    /// "COMMITTED_NVIDIA_T4_GPUS"
    #[serde(rename="COMMITTED_NVIDIA_T4_GPUS")]
    COMMITTEDNVIDIAT4GPUS,
    
    /// "COMMITTED_NVIDIA_V100_GPUS"
    #[serde(rename="COMMITTED_NVIDIA_V100_GPUS")]
    COMMITTEDNVIDIAV100GPUS,
    
    /// "COMMITTED_T2A_CPUS"
    #[serde(rename="COMMITTED_T2A_CPUS")]
    COMMITTEDT2ACPUS,
    
    /// "COMMITTED_T2D_CPUS"
    #[serde(rename="COMMITTED_T2D_CPUS")]
    COMMITTEDT2DCPUS,
    
    /// "COMMITTED_Z3_CPUS"
    #[serde(rename="COMMITTED_Z3_CPUS")]
    COMMITTEDZ3CPUS,
    

    /// Guest CPUs
    ///
    /// "CPUS"
    #[serde(rename="CPUS")]
    CPUS,
    
    /// "CPUS_ALL_REGIONS"
    #[serde(rename="CPUS_ALL_REGIONS")]
    CPUSALLREGIONS,
    
    /// "DISKS_TOTAL_GB"
    #[serde(rename="DISKS_TOTAL_GB")]
    DISKSTOTALGB,
    
    /// "E2_CPUS"
    #[serde(rename="E2_CPUS")]
    E2CPUS,
    
    /// "EXTERNAL_MANAGED_FORWARDING_RULES"
    #[serde(rename="EXTERNAL_MANAGED_FORWARDING_RULES")]
    EXTERNALMANAGEDFORWARDINGRULES,
    
    /// "EXTERNAL_NETWORK_LB_FORWARDING_RULES"
    #[serde(rename="EXTERNAL_NETWORK_LB_FORWARDING_RULES")]
    EXTERNALNETWORKLBFORWARDINGRULES,
    
    /// "EXTERNAL_PROTOCOL_FORWARDING_RULES"
    #[serde(rename="EXTERNAL_PROTOCOL_FORWARDING_RULES")]
    EXTERNALPROTOCOLFORWARDINGRULES,
    
    /// "EXTERNAL_VPN_GATEWAYS"
    #[serde(rename="EXTERNAL_VPN_GATEWAYS")]
    EXTERNALVPNGATEWAYS,
    
    /// "FIREWALLS"
    #[serde(rename="FIREWALLS")]
    FIREWALLS,
    
    /// "FORWARDING_RULES"
    #[serde(rename="FORWARDING_RULES")]
    FORWARDINGRULES,
    
    /// "GLOBAL_EXTERNAL_MANAGED_BACKEND_SERVICES"
    #[serde(rename="GLOBAL_EXTERNAL_MANAGED_BACKEND_SERVICES")]
    GLOBALEXTERNALMANAGEDBACKENDSERVICES,
    
    /// "GLOBAL_EXTERNAL_MANAGED_FORWARDING_RULES"
    #[serde(rename="GLOBAL_EXTERNAL_MANAGED_FORWARDING_RULES")]
    GLOBALEXTERNALMANAGEDFORWARDINGRULES,
    
    /// "GLOBAL_EXTERNAL_PROXY_LB_BACKEND_SERVICES"
    #[serde(rename="GLOBAL_EXTERNAL_PROXY_LB_BACKEND_SERVICES")]
    GLOBALEXTERNALPROXYLBBACKENDSERVICES,
    
    /// "GLOBAL_INTERNAL_ADDRESSES"
    #[serde(rename="GLOBAL_INTERNAL_ADDRESSES")]
    GLOBALINTERNALADDRESSES,
    
    /// "GLOBAL_INTERNAL_MANAGED_BACKEND_SERVICES"
    #[serde(rename="GLOBAL_INTERNAL_MANAGED_BACKEND_SERVICES")]
    GLOBALINTERNALMANAGEDBACKENDSERVICES,
    
    /// "GLOBAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES"
    #[serde(rename="GLOBAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES")]
    GLOBALINTERNALTRAFFICDIRECTORBACKENDSERVICES,
    
    /// "GPUS_ALL_REGIONS"
    #[serde(rename="GPUS_ALL_REGIONS")]
    GPUSALLREGIONS,
    
    /// "HDB_TOTAL_GB"
    #[serde(rename="HDB_TOTAL_GB")]
    HDBTOTALGB,
    
    /// "HDB_TOTAL_IOPS"
    #[serde(rename="HDB_TOTAL_IOPS")]
    HDBTOTALIOPS,
    
    /// "HDB_TOTAL_THROUGHPUT"
    #[serde(rename="HDB_TOTAL_THROUGHPUT")]
    HDBTOTALTHROUGHPUT,
    
    /// "HEALTH_CHECKS"
    #[serde(rename="HEALTH_CHECKS")]
    HEALTHCHECKS,
    
    /// "IMAGES"
    #[serde(rename="IMAGES")]
    IMAGES,
    
    /// "INSTANCES"
    #[serde(rename="INSTANCES")]
    INSTANCES,
    
    /// "INSTANCE_GROUPS"
    #[serde(rename="INSTANCE_GROUPS")]
    INSTANCEGROUPS,
    
    /// "INSTANCE_GROUP_MANAGERS"
    #[serde(rename="INSTANCE_GROUP_MANAGERS")]
    INSTANCEGROUPMANAGERS,
    
    /// "INSTANCE_TEMPLATES"
    #[serde(rename="INSTANCE_TEMPLATES")]
    INSTANCETEMPLATES,
    
    /// "INTERCONNECTS"
    #[serde(rename="INTERCONNECTS")]
    INTERCONNECTS,
    
    /// "INTERCONNECT_ATTACHMENTS_PER_REGION"
    #[serde(rename="INTERCONNECT_ATTACHMENTS_PER_REGION")]
    INTERCONNECTATTACHMENTSPERREGION,
    
    /// "INTERCONNECT_ATTACHMENTS_TOTAL_MBPS"
    #[serde(rename="INTERCONNECT_ATTACHMENTS_TOTAL_MBPS")]
    INTERCONNECTATTACHMENTSTOTALMBPS,
    
    /// "INTERCONNECT_TOTAL_GBPS"
    #[serde(rename="INTERCONNECT_TOTAL_GBPS")]
    INTERCONNECTTOTALGBPS,
    
    /// "INTERNAL_ADDRESSES"
    #[serde(rename="INTERNAL_ADDRESSES")]
    INTERNALADDRESSES,
    
    /// "INTERNAL_TRAFFIC_DIRECTOR_FORWARDING_RULES"
    #[serde(rename="INTERNAL_TRAFFIC_DIRECTOR_FORWARDING_RULES")]
    INTERNALTRAFFICDIRECTORFORWARDINGRULES,
    
    /// "IN_PLACE_SNAPSHOTS"
    #[serde(rename="IN_PLACE_SNAPSHOTS")]
    INPLACESNAPSHOTS,
    
    /// "IN_USE_ADDRESSES"
    #[serde(rename="IN_USE_ADDRESSES")]
    INUSEADDRESSES,
    
    /// "IN_USE_BACKUP_SCHEDULES"
    #[serde(rename="IN_USE_BACKUP_SCHEDULES")]
    INUSEBACKUPSCHEDULES,
    
    /// "IN_USE_SNAPSHOT_SCHEDULES"
    #[serde(rename="IN_USE_SNAPSHOT_SCHEDULES")]
    INUSESNAPSHOTSCHEDULES,
    
    /// "LOCAL_SSD_TOTAL_GB"
    #[serde(rename="LOCAL_SSD_TOTAL_GB")]
    LOCALSSDTOTALGB,
    
    /// "M1_CPUS"
    #[serde(rename="M1_CPUS")]
    M1CPUS,
    
    /// "M2_CPUS"
    #[serde(rename="M2_CPUS")]
    M2CPUS,
    
    /// "M3_CPUS"
    #[serde(rename="M3_CPUS")]
    M3CPUS,
    
    /// "MACHINE_IMAGES"
    #[serde(rename="MACHINE_IMAGES")]
    MACHINEIMAGES,
    
    /// "N2A_CPUS"
    #[serde(rename="N2A_CPUS")]
    N2ACPUS,
    
    /// "N2D_CPUS"
    #[serde(rename="N2D_CPUS")]
    N2DCPUS,
    
    /// "N2_CPUS"
    #[serde(rename="N2_CPUS")]
    N2CPUS,
    
    /// "NETWORKS"
    #[serde(rename="NETWORKS")]
    NETWORKS,
    
    /// "NETWORK_ATTACHMENTS"
    #[serde(rename="NETWORK_ATTACHMENTS")]
    NETWORKATTACHMENTS,
    
    /// "NETWORK_ENDPOINT_GROUPS"
    #[serde(rename="NETWORK_ENDPOINT_GROUPS")]
    NETWORKENDPOINTGROUPS,
    
    /// "NETWORK_FIREWALL_POLICIES"
    #[serde(rename="NETWORK_FIREWALL_POLICIES")]
    NETWORKFIREWALLPOLICIES,
    
    /// "NET_LB_SECURITY_POLICIES_PER_REGION"
    #[serde(rename="NET_LB_SECURITY_POLICIES_PER_REGION")]
    NETLBSECURITYPOLICIESPERREGION,
    
    /// "NET_LB_SECURITY_POLICY_RULES_PER_REGION"
    #[serde(rename="NET_LB_SECURITY_POLICY_RULES_PER_REGION")]
    NETLBSECURITYPOLICYRULESPERREGION,
    
    /// "NET_LB_SECURITY_POLICY_RULE_ATTRIBUTES_PER_REGION"
    #[serde(rename="NET_LB_SECURITY_POLICY_RULE_ATTRIBUTES_PER_REGION")]
    NETLBSECURITYPOLICYRULEATTRIBUTESPERREGION,
    
    /// "NODE_GROUPS"
    #[serde(rename="NODE_GROUPS")]
    NODEGROUPS,
    
    /// "NODE_TEMPLATES"
    #[serde(rename="NODE_TEMPLATES")]
    NODETEMPLATES,
    
    /// "NVIDIA_A100_80GB_GPUS"
    #[serde(rename="NVIDIA_A100_80GB_GPUS")]
    NVIDIAA10080GBGPUS,
    
    /// "NVIDIA_A100_GPUS"
    #[serde(rename="NVIDIA_A100_GPUS")]
    NVIDIAA100GPUS,
    
    /// "NVIDIA_K80_GPUS"
    #[serde(rename="NVIDIA_K80_GPUS")]
    NVIDIAK80GPUS,
    
    /// "NVIDIA_L4_GPUS"
    #[serde(rename="NVIDIA_L4_GPUS")]
    NVIDIAL4GPUS,
    
    /// "NVIDIA_P100_GPUS"
    #[serde(rename="NVIDIA_P100_GPUS")]
    NVIDIAP100GPUS,
    
    /// "NVIDIA_P100_VWS_GPUS"
    #[serde(rename="NVIDIA_P100_VWS_GPUS")]
    NVIDIAP100VWSGPUS,
    
    /// "NVIDIA_P4_GPUS"
    #[serde(rename="NVIDIA_P4_GPUS")]
    NVIDIAP4GPUS,
    
    /// "NVIDIA_P4_VWS_GPUS"
    #[serde(rename="NVIDIA_P4_VWS_GPUS")]
    NVIDIAP4VWSGPUS,
    
    /// "NVIDIA_T4_GPUS"
    #[serde(rename="NVIDIA_T4_GPUS")]
    NVIDIAT4GPUS,
    
    /// "NVIDIA_T4_VWS_GPUS"
    #[serde(rename="NVIDIA_T4_VWS_GPUS")]
    NVIDIAT4VWSGPUS,
    
    /// "NVIDIA_V100_GPUS"
    #[serde(rename="NVIDIA_V100_GPUS")]
    NVIDIAV100GPUS,
    
    /// "PACKET_MIRRORINGS"
    #[serde(rename="PACKET_MIRRORINGS")]
    PACKETMIRRORINGS,
    
    /// "PD_EXTREME_TOTAL_PROVISIONED_IOPS"
    #[serde(rename="PD_EXTREME_TOTAL_PROVISIONED_IOPS")]
    PDEXTREMETOTALPROVISIONEDIOPS,
    
    /// "PREEMPTIBLE_CPUS"
    #[serde(rename="PREEMPTIBLE_CPUS")]
    PREEMPTIBLECPUS,
    
    /// "PREEMPTIBLE_LOCAL_SSD_GB"
    #[serde(rename="PREEMPTIBLE_LOCAL_SSD_GB")]
    PREEMPTIBLELOCALSSDGB,
    
    /// "PREEMPTIBLE_NVIDIA_A100_80GB_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_A100_80GB_GPUS")]
    PREEMPTIBLENVIDIAA10080GBGPUS,
    
    /// "PREEMPTIBLE_NVIDIA_A100_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_A100_GPUS")]
    PREEMPTIBLENVIDIAA100GPUS,
    
    /// "PREEMPTIBLE_NVIDIA_H100_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_H100_GPUS")]
    PREEMPTIBLENVIDIAH100GPUS,
    
    /// "PREEMPTIBLE_NVIDIA_K80_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_K80_GPUS")]
    PREEMPTIBLENVIDIAK80GPUS,
    
    /// "PREEMPTIBLE_NVIDIA_L4_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_L4_GPUS")]
    PREEMPTIBLENVIDIAL4GPUS,
    
    /// "PREEMPTIBLE_NVIDIA_P100_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_P100_GPUS")]
    PREEMPTIBLENVIDIAP100GPUS,
    
    /// "PREEMPTIBLE_NVIDIA_P100_VWS_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_P100_VWS_GPUS")]
    PREEMPTIBLENVIDIAP100VWSGPUS,
    
    /// "PREEMPTIBLE_NVIDIA_P4_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_P4_GPUS")]
    PREEMPTIBLENVIDIAP4GPUS,
    
    /// "PREEMPTIBLE_NVIDIA_P4_VWS_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_P4_VWS_GPUS")]
    PREEMPTIBLENVIDIAP4VWSGPUS,
    
    /// "PREEMPTIBLE_NVIDIA_T4_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_T4_GPUS")]
    PREEMPTIBLENVIDIAT4GPUS,
    
    /// "PREEMPTIBLE_NVIDIA_T4_VWS_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_T4_VWS_GPUS")]
    PREEMPTIBLENVIDIAT4VWSGPUS,
    
    /// "PREEMPTIBLE_NVIDIA_V100_GPUS"
    #[serde(rename="PREEMPTIBLE_NVIDIA_V100_GPUS")]
    PREEMPTIBLENVIDIAV100GPUS,
    
    /// "PREEMPTIBLE_TPU_LITE_DEVICE_V5"
    #[serde(rename="PREEMPTIBLE_TPU_LITE_DEVICE_V5")]
    PREEMPTIBLETPULITEDEVICEV5,
    
    /// "PREEMPTIBLE_TPU_LITE_PODSLICE_V5"
    #[serde(rename="PREEMPTIBLE_TPU_LITE_PODSLICE_V5")]
    PREEMPTIBLETPULITEPODSLICEV5,
    
    /// "PREEMPTIBLE_TPU_PODSLICE_V4"
    #[serde(rename="PREEMPTIBLE_TPU_PODSLICE_V4")]
    PREEMPTIBLETPUPODSLICEV4,
    
    /// "PSC_ILB_CONSUMER_FORWARDING_RULES_PER_PRODUCER_NETWORK"
    #[serde(rename="PSC_ILB_CONSUMER_FORWARDING_RULES_PER_PRODUCER_NETWORK")]
    PSCILBCONSUMERFORWARDINGRULESPERPRODUCERNETWORK,
    
    /// "PSC_INTERNAL_LB_FORWARDING_RULES"
    #[serde(rename="PSC_INTERNAL_LB_FORWARDING_RULES")]
    PSCINTERNALLBFORWARDINGRULES,
    
    /// "PUBLIC_ADVERTISED_PREFIXES"
    #[serde(rename="PUBLIC_ADVERTISED_PREFIXES")]
    PUBLICADVERTISEDPREFIXES,
    
    /// "PUBLIC_DELEGATED_PREFIXES"
    #[serde(rename="PUBLIC_DELEGATED_PREFIXES")]
    PUBLICDELEGATEDPREFIXES,
    
    /// "REGIONAL_AUTOSCALERS"
    #[serde(rename="REGIONAL_AUTOSCALERS")]
    REGIONALAUTOSCALERS,
    
    /// "REGIONAL_EXTERNAL_MANAGED_BACKEND_SERVICES"
    #[serde(rename="REGIONAL_EXTERNAL_MANAGED_BACKEND_SERVICES")]
    REGIONALEXTERNALMANAGEDBACKENDSERVICES,
    
    /// "REGIONAL_EXTERNAL_NETWORK_LB_BACKEND_SERVICES"
    #[serde(rename="REGIONAL_EXTERNAL_NETWORK_LB_BACKEND_SERVICES")]
    REGIONALEXTERNALNETWORKLBBACKENDSERVICES,
    
    /// "REGIONAL_INSTANCE_GROUP_MANAGERS"
    #[serde(rename="REGIONAL_INSTANCE_GROUP_MANAGERS")]
    REGIONALINSTANCEGROUPMANAGERS,
    
    /// "REGIONAL_INTERNAL_LB_BACKEND_SERVICES"
    #[serde(rename="REGIONAL_INTERNAL_LB_BACKEND_SERVICES")]
    REGIONALINTERNALLBBACKENDSERVICES,
    
    /// "REGIONAL_INTERNAL_MANAGED_BACKEND_SERVICES"
    #[serde(rename="REGIONAL_INTERNAL_MANAGED_BACKEND_SERVICES")]
    REGIONALINTERNALMANAGEDBACKENDSERVICES,
    
    /// "REGIONAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES"
    #[serde(rename="REGIONAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES")]
    REGIONALINTERNALTRAFFICDIRECTORBACKENDSERVICES,
    
    /// "RESERVATIONS"
    #[serde(rename="RESERVATIONS")]
    RESERVATIONS,
    
    /// "RESOURCE_POLICIES"
    #[serde(rename="RESOURCE_POLICIES")]
    RESOURCEPOLICIES,
    
    /// "ROUTERS"
    #[serde(rename="ROUTERS")]
    ROUTERS,
    
    /// "ROUTES"
    #[serde(rename="ROUTES")]
    ROUTES,
    
    /// "SECURITY_POLICIES"
    #[serde(rename="SECURITY_POLICIES")]
    SECURITYPOLICIES,
    
    /// "SECURITY_POLICIES_PER_REGION"
    #[serde(rename="SECURITY_POLICIES_PER_REGION")]
    SECURITYPOLICIESPERREGION,
    
    /// "SECURITY_POLICY_ADVANCED_RULES_PER_REGION"
    #[serde(rename="SECURITY_POLICY_ADVANCED_RULES_PER_REGION")]
    SECURITYPOLICYADVANCEDRULESPERREGION,
    
    /// "SECURITY_POLICY_CEVAL_RULES"
    #[serde(rename="SECURITY_POLICY_CEVAL_RULES")]
    SECURITYPOLICYCEVALRULES,
    
    /// "SECURITY_POLICY_RULES"
    #[serde(rename="SECURITY_POLICY_RULES")]
    SECURITYPOLICYRULES,
    
    /// "SECURITY_POLICY_RULES_PER_REGION"
    #[serde(rename="SECURITY_POLICY_RULES_PER_REGION")]
    SECURITYPOLICYRULESPERREGION,
    
    /// "SERVICE_ATTACHMENTS"
    #[serde(rename="SERVICE_ATTACHMENTS")]
    SERVICEATTACHMENTS,
    

    /// The total number of snapshots allowed for a single project.
    ///
    /// "SNAPSHOTS"
    #[serde(rename="SNAPSHOTS")]
    SNAPSHOTS,
    
    /// "SSD_TOTAL_GB"
    #[serde(rename="SSD_TOTAL_GB")]
    SSDTOTALGB,
    
    /// "SSL_CERTIFICATES"
    #[serde(rename="SSL_CERTIFICATES")]
    SSLCERTIFICATES,
    
    /// "STATIC_ADDRESSES"
    #[serde(rename="STATIC_ADDRESSES")]
    STATICADDRESSES,
    
    /// "STATIC_BYOIP_ADDRESSES"
    #[serde(rename="STATIC_BYOIP_ADDRESSES")]
    STATICBYOIPADDRESSES,
    
    /// "STATIC_EXTERNAL_IPV6_ADDRESS_RANGES"
    #[serde(rename="STATIC_EXTERNAL_IPV6_ADDRESS_RANGES")]
    STATICEXTERNALIPV6ADDRESSRANGES,
    
    /// "SUBNETWORKS"
    #[serde(rename="SUBNETWORKS")]
    SUBNETWORKS,
    
    /// "T2A_CPUS"
    #[serde(rename="T2A_CPUS")]
    T2ACPUS,
    
    /// "T2D_CPUS"
    #[serde(rename="T2D_CPUS")]
    T2DCPUS,
    
    /// "TARGET_HTTPS_PROXIES"
    #[serde(rename="TARGET_HTTPS_PROXIES")]
    TARGETHTTPSPROXIES,
    
    /// "TARGET_HTTP_PROXIES"
    #[serde(rename="TARGET_HTTP_PROXIES")]
    TARGETHTTPPROXIES,
    
    /// "TARGET_INSTANCES"
    #[serde(rename="TARGET_INSTANCES")]
    TARGETINSTANCES,
    
    /// "TARGET_POOLS"
    #[serde(rename="TARGET_POOLS")]
    TARGETPOOLS,
    
    /// "TARGET_SSL_PROXIES"
    #[serde(rename="TARGET_SSL_PROXIES")]
    TARGETSSLPROXIES,
    
    /// "TARGET_TCP_PROXIES"
    #[serde(rename="TARGET_TCP_PROXIES")]
    TARGETTCPPROXIES,
    
    /// "TARGET_VPN_GATEWAYS"
    #[serde(rename="TARGET_VPN_GATEWAYS")]
    TARGETVPNGATEWAYS,
    
    /// "TPU_LITE_DEVICE_V5"
    #[serde(rename="TPU_LITE_DEVICE_V5")]
    TPULITEDEVICEV5,
    
    /// "TPU_LITE_PODSLICE_V5"
    #[serde(rename="TPU_LITE_PODSLICE_V5")]
    TPULITEPODSLICEV5,
    
    /// "TPU_PODSLICE_V4"
    #[serde(rename="TPU_PODSLICE_V4")]
    TPUPODSLICEV4,
    
    /// "URL_MAPS"
    #[serde(rename="URL_MAPS")]
    URLMAPS,
    
    /// "VPN_GATEWAYS"
    #[serde(rename="VPN_GATEWAYS")]
    VPNGATEWAYS,
    
    /// "VPN_TUNNELS"
    #[serde(rename="VPN_TUNNELS")]
    VPNTUNNELS,
    
    /// "XPN_SERVICE_PROJECTS"
    #[serde(rename="XPN_SERVICE_PROJECTS")]
    XPNSERVICEPROJECTS,
}

impl AsRef<str> for QuotaMetricEnum {
    fn as_ref(&self) -> &str {
        match *self {
            QuotaMetricEnum::A2CPUS => "A2_CPUS",
            QuotaMetricEnum::AFFINITYGROUPS => "AFFINITY_GROUPS",
            QuotaMetricEnum::AUTOSCALERS => "AUTOSCALERS",
            QuotaMetricEnum::BACKENDBUCKETS => "BACKEND_BUCKETS",
            QuotaMetricEnum::BACKENDSERVICES => "BACKEND_SERVICES",
            QuotaMetricEnum::C2DCPUS => "C2D_CPUS",
            QuotaMetricEnum::C2CPUS => "C2_CPUS",
            QuotaMetricEnum::C3CPUS => "C3_CPUS",
            QuotaMetricEnum::COMMITMENTS => "COMMITMENTS",
            QuotaMetricEnum::COMMITTEDA2CPUS => "COMMITTED_A2_CPUS",
            QuotaMetricEnum::COMMITTEDC2DCPUS => "COMMITTED_C2D_CPUS",
            QuotaMetricEnum::COMMITTEDC2CPUS => "COMMITTED_C2_CPUS",
            QuotaMetricEnum::COMMITTEDC3CPUS => "COMMITTED_C3_CPUS",
            QuotaMetricEnum::COMMITTEDCPUS => "COMMITTED_CPUS",
            QuotaMetricEnum::COMMITTEDE2CPUS => "COMMITTED_E2_CPUS",
            QuotaMetricEnum::COMMITTEDLICENSES => "COMMITTED_LICENSES",
            QuotaMetricEnum::COMMITTEDLOCALSSDTOTALGB => "COMMITTED_LOCAL_SSD_TOTAL_GB",
            QuotaMetricEnum::COMMITTEDM3CPUS => "COMMITTED_M3_CPUS",
            QuotaMetricEnum::COMMITTEDMEMORYOPTIMIZEDCPUS => "COMMITTED_MEMORY_OPTIMIZED_CPUS",
            QuotaMetricEnum::COMMITTEDN2ACPUS => "COMMITTED_N2A_CPUS",
            QuotaMetricEnum::COMMITTEDN2DCPUS => "COMMITTED_N2D_CPUS",
            QuotaMetricEnum::COMMITTEDN2CPUS => "COMMITTED_N2_CPUS",
            QuotaMetricEnum::COMMITTEDNVIDIAA10080GBGPUS => "COMMITTED_NVIDIA_A100_80GB_GPUS",
            QuotaMetricEnum::COMMITTEDNVIDIAA100GPUS => "COMMITTED_NVIDIA_A100_GPUS",
            QuotaMetricEnum::COMMITTEDNVIDIAH100GPUS => "COMMITTED_NVIDIA_H100_GPUS",
            QuotaMetricEnum::COMMITTEDNVIDIAK80GPUS => "COMMITTED_NVIDIA_K80_GPUS",
            QuotaMetricEnum::COMMITTEDNVIDIAL4GPUS => "COMMITTED_NVIDIA_L4_GPUS",
            QuotaMetricEnum::COMMITTEDNVIDIAP100GPUS => "COMMITTED_NVIDIA_P100_GPUS",
            QuotaMetricEnum::COMMITTEDNVIDIAP4GPUS => "COMMITTED_NVIDIA_P4_GPUS",
            QuotaMetricEnum::COMMITTEDNVIDIAT4GPUS => "COMMITTED_NVIDIA_T4_GPUS",
            QuotaMetricEnum::COMMITTEDNVIDIAV100GPUS => "COMMITTED_NVIDIA_V100_GPUS",
            QuotaMetricEnum::COMMITTEDT2ACPUS => "COMMITTED_T2A_CPUS",
            QuotaMetricEnum::COMMITTEDT2DCPUS => "COMMITTED_T2D_CPUS",
            QuotaMetricEnum::COMMITTEDZ3CPUS => "COMMITTED_Z3_CPUS",
            QuotaMetricEnum::CPUS => "CPUS",
            QuotaMetricEnum::CPUSALLREGIONS => "CPUS_ALL_REGIONS",
            QuotaMetricEnum::DISKSTOTALGB => "DISKS_TOTAL_GB",
            QuotaMetricEnum::E2CPUS => "E2_CPUS",
            QuotaMetricEnum::EXTERNALMANAGEDFORWARDINGRULES => "EXTERNAL_MANAGED_FORWARDING_RULES",
            QuotaMetricEnum::EXTERNALNETWORKLBFORWARDINGRULES => "EXTERNAL_NETWORK_LB_FORWARDING_RULES",
            QuotaMetricEnum::EXTERNALPROTOCOLFORWARDINGRULES => "EXTERNAL_PROTOCOL_FORWARDING_RULES",
            QuotaMetricEnum::EXTERNALVPNGATEWAYS => "EXTERNAL_VPN_GATEWAYS",
            QuotaMetricEnum::FIREWALLS => "FIREWALLS",
            QuotaMetricEnum::FORWARDINGRULES => "FORWARDING_RULES",
            QuotaMetricEnum::GLOBALEXTERNALMANAGEDBACKENDSERVICES => "GLOBAL_EXTERNAL_MANAGED_BACKEND_SERVICES",
            QuotaMetricEnum::GLOBALEXTERNALMANAGEDFORWARDINGRULES => "GLOBAL_EXTERNAL_MANAGED_FORWARDING_RULES",
            QuotaMetricEnum::GLOBALEXTERNALPROXYLBBACKENDSERVICES => "GLOBAL_EXTERNAL_PROXY_LB_BACKEND_SERVICES",
            QuotaMetricEnum::GLOBALINTERNALADDRESSES => "GLOBAL_INTERNAL_ADDRESSES",
            QuotaMetricEnum::GLOBALINTERNALMANAGEDBACKENDSERVICES => "GLOBAL_INTERNAL_MANAGED_BACKEND_SERVICES",
            QuotaMetricEnum::GLOBALINTERNALTRAFFICDIRECTORBACKENDSERVICES => "GLOBAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES",
            QuotaMetricEnum::GPUSALLREGIONS => "GPUS_ALL_REGIONS",
            QuotaMetricEnum::HDBTOTALGB => "HDB_TOTAL_GB",
            QuotaMetricEnum::HDBTOTALIOPS => "HDB_TOTAL_IOPS",
            QuotaMetricEnum::HDBTOTALTHROUGHPUT => "HDB_TOTAL_THROUGHPUT",
            QuotaMetricEnum::HEALTHCHECKS => "HEALTH_CHECKS",
            QuotaMetricEnum::IMAGES => "IMAGES",
            QuotaMetricEnum::INSTANCES => "INSTANCES",
            QuotaMetricEnum::INSTANCEGROUPS => "INSTANCE_GROUPS",
            QuotaMetricEnum::INSTANCEGROUPMANAGERS => "INSTANCE_GROUP_MANAGERS",
            QuotaMetricEnum::INSTANCETEMPLATES => "INSTANCE_TEMPLATES",
            QuotaMetricEnum::INTERCONNECTS => "INTERCONNECTS",
            QuotaMetricEnum::INTERCONNECTATTACHMENTSPERREGION => "INTERCONNECT_ATTACHMENTS_PER_REGION",
            QuotaMetricEnum::INTERCONNECTATTACHMENTSTOTALMBPS => "INTERCONNECT_ATTACHMENTS_TOTAL_MBPS",
            QuotaMetricEnum::INTERCONNECTTOTALGBPS => "INTERCONNECT_TOTAL_GBPS",
            QuotaMetricEnum::INTERNALADDRESSES => "INTERNAL_ADDRESSES",
            QuotaMetricEnum::INTERNALTRAFFICDIRECTORFORWARDINGRULES => "INTERNAL_TRAFFIC_DIRECTOR_FORWARDING_RULES",
            QuotaMetricEnum::INPLACESNAPSHOTS => "IN_PLACE_SNAPSHOTS",
            QuotaMetricEnum::INUSEADDRESSES => "IN_USE_ADDRESSES",
            QuotaMetricEnum::INUSEBACKUPSCHEDULES => "IN_USE_BACKUP_SCHEDULES",
            QuotaMetricEnum::INUSESNAPSHOTSCHEDULES => "IN_USE_SNAPSHOT_SCHEDULES",
            QuotaMetricEnum::LOCALSSDTOTALGB => "LOCAL_SSD_TOTAL_GB",
            QuotaMetricEnum::M1CPUS => "M1_CPUS",
            QuotaMetricEnum::M2CPUS => "M2_CPUS",
            QuotaMetricEnum::M3CPUS => "M3_CPUS",
            QuotaMetricEnum::MACHINEIMAGES => "MACHINE_IMAGES",
            QuotaMetricEnum::N2ACPUS => "N2A_CPUS",
            QuotaMetricEnum::N2DCPUS => "N2D_CPUS",
            QuotaMetricEnum::N2CPUS => "N2_CPUS",
            QuotaMetricEnum::NETWORKS => "NETWORKS",
            QuotaMetricEnum::NETWORKATTACHMENTS => "NETWORK_ATTACHMENTS",
            QuotaMetricEnum::NETWORKENDPOINTGROUPS => "NETWORK_ENDPOINT_GROUPS",
            QuotaMetricEnum::NETWORKFIREWALLPOLICIES => "NETWORK_FIREWALL_POLICIES",
            QuotaMetricEnum::NETLBSECURITYPOLICIESPERREGION => "NET_LB_SECURITY_POLICIES_PER_REGION",
            QuotaMetricEnum::NETLBSECURITYPOLICYRULESPERREGION => "NET_LB_SECURITY_POLICY_RULES_PER_REGION",
            QuotaMetricEnum::NETLBSECURITYPOLICYRULEATTRIBUTESPERREGION => "NET_LB_SECURITY_POLICY_RULE_ATTRIBUTES_PER_REGION",
            QuotaMetricEnum::NODEGROUPS => "NODE_GROUPS",
            QuotaMetricEnum::NODETEMPLATES => "NODE_TEMPLATES",
            QuotaMetricEnum::NVIDIAA10080GBGPUS => "NVIDIA_A100_80GB_GPUS",
            QuotaMetricEnum::NVIDIAA100GPUS => "NVIDIA_A100_GPUS",
            QuotaMetricEnum::NVIDIAK80GPUS => "NVIDIA_K80_GPUS",
            QuotaMetricEnum::NVIDIAL4GPUS => "NVIDIA_L4_GPUS",
            QuotaMetricEnum::NVIDIAP100GPUS => "NVIDIA_P100_GPUS",
            QuotaMetricEnum::NVIDIAP100VWSGPUS => "NVIDIA_P100_VWS_GPUS",
            QuotaMetricEnum::NVIDIAP4GPUS => "NVIDIA_P4_GPUS",
            QuotaMetricEnum::NVIDIAP4VWSGPUS => "NVIDIA_P4_VWS_GPUS",
            QuotaMetricEnum::NVIDIAT4GPUS => "NVIDIA_T4_GPUS",
            QuotaMetricEnum::NVIDIAT4VWSGPUS => "NVIDIA_T4_VWS_GPUS",
            QuotaMetricEnum::NVIDIAV100GPUS => "NVIDIA_V100_GPUS",
            QuotaMetricEnum::PACKETMIRRORINGS => "PACKET_MIRRORINGS",
            QuotaMetricEnum::PDEXTREMETOTALPROVISIONEDIOPS => "PD_EXTREME_TOTAL_PROVISIONED_IOPS",
            QuotaMetricEnum::PREEMPTIBLECPUS => "PREEMPTIBLE_CPUS",
            QuotaMetricEnum::PREEMPTIBLELOCALSSDGB => "PREEMPTIBLE_LOCAL_SSD_GB",
            QuotaMetricEnum::PREEMPTIBLENVIDIAA10080GBGPUS => "PREEMPTIBLE_NVIDIA_A100_80GB_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAA100GPUS => "PREEMPTIBLE_NVIDIA_A100_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAH100GPUS => "PREEMPTIBLE_NVIDIA_H100_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAK80GPUS => "PREEMPTIBLE_NVIDIA_K80_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAL4GPUS => "PREEMPTIBLE_NVIDIA_L4_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAP100GPUS => "PREEMPTIBLE_NVIDIA_P100_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAP100VWSGPUS => "PREEMPTIBLE_NVIDIA_P100_VWS_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAP4GPUS => "PREEMPTIBLE_NVIDIA_P4_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAP4VWSGPUS => "PREEMPTIBLE_NVIDIA_P4_VWS_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAT4GPUS => "PREEMPTIBLE_NVIDIA_T4_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAT4VWSGPUS => "PREEMPTIBLE_NVIDIA_T4_VWS_GPUS",
            QuotaMetricEnum::PREEMPTIBLENVIDIAV100GPUS => "PREEMPTIBLE_NVIDIA_V100_GPUS",
            QuotaMetricEnum::PREEMPTIBLETPULITEDEVICEV5 => "PREEMPTIBLE_TPU_LITE_DEVICE_V5",
            QuotaMetricEnum::PREEMPTIBLETPULITEPODSLICEV5 => "PREEMPTIBLE_TPU_LITE_PODSLICE_V5",
            QuotaMetricEnum::PREEMPTIBLETPUPODSLICEV4 => "PREEMPTIBLE_TPU_PODSLICE_V4",
            QuotaMetricEnum::PSCILBCONSUMERFORWARDINGRULESPERPRODUCERNETWORK => "PSC_ILB_CONSUMER_FORWARDING_RULES_PER_PRODUCER_NETWORK",
            QuotaMetricEnum::PSCINTERNALLBFORWARDINGRULES => "PSC_INTERNAL_LB_FORWARDING_RULES",
            QuotaMetricEnum::PUBLICADVERTISEDPREFIXES => "PUBLIC_ADVERTISED_PREFIXES",
            QuotaMetricEnum::PUBLICDELEGATEDPREFIXES => "PUBLIC_DELEGATED_PREFIXES",
            QuotaMetricEnum::REGIONALAUTOSCALERS => "REGIONAL_AUTOSCALERS",
            QuotaMetricEnum::REGIONALEXTERNALMANAGEDBACKENDSERVICES => "REGIONAL_EXTERNAL_MANAGED_BACKEND_SERVICES",
            QuotaMetricEnum::REGIONALEXTERNALNETWORKLBBACKENDSERVICES => "REGIONAL_EXTERNAL_NETWORK_LB_BACKEND_SERVICES",
            QuotaMetricEnum::REGIONALINSTANCEGROUPMANAGERS => "REGIONAL_INSTANCE_GROUP_MANAGERS",
            QuotaMetricEnum::REGIONALINTERNALLBBACKENDSERVICES => "REGIONAL_INTERNAL_LB_BACKEND_SERVICES",
            QuotaMetricEnum::REGIONALINTERNALMANAGEDBACKENDSERVICES => "REGIONAL_INTERNAL_MANAGED_BACKEND_SERVICES",
            QuotaMetricEnum::REGIONALINTERNALTRAFFICDIRECTORBACKENDSERVICES => "REGIONAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES",
            QuotaMetricEnum::RESERVATIONS => "RESERVATIONS",
            QuotaMetricEnum::RESOURCEPOLICIES => "RESOURCE_POLICIES",
            QuotaMetricEnum::ROUTERS => "ROUTERS",
            QuotaMetricEnum::ROUTES => "ROUTES",
            QuotaMetricEnum::SECURITYPOLICIES => "SECURITY_POLICIES",
            QuotaMetricEnum::SECURITYPOLICIESPERREGION => "SECURITY_POLICIES_PER_REGION",
            QuotaMetricEnum::SECURITYPOLICYADVANCEDRULESPERREGION => "SECURITY_POLICY_ADVANCED_RULES_PER_REGION",
            QuotaMetricEnum::SECURITYPOLICYCEVALRULES => "SECURITY_POLICY_CEVAL_RULES",
            QuotaMetricEnum::SECURITYPOLICYRULES => "SECURITY_POLICY_RULES",
            QuotaMetricEnum::SECURITYPOLICYRULESPERREGION => "SECURITY_POLICY_RULES_PER_REGION",
            QuotaMetricEnum::SERVICEATTACHMENTS => "SERVICE_ATTACHMENTS",
            QuotaMetricEnum::SNAPSHOTS => "SNAPSHOTS",
            QuotaMetricEnum::SSDTOTALGB => "SSD_TOTAL_GB",
            QuotaMetricEnum::SSLCERTIFICATES => "SSL_CERTIFICATES",
            QuotaMetricEnum::STATICADDRESSES => "STATIC_ADDRESSES",
            QuotaMetricEnum::STATICBYOIPADDRESSES => "STATIC_BYOIP_ADDRESSES",
            QuotaMetricEnum::STATICEXTERNALIPV6ADDRESSRANGES => "STATIC_EXTERNAL_IPV6_ADDRESS_RANGES",
            QuotaMetricEnum::SUBNETWORKS => "SUBNETWORKS",
            QuotaMetricEnum::T2ACPUS => "T2A_CPUS",
            QuotaMetricEnum::T2DCPUS => "T2D_CPUS",
            QuotaMetricEnum::TARGETHTTPSPROXIES => "TARGET_HTTPS_PROXIES",
            QuotaMetricEnum::TARGETHTTPPROXIES => "TARGET_HTTP_PROXIES",
            QuotaMetricEnum::TARGETINSTANCES => "TARGET_INSTANCES",
            QuotaMetricEnum::TARGETPOOLS => "TARGET_POOLS",
            QuotaMetricEnum::TARGETSSLPROXIES => "TARGET_SSL_PROXIES",
            QuotaMetricEnum::TARGETTCPPROXIES => "TARGET_TCP_PROXIES",
            QuotaMetricEnum::TARGETVPNGATEWAYS => "TARGET_VPN_GATEWAYS",
            QuotaMetricEnum::TPULITEDEVICEV5 => "TPU_LITE_DEVICE_V5",
            QuotaMetricEnum::TPULITEPODSLICEV5 => "TPU_LITE_PODSLICE_V5",
            QuotaMetricEnum::TPUPODSLICEV4 => "TPU_PODSLICE_V4",
            QuotaMetricEnum::URLMAPS => "URL_MAPS",
            QuotaMetricEnum::VPNGATEWAYS => "VPN_GATEWAYS",
            QuotaMetricEnum::VPNTUNNELS => "VPN_TUNNELS",
            QuotaMetricEnum::XPNSERVICEPROJECTS => "XPN_SERVICE_PROJECTS",
        }
    }
}

impl std::convert::TryFrom< &str> for QuotaMetricEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "A2_CPUS" => Ok(QuotaMetricEnum::A2CPUS),
           "AFFINITY_GROUPS" => Ok(QuotaMetricEnum::AFFINITYGROUPS),
           "AUTOSCALERS" => Ok(QuotaMetricEnum::AUTOSCALERS),
           "BACKEND_BUCKETS" => Ok(QuotaMetricEnum::BACKENDBUCKETS),
           "BACKEND_SERVICES" => Ok(QuotaMetricEnum::BACKENDSERVICES),
           "C2D_CPUS" => Ok(QuotaMetricEnum::C2DCPUS),
           "C2_CPUS" => Ok(QuotaMetricEnum::C2CPUS),
           "C3_CPUS" => Ok(QuotaMetricEnum::C3CPUS),
           "COMMITMENTS" => Ok(QuotaMetricEnum::COMMITMENTS),
           "COMMITTED_A2_CPUS" => Ok(QuotaMetricEnum::COMMITTEDA2CPUS),
           "COMMITTED_C2D_CPUS" => Ok(QuotaMetricEnum::COMMITTEDC2DCPUS),
           "COMMITTED_C2_CPUS" => Ok(QuotaMetricEnum::COMMITTEDC2CPUS),
           "COMMITTED_C3_CPUS" => Ok(QuotaMetricEnum::COMMITTEDC3CPUS),
           "COMMITTED_CPUS" => Ok(QuotaMetricEnum::COMMITTEDCPUS),
           "COMMITTED_E2_CPUS" => Ok(QuotaMetricEnum::COMMITTEDE2CPUS),
           "COMMITTED_LICENSES" => Ok(QuotaMetricEnum::COMMITTEDLICENSES),
           "COMMITTED_LOCAL_SSD_TOTAL_GB" => Ok(QuotaMetricEnum::COMMITTEDLOCALSSDTOTALGB),
           "COMMITTED_M3_CPUS" => Ok(QuotaMetricEnum::COMMITTEDM3CPUS),
           "COMMITTED_MEMORY_OPTIMIZED_CPUS" => Ok(QuotaMetricEnum::COMMITTEDMEMORYOPTIMIZEDCPUS),
           "COMMITTED_N2A_CPUS" => Ok(QuotaMetricEnum::COMMITTEDN2ACPUS),
           "COMMITTED_N2D_CPUS" => Ok(QuotaMetricEnum::COMMITTEDN2DCPUS),
           "COMMITTED_N2_CPUS" => Ok(QuotaMetricEnum::COMMITTEDN2CPUS),
           "COMMITTED_NVIDIA_A100_80GB_GPUS" => Ok(QuotaMetricEnum::COMMITTEDNVIDIAA10080GBGPUS),
           "COMMITTED_NVIDIA_A100_GPUS" => Ok(QuotaMetricEnum::COMMITTEDNVIDIAA100GPUS),
           "COMMITTED_NVIDIA_H100_GPUS" => Ok(QuotaMetricEnum::COMMITTEDNVIDIAH100GPUS),
           "COMMITTED_NVIDIA_K80_GPUS" => Ok(QuotaMetricEnum::COMMITTEDNVIDIAK80GPUS),
           "COMMITTED_NVIDIA_L4_GPUS" => Ok(QuotaMetricEnum::COMMITTEDNVIDIAL4GPUS),
           "COMMITTED_NVIDIA_P100_GPUS" => Ok(QuotaMetricEnum::COMMITTEDNVIDIAP100GPUS),
           "COMMITTED_NVIDIA_P4_GPUS" => Ok(QuotaMetricEnum::COMMITTEDNVIDIAP4GPUS),
           "COMMITTED_NVIDIA_T4_GPUS" => Ok(QuotaMetricEnum::COMMITTEDNVIDIAT4GPUS),
           "COMMITTED_NVIDIA_V100_GPUS" => Ok(QuotaMetricEnum::COMMITTEDNVIDIAV100GPUS),
           "COMMITTED_T2A_CPUS" => Ok(QuotaMetricEnum::COMMITTEDT2ACPUS),
           "COMMITTED_T2D_CPUS" => Ok(QuotaMetricEnum::COMMITTEDT2DCPUS),
           "COMMITTED_Z3_CPUS" => Ok(QuotaMetricEnum::COMMITTEDZ3CPUS),
           "CPUS" => Ok(QuotaMetricEnum::CPUS),
           "CPUS_ALL_REGIONS" => Ok(QuotaMetricEnum::CPUSALLREGIONS),
           "DISKS_TOTAL_GB" => Ok(QuotaMetricEnum::DISKSTOTALGB),
           "E2_CPUS" => Ok(QuotaMetricEnum::E2CPUS),
           "EXTERNAL_MANAGED_FORWARDING_RULES" => Ok(QuotaMetricEnum::EXTERNALMANAGEDFORWARDINGRULES),
           "EXTERNAL_NETWORK_LB_FORWARDING_RULES" => Ok(QuotaMetricEnum::EXTERNALNETWORKLBFORWARDINGRULES),
           "EXTERNAL_PROTOCOL_FORWARDING_RULES" => Ok(QuotaMetricEnum::EXTERNALPROTOCOLFORWARDINGRULES),
           "EXTERNAL_VPN_GATEWAYS" => Ok(QuotaMetricEnum::EXTERNALVPNGATEWAYS),
           "FIREWALLS" => Ok(QuotaMetricEnum::FIREWALLS),
           "FORWARDING_RULES" => Ok(QuotaMetricEnum::FORWARDINGRULES),
           "GLOBAL_EXTERNAL_MANAGED_BACKEND_SERVICES" => Ok(QuotaMetricEnum::GLOBALEXTERNALMANAGEDBACKENDSERVICES),
           "GLOBAL_EXTERNAL_MANAGED_FORWARDING_RULES" => Ok(QuotaMetricEnum::GLOBALEXTERNALMANAGEDFORWARDINGRULES),
           "GLOBAL_EXTERNAL_PROXY_LB_BACKEND_SERVICES" => Ok(QuotaMetricEnum::GLOBALEXTERNALPROXYLBBACKENDSERVICES),
           "GLOBAL_INTERNAL_ADDRESSES" => Ok(QuotaMetricEnum::GLOBALINTERNALADDRESSES),
           "GLOBAL_INTERNAL_MANAGED_BACKEND_SERVICES" => Ok(QuotaMetricEnum::GLOBALINTERNALMANAGEDBACKENDSERVICES),
           "GLOBAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES" => Ok(QuotaMetricEnum::GLOBALINTERNALTRAFFICDIRECTORBACKENDSERVICES),
           "GPUS_ALL_REGIONS" => Ok(QuotaMetricEnum::GPUSALLREGIONS),
           "HDB_TOTAL_GB" => Ok(QuotaMetricEnum::HDBTOTALGB),
           "HDB_TOTAL_IOPS" => Ok(QuotaMetricEnum::HDBTOTALIOPS),
           "HDB_TOTAL_THROUGHPUT" => Ok(QuotaMetricEnum::HDBTOTALTHROUGHPUT),
           "HEALTH_CHECKS" => Ok(QuotaMetricEnum::HEALTHCHECKS),
           "IMAGES" => Ok(QuotaMetricEnum::IMAGES),
           "INSTANCES" => Ok(QuotaMetricEnum::INSTANCES),
           "INSTANCE_GROUPS" => Ok(QuotaMetricEnum::INSTANCEGROUPS),
           "INSTANCE_GROUP_MANAGERS" => Ok(QuotaMetricEnum::INSTANCEGROUPMANAGERS),
           "INSTANCE_TEMPLATES" => Ok(QuotaMetricEnum::INSTANCETEMPLATES),
           "INTERCONNECTS" => Ok(QuotaMetricEnum::INTERCONNECTS),
           "INTERCONNECT_ATTACHMENTS_PER_REGION" => Ok(QuotaMetricEnum::INTERCONNECTATTACHMENTSPERREGION),
           "INTERCONNECT_ATTACHMENTS_TOTAL_MBPS" => Ok(QuotaMetricEnum::INTERCONNECTATTACHMENTSTOTALMBPS),
           "INTERCONNECT_TOTAL_GBPS" => Ok(QuotaMetricEnum::INTERCONNECTTOTALGBPS),
           "INTERNAL_ADDRESSES" => Ok(QuotaMetricEnum::INTERNALADDRESSES),
           "INTERNAL_TRAFFIC_DIRECTOR_FORWARDING_RULES" => Ok(QuotaMetricEnum::INTERNALTRAFFICDIRECTORFORWARDINGRULES),
           "IN_PLACE_SNAPSHOTS" => Ok(QuotaMetricEnum::INPLACESNAPSHOTS),
           "IN_USE_ADDRESSES" => Ok(QuotaMetricEnum::INUSEADDRESSES),
           "IN_USE_BACKUP_SCHEDULES" => Ok(QuotaMetricEnum::INUSEBACKUPSCHEDULES),
           "IN_USE_SNAPSHOT_SCHEDULES" => Ok(QuotaMetricEnum::INUSESNAPSHOTSCHEDULES),
           "LOCAL_SSD_TOTAL_GB" => Ok(QuotaMetricEnum::LOCALSSDTOTALGB),
           "M1_CPUS" => Ok(QuotaMetricEnum::M1CPUS),
           "M2_CPUS" => Ok(QuotaMetricEnum::M2CPUS),
           "M3_CPUS" => Ok(QuotaMetricEnum::M3CPUS),
           "MACHINE_IMAGES" => Ok(QuotaMetricEnum::MACHINEIMAGES),
           "N2A_CPUS" => Ok(QuotaMetricEnum::N2ACPUS),
           "N2D_CPUS" => Ok(QuotaMetricEnum::N2DCPUS),
           "N2_CPUS" => Ok(QuotaMetricEnum::N2CPUS),
           "NETWORKS" => Ok(QuotaMetricEnum::NETWORKS),
           "NETWORK_ATTACHMENTS" => Ok(QuotaMetricEnum::NETWORKATTACHMENTS),
           "NETWORK_ENDPOINT_GROUPS" => Ok(QuotaMetricEnum::NETWORKENDPOINTGROUPS),
           "NETWORK_FIREWALL_POLICIES" => Ok(QuotaMetricEnum::NETWORKFIREWALLPOLICIES),
           "NET_LB_SECURITY_POLICIES_PER_REGION" => Ok(QuotaMetricEnum::NETLBSECURITYPOLICIESPERREGION),
           "NET_LB_SECURITY_POLICY_RULES_PER_REGION" => Ok(QuotaMetricEnum::NETLBSECURITYPOLICYRULESPERREGION),
           "NET_LB_SECURITY_POLICY_RULE_ATTRIBUTES_PER_REGION" => Ok(QuotaMetricEnum::NETLBSECURITYPOLICYRULEATTRIBUTESPERREGION),
           "NODE_GROUPS" => Ok(QuotaMetricEnum::NODEGROUPS),
           "NODE_TEMPLATES" => Ok(QuotaMetricEnum::NODETEMPLATES),
           "NVIDIA_A100_80GB_GPUS" => Ok(QuotaMetricEnum::NVIDIAA10080GBGPUS),
           "NVIDIA_A100_GPUS" => Ok(QuotaMetricEnum::NVIDIAA100GPUS),
           "NVIDIA_K80_GPUS" => Ok(QuotaMetricEnum::NVIDIAK80GPUS),
           "NVIDIA_L4_GPUS" => Ok(QuotaMetricEnum::NVIDIAL4GPUS),
           "NVIDIA_P100_GPUS" => Ok(QuotaMetricEnum::NVIDIAP100GPUS),
           "NVIDIA_P100_VWS_GPUS" => Ok(QuotaMetricEnum::NVIDIAP100VWSGPUS),
           "NVIDIA_P4_GPUS" => Ok(QuotaMetricEnum::NVIDIAP4GPUS),
           "NVIDIA_P4_VWS_GPUS" => Ok(QuotaMetricEnum::NVIDIAP4VWSGPUS),
           "NVIDIA_T4_GPUS" => Ok(QuotaMetricEnum::NVIDIAT4GPUS),
           "NVIDIA_T4_VWS_GPUS" => Ok(QuotaMetricEnum::NVIDIAT4VWSGPUS),
           "NVIDIA_V100_GPUS" => Ok(QuotaMetricEnum::NVIDIAV100GPUS),
           "PACKET_MIRRORINGS" => Ok(QuotaMetricEnum::PACKETMIRRORINGS),
           "PD_EXTREME_TOTAL_PROVISIONED_IOPS" => Ok(QuotaMetricEnum::PDEXTREMETOTALPROVISIONEDIOPS),
           "PREEMPTIBLE_CPUS" => Ok(QuotaMetricEnum::PREEMPTIBLECPUS),
           "PREEMPTIBLE_LOCAL_SSD_GB" => Ok(QuotaMetricEnum::PREEMPTIBLELOCALSSDGB),
           "PREEMPTIBLE_NVIDIA_A100_80GB_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAA10080GBGPUS),
           "PREEMPTIBLE_NVIDIA_A100_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAA100GPUS),
           "PREEMPTIBLE_NVIDIA_H100_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAH100GPUS),
           "PREEMPTIBLE_NVIDIA_K80_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAK80GPUS),
           "PREEMPTIBLE_NVIDIA_L4_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAL4GPUS),
           "PREEMPTIBLE_NVIDIA_P100_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAP100GPUS),
           "PREEMPTIBLE_NVIDIA_P100_VWS_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAP100VWSGPUS),
           "PREEMPTIBLE_NVIDIA_P4_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAP4GPUS),
           "PREEMPTIBLE_NVIDIA_P4_VWS_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAP4VWSGPUS),
           "PREEMPTIBLE_NVIDIA_T4_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAT4GPUS),
           "PREEMPTIBLE_NVIDIA_T4_VWS_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAT4VWSGPUS),
           "PREEMPTIBLE_NVIDIA_V100_GPUS" => Ok(QuotaMetricEnum::PREEMPTIBLENVIDIAV100GPUS),
           "PREEMPTIBLE_TPU_LITE_DEVICE_V5" => Ok(QuotaMetricEnum::PREEMPTIBLETPULITEDEVICEV5),
           "PREEMPTIBLE_TPU_LITE_PODSLICE_V5" => Ok(QuotaMetricEnum::PREEMPTIBLETPULITEPODSLICEV5),
           "PREEMPTIBLE_TPU_PODSLICE_V4" => Ok(QuotaMetricEnum::PREEMPTIBLETPUPODSLICEV4),
           "PSC_ILB_CONSUMER_FORWARDING_RULES_PER_PRODUCER_NETWORK" => Ok(QuotaMetricEnum::PSCILBCONSUMERFORWARDINGRULESPERPRODUCERNETWORK),
           "PSC_INTERNAL_LB_FORWARDING_RULES" => Ok(QuotaMetricEnum::PSCINTERNALLBFORWARDINGRULES),
           "PUBLIC_ADVERTISED_PREFIXES" => Ok(QuotaMetricEnum::PUBLICADVERTISEDPREFIXES),
           "PUBLIC_DELEGATED_PREFIXES" => Ok(QuotaMetricEnum::PUBLICDELEGATEDPREFIXES),
           "REGIONAL_AUTOSCALERS" => Ok(QuotaMetricEnum::REGIONALAUTOSCALERS),
           "REGIONAL_EXTERNAL_MANAGED_BACKEND_SERVICES" => Ok(QuotaMetricEnum::REGIONALEXTERNALMANAGEDBACKENDSERVICES),
           "REGIONAL_EXTERNAL_NETWORK_LB_BACKEND_SERVICES" => Ok(QuotaMetricEnum::REGIONALEXTERNALNETWORKLBBACKENDSERVICES),
           "REGIONAL_INSTANCE_GROUP_MANAGERS" => Ok(QuotaMetricEnum::REGIONALINSTANCEGROUPMANAGERS),
           "REGIONAL_INTERNAL_LB_BACKEND_SERVICES" => Ok(QuotaMetricEnum::REGIONALINTERNALLBBACKENDSERVICES),
           "REGIONAL_INTERNAL_MANAGED_BACKEND_SERVICES" => Ok(QuotaMetricEnum::REGIONALINTERNALMANAGEDBACKENDSERVICES),
           "REGIONAL_INTERNAL_TRAFFIC_DIRECTOR_BACKEND_SERVICES" => Ok(QuotaMetricEnum::REGIONALINTERNALTRAFFICDIRECTORBACKENDSERVICES),
           "RESERVATIONS" => Ok(QuotaMetricEnum::RESERVATIONS),
           "RESOURCE_POLICIES" => Ok(QuotaMetricEnum::RESOURCEPOLICIES),
           "ROUTERS" => Ok(QuotaMetricEnum::ROUTERS),
           "ROUTES" => Ok(QuotaMetricEnum::ROUTES),
           "SECURITY_POLICIES" => Ok(QuotaMetricEnum::SECURITYPOLICIES),
           "SECURITY_POLICIES_PER_REGION" => Ok(QuotaMetricEnum::SECURITYPOLICIESPERREGION),
           "SECURITY_POLICY_ADVANCED_RULES_PER_REGION" => Ok(QuotaMetricEnum::SECURITYPOLICYADVANCEDRULESPERREGION),
           "SECURITY_POLICY_CEVAL_RULES" => Ok(QuotaMetricEnum::SECURITYPOLICYCEVALRULES),
           "SECURITY_POLICY_RULES" => Ok(QuotaMetricEnum::SECURITYPOLICYRULES),
           "SECURITY_POLICY_RULES_PER_REGION" => Ok(QuotaMetricEnum::SECURITYPOLICYRULESPERREGION),
           "SERVICE_ATTACHMENTS" => Ok(QuotaMetricEnum::SERVICEATTACHMENTS),
           "SNAPSHOTS" => Ok(QuotaMetricEnum::SNAPSHOTS),
           "SSD_TOTAL_GB" => Ok(QuotaMetricEnum::SSDTOTALGB),
           "SSL_CERTIFICATES" => Ok(QuotaMetricEnum::SSLCERTIFICATES),
           "STATIC_ADDRESSES" => Ok(QuotaMetricEnum::STATICADDRESSES),
           "STATIC_BYOIP_ADDRESSES" => Ok(QuotaMetricEnum::STATICBYOIPADDRESSES),
           "STATIC_EXTERNAL_IPV6_ADDRESS_RANGES" => Ok(QuotaMetricEnum::STATICEXTERNALIPV6ADDRESSRANGES),
           "SUBNETWORKS" => Ok(QuotaMetricEnum::SUBNETWORKS),
           "T2A_CPUS" => Ok(QuotaMetricEnum::T2ACPUS),
           "T2D_CPUS" => Ok(QuotaMetricEnum::T2DCPUS),
           "TARGET_HTTPS_PROXIES" => Ok(QuotaMetricEnum::TARGETHTTPSPROXIES),
           "TARGET_HTTP_PROXIES" => Ok(QuotaMetricEnum::TARGETHTTPPROXIES),
           "TARGET_INSTANCES" => Ok(QuotaMetricEnum::TARGETINSTANCES),
           "TARGET_POOLS" => Ok(QuotaMetricEnum::TARGETPOOLS),
           "TARGET_SSL_PROXIES" => Ok(QuotaMetricEnum::TARGETSSLPROXIES),
           "TARGET_TCP_PROXIES" => Ok(QuotaMetricEnum::TARGETTCPPROXIES),
           "TARGET_VPN_GATEWAYS" => Ok(QuotaMetricEnum::TARGETVPNGATEWAYS),
           "TPU_LITE_DEVICE_V5" => Ok(QuotaMetricEnum::TPULITEDEVICEV5),
           "TPU_LITE_PODSLICE_V5" => Ok(QuotaMetricEnum::TPULITEPODSLICEV5),
           "TPU_PODSLICE_V4" => Ok(QuotaMetricEnum::TPUPODSLICEV4),
           "URL_MAPS" => Ok(QuotaMetricEnum::URLMAPS),
           "VPN_GATEWAYS" => Ok(QuotaMetricEnum::VPNGATEWAYS),
           "VPN_TUNNELS" => Ok(QuotaMetricEnum::VPNTUNNELS),
           "XPN_SERVICE_PROJECTS" => Ok(QuotaMetricEnum::XPNSERVICEPROJECTS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a QuotaMetricEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region QuotaExceededInfoRolloutStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Rollout status of the future quota limit.
pub enum QuotaExceededInfoRolloutStatusEnum {
    

    /// IN_PROGRESS - A rollout is in process which will change the limit value to future limit.
    ///
    /// "IN_PROGRESS"
    #[serde(rename="IN_PROGRESS")]
    INPROGRESS,
    

    /// ROLLOUT_STATUS_UNSPECIFIED - Rollout status is not specified. The default value.
    ///
    /// "ROLLOUT_STATUS_UNSPECIFIED"
    #[serde(rename="ROLLOUT_STATUS_UNSPECIFIED")]
    ROLLOUTSTATUSUNSPECIFIED,
}

impl AsRef<str> for QuotaExceededInfoRolloutStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            QuotaExceededInfoRolloutStatusEnum::INPROGRESS => "IN_PROGRESS",
            QuotaExceededInfoRolloutStatusEnum::ROLLOUTSTATUSUNSPECIFIED => "ROLLOUT_STATUS_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for QuotaExceededInfoRolloutStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IN_PROGRESS" => Ok(QuotaExceededInfoRolloutStatusEnum::INPROGRESS),
           "ROLLOUT_STATUS_UNSPECIFIED" => Ok(QuotaExceededInfoRolloutStatusEnum::ROLLOUTSTATUSUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a QuotaExceededInfoRolloutStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Status of the region, either UP or DOWN.
pub enum RegionStatusEnum {
    
    /// "DOWN"
    #[serde(rename="DOWN")]
    DOWN,
    
    /// "UP"
    #[serde(rename="UP")]
    UP,
}

impl AsRef<str> for RegionStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionStatusEnum::DOWN => "DOWN",
            RegionStatusEnum::UP => "UP",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DOWN" => Ok(RegionStatusEnum::DOWN),
           "UP" => Ok(RegionStatusEnum::UP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update.
pub enum RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum {
    

    /// Do not perform any action.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// Do not stop the instance.
    ///
    /// "REFRESH"
    #[serde(rename="REFRESH")]
    REFRESH,
    

    /// (Default.) Replace the instance according to the replacement method option.
    ///
    /// "REPLACE"
    #[serde(rename="REPLACE")]
    REPLACE,
    

    /// Stop the instance and start it again.
    ///
    /// "RESTART"
    #[serde(rename="RESTART")]
    RESTART,
}

impl AsRef<str> for RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::NONE => "NONE",
            RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::REFRESH => "REFRESH",
            RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::REPLACE => "REPLACE",
            RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::RESTART => "RESTART",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::NONE),
           "REFRESH" => Ok(RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::REFRESH),
           "REPLACE" => Ok(RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::REPLACE),
           "RESTART" => Ok(RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum::RESTART),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance and limit disruption as much as possible. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail.
pub enum RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum {
    

    /// Do not perform any action.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// Do not stop the instance.
    ///
    /// "REFRESH"
    #[serde(rename="REFRESH")]
    REFRESH,
    

    /// (Default.) Replace the instance according to the replacement method option.
    ///
    /// "REPLACE"
    #[serde(rename="REPLACE")]
    REPLACE,
    

    /// Stop the instance and start it again.
    ///
    /// "RESTART"
    #[serde(rename="RESTART")]
    RESTART,
}

impl AsRef<str> for RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::NONE => "NONE",
            RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::REFRESH => "REFRESH",
            RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::REPLACE => "REPLACE",
            RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::RESTART => "RESTART",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::NONE),
           "REFRESH" => Ok(RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::REFRESH),
           "REPLACE" => Ok(RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::REPLACE),
           "RESTART" => Ok(RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum::RESTART),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionInstanceGroupsListInstancesRequestInstanceStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Instances in which state should be returned. Valid options are: 'ALL', 'RUNNING'. By default, it lists all instances.
pub enum RegionInstanceGroupsListInstancesRequestInstanceStateEnum {
    

    /// Matches any status of the instances, running, non-running and others.
    ///
    /// "ALL"
    #[serde(rename="ALL")]
    ALL,
    

    /// Instance is in RUNNING state if it is running.
    ///
    /// "RUNNING"
    #[serde(rename="RUNNING")]
    RUNNING,
}

impl AsRef<str> for RegionInstanceGroupsListInstancesRequestInstanceStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionInstanceGroupsListInstancesRequestInstanceStateEnum::ALL => "ALL",
            RegionInstanceGroupsListInstancesRequestInstanceStateEnum::RUNNING => "RUNNING",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionInstanceGroupsListInstancesRequestInstanceStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALL" => Ok(RegionInstanceGroupsListInstancesRequestInstanceStateEnum::ALL),
           "RUNNING" => Ok(RegionInstanceGroupsListInstancesRequestInstanceStateEnum::RUNNING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionInstanceGroupsListInstancesRequestInstanceStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL, SYSTEM_GLOBAL, SYSTEM_REGIONAL.
pub enum RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    
    /// "HIERARCHY"
    #[serde(rename="HIERARCHY")]
    HIERARCHY,
    
    /// "NETWORK"
    #[serde(rename="NETWORK")]
    NETWORK,
    
    /// "NETWORK_REGIONAL"
    #[serde(rename="NETWORK_REGIONAL")]
    NETWORKREGIONAL,
    
    /// "UNSPECIFIED"
    #[serde(rename="UNSPECIFIED")]
    UNSPECIFIED,
}

impl AsRef<str> for RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::HIERARCHY => "HIERARCHY",
            RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::NETWORK => "NETWORK",
            RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::NETWORKREGIONAL => "NETWORK_REGIONAL",
            RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::UNSPECIFIED => "UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "HIERARCHY" => Ok(RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::HIERARCHY),
           "NETWORK" => Ok(RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::NETWORK),
           "NETWORK_REGIONAL" => Ok(RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::NETWORKREGIONAL),
           "UNSPECIFIED" => Ok(RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum::UNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ReservationStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the reservation.
pub enum ReservationStatusEnum {
    

    /// Resources are being allocated for the reservation.
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// Reservation is currently being deleted.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    

    /// Reservation has allocated all its resources.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
    

    /// Reservation is currently being resized.
    ///
    /// "UPDATING"
    #[serde(rename="UPDATING")]
    UPDATING,
}

impl AsRef<str> for ReservationStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ReservationStatusEnum::CREATING => "CREATING",
            ReservationStatusEnum::DELETING => "DELETING",
            ReservationStatusEnum::INVALID => "INVALID",
            ReservationStatusEnum::READY => "READY",
            ReservationStatusEnum::UPDATING => "UPDATING",
        }
    }
}

impl std::convert::TryFrom< &str> for ReservationStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(ReservationStatusEnum::CREATING),
           "DELETING" => Ok(ReservationStatusEnum::DELETING),
           "INVALID" => Ok(ReservationStatusEnum::INVALID),
           "READY" => Ok(ReservationStatusEnum::READY),
           "UPDATING" => Ok(ReservationStatusEnum::UPDATING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ReservationStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ReservationAffinityConsumeReservationTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
pub enum ReservationAffinityConsumeReservationTypeEnum {
    

    /// Consume any allocation available.
    ///
    /// "ANY_RESERVATION"
    #[serde(rename="ANY_RESERVATION")]
    ANYRESERVATION,
    

    /// Do not consume from any allocated capacity.
    ///
    /// "NO_RESERVATION"
    #[serde(rename="NO_RESERVATION")]
    NORESERVATION,
    

    /// Must consume from a specific reservation. Must specify key value fields for specifying the reservations.
    ///
    /// "SPECIFIC_RESERVATION"
    #[serde(rename="SPECIFIC_RESERVATION")]
    SPECIFICRESERVATION,
    
    /// "UNSPECIFIED"
    #[serde(rename="UNSPECIFIED")]
    UNSPECIFIED,
}

impl AsRef<str> for ReservationAffinityConsumeReservationTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ReservationAffinityConsumeReservationTypeEnum::ANYRESERVATION => "ANY_RESERVATION",
            ReservationAffinityConsumeReservationTypeEnum::NORESERVATION => "NO_RESERVATION",
            ReservationAffinityConsumeReservationTypeEnum::SPECIFICRESERVATION => "SPECIFIC_RESERVATION",
            ReservationAffinityConsumeReservationTypeEnum::UNSPECIFIED => "UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for ReservationAffinityConsumeReservationTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ANY_RESERVATION" => Ok(ReservationAffinityConsumeReservationTypeEnum::ANYRESERVATION),
           "NO_RESERVATION" => Ok(ReservationAffinityConsumeReservationTypeEnum::NORESERVATION),
           "SPECIFIC_RESERVATION" => Ok(ReservationAffinityConsumeReservationTypeEnum::SPECIFICRESERVATION),
           "UNSPECIFIED" => Ok(ReservationAffinityConsumeReservationTypeEnum::UNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ReservationAffinityConsumeReservationTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ResourceCommitmentTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Type of resource for which this commitment applies. Possible values are VCPU, MEMORY, LOCAL_SSD, and ACCELERATOR.
pub enum ResourceCommitmentTypeEnum {
    
    /// "ACCELERATOR"
    #[serde(rename="ACCELERATOR")]
    ACCELERATOR,
    
    /// "LOCAL_SSD"
    #[serde(rename="LOCAL_SSD")]
    LOCALSSD,
    
    /// "MEMORY"
    #[serde(rename="MEMORY")]
    MEMORY,
    
    /// "UNSPECIFIED"
    #[serde(rename="UNSPECIFIED")]
    UNSPECIFIED,
    
    /// "VCPU"
    #[serde(rename="VCPU")]
    VCPU,
}

impl AsRef<str> for ResourceCommitmentTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ResourceCommitmentTypeEnum::ACCELERATOR => "ACCELERATOR",
            ResourceCommitmentTypeEnum::LOCALSSD => "LOCAL_SSD",
            ResourceCommitmentTypeEnum::MEMORY => "MEMORY",
            ResourceCommitmentTypeEnum::UNSPECIFIED => "UNSPECIFIED",
            ResourceCommitmentTypeEnum::VCPU => "VCPU",
        }
    }
}

impl std::convert::TryFrom< &str> for ResourceCommitmentTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACCELERATOR" => Ok(ResourceCommitmentTypeEnum::ACCELERATOR),
           "LOCAL_SSD" => Ok(ResourceCommitmentTypeEnum::LOCALSSD),
           "MEMORY" => Ok(ResourceCommitmentTypeEnum::MEMORY),
           "UNSPECIFIED" => Ok(ResourceCommitmentTypeEnum::UNSPECIFIED),
           "VCPU" => Ok(ResourceCommitmentTypeEnum::VCPU),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ResourceCommitmentTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ResourcePolicyStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of resource policy creation.
pub enum ResourcePolicyStatusEnum {
    

    /// Resource policy is being created.
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// Resource policy is being deleted.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// Resource policy is expired and will not run again.
    ///
    /// "EXPIRED"
    #[serde(rename="EXPIRED")]
    EXPIRED,
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    

    /// Resource policy is ready to be used.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
}

impl AsRef<str> for ResourcePolicyStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ResourcePolicyStatusEnum::CREATING => "CREATING",
            ResourcePolicyStatusEnum::DELETING => "DELETING",
            ResourcePolicyStatusEnum::EXPIRED => "EXPIRED",
            ResourcePolicyStatusEnum::INVALID => "INVALID",
            ResourcePolicyStatusEnum::READY => "READY",
        }
    }
}

impl std::convert::TryFrom< &str> for ResourcePolicyStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(ResourcePolicyStatusEnum::CREATING),
           "DELETING" => Ok(ResourcePolicyStatusEnum::DELETING),
           "EXPIRED" => Ok(ResourcePolicyStatusEnum::EXPIRED),
           "INVALID" => Ok(ResourcePolicyStatusEnum::INVALID),
           "READY" => Ok(ResourcePolicyStatusEnum::READY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ResourcePolicyStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ResourcePolicyGroupPlacementPolicyCollocationEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies network collocation
pub enum ResourcePolicyGroupPlacementPolicyCollocationEnum {
    
    /// "COLLOCATED"
    #[serde(rename="COLLOCATED")]
    COLLOCATED,
    
    /// "UNSPECIFIED_COLLOCATION"
    #[serde(rename="UNSPECIFIED_COLLOCATION")]
    UNSPECIFIEDCOLLOCATION,
}

impl AsRef<str> for ResourcePolicyGroupPlacementPolicyCollocationEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ResourcePolicyGroupPlacementPolicyCollocationEnum::COLLOCATED => "COLLOCATED",
            ResourcePolicyGroupPlacementPolicyCollocationEnum::UNSPECIFIEDCOLLOCATION => "UNSPECIFIED_COLLOCATION",
        }
    }
}

impl std::convert::TryFrom< &str> for ResourcePolicyGroupPlacementPolicyCollocationEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "COLLOCATED" => Ok(ResourcePolicyGroupPlacementPolicyCollocationEnum::COLLOCATED),
           "UNSPECIFIED_COLLOCATION" => Ok(ResourcePolicyGroupPlacementPolicyCollocationEnum::UNSPECIFIEDCOLLOCATION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ResourcePolicyGroupPlacementPolicyCollocationEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
pub enum ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum {
    
    /// "APPLY_RETENTION_POLICY"
    #[serde(rename="APPLY_RETENTION_POLICY")]
    APPLYRETENTIONPOLICY,
    
    /// "KEEP_AUTO_SNAPSHOTS"
    #[serde(rename="KEEP_AUTO_SNAPSHOTS")]
    KEEPAUTOSNAPSHOTS,
    
    /// "UNSPECIFIED_ON_SOURCE_DISK_DELETE"
    #[serde(rename="UNSPECIFIED_ON_SOURCE_DISK_DELETE")]
    UNSPECIFIEDONSOURCEDISKDELETE,
}

impl AsRef<str> for ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum::APPLYRETENTIONPOLICY => "APPLY_RETENTION_POLICY",
            ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum::KEEPAUTOSNAPSHOTS => "KEEP_AUTO_SNAPSHOTS",
            ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum::UNSPECIFIEDONSOURCEDISKDELETE => "UNSPECIFIED_ON_SOURCE_DISK_DELETE",
        }
    }
}

impl std::convert::TryFrom< &str> for ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "APPLY_RETENTION_POLICY" => Ok(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum::APPLYRETENTIONPOLICY),
           "KEEP_AUTO_SNAPSHOTS" => Ok(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum::KEEPAUTOSNAPSHOTS),
           "UNSPECIFIED_ON_SOURCE_DISK_DELETE" => Ok(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum::UNSPECIFIEDONSOURCEDISKDELETE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ResourcePolicyWeeklyCycleDayOfWeekDayEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
pub enum ResourcePolicyWeeklyCycleDayOfWeekDayEnum {
    
    /// "FRIDAY"
    #[serde(rename="FRIDAY")]
    FRIDAY,
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    
    /// "MONDAY"
    #[serde(rename="MONDAY")]
    MONDAY,
    
    /// "SATURDAY"
    #[serde(rename="SATURDAY")]
    SATURDAY,
    
    /// "SUNDAY"
    #[serde(rename="SUNDAY")]
    SUNDAY,
    
    /// "THURSDAY"
    #[serde(rename="THURSDAY")]
    THURSDAY,
    
    /// "TUESDAY"
    #[serde(rename="TUESDAY")]
    TUESDAY,
    
    /// "WEDNESDAY"
    #[serde(rename="WEDNESDAY")]
    WEDNESDAY,
}

impl AsRef<str> for ResourcePolicyWeeklyCycleDayOfWeekDayEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ResourcePolicyWeeklyCycleDayOfWeekDayEnum::FRIDAY => "FRIDAY",
            ResourcePolicyWeeklyCycleDayOfWeekDayEnum::INVALID => "INVALID",
            ResourcePolicyWeeklyCycleDayOfWeekDayEnum::MONDAY => "MONDAY",
            ResourcePolicyWeeklyCycleDayOfWeekDayEnum::SATURDAY => "SATURDAY",
            ResourcePolicyWeeklyCycleDayOfWeekDayEnum::SUNDAY => "SUNDAY",
            ResourcePolicyWeeklyCycleDayOfWeekDayEnum::THURSDAY => "THURSDAY",
            ResourcePolicyWeeklyCycleDayOfWeekDayEnum::TUESDAY => "TUESDAY",
            ResourcePolicyWeeklyCycleDayOfWeekDayEnum::WEDNESDAY => "WEDNESDAY",
        }
    }
}

impl std::convert::TryFrom< &str> for ResourcePolicyWeeklyCycleDayOfWeekDayEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FRIDAY" => Ok(ResourcePolicyWeeklyCycleDayOfWeekDayEnum::FRIDAY),
           "INVALID" => Ok(ResourcePolicyWeeklyCycleDayOfWeekDayEnum::INVALID),
           "MONDAY" => Ok(ResourcePolicyWeeklyCycleDayOfWeekDayEnum::MONDAY),
           "SATURDAY" => Ok(ResourcePolicyWeeklyCycleDayOfWeekDayEnum::SATURDAY),
           "SUNDAY" => Ok(ResourcePolicyWeeklyCycleDayOfWeekDayEnum::SUNDAY),
           "THURSDAY" => Ok(ResourcePolicyWeeklyCycleDayOfWeekDayEnum::THURSDAY),
           "TUESDAY" => Ok(ResourcePolicyWeeklyCycleDayOfWeekDayEnum::TUESDAY),
           "WEDNESDAY" => Ok(ResourcePolicyWeeklyCycleDayOfWeekDayEnum::WEDNESDAY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ResourcePolicyWeeklyCycleDayOfWeekDayEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouteRouteStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output only] The status of the route.
pub enum RouteRouteStatusEnum {
    

    /// This route is processed and active.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// The route is dropped due to the VPC exceeding the dynamic route limit. For dynamic route limit, please refer to the Learned route example
    ///
    /// "DROPPED"
    #[serde(rename="DROPPED")]
    DROPPED,
    

    /// This route is processed but inactive due to failure from the backend. The backend may have rejected the route
    ///
    /// "INACTIVE"
    #[serde(rename="INACTIVE")]
    INACTIVE,
    

    /// This route is being processed internally. The status will change once processed.
    ///
    /// "PENDING"
    #[serde(rename="PENDING")]
    PENDING,
}

impl AsRef<str> for RouteRouteStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouteRouteStatusEnum::ACTIVE => "ACTIVE",
            RouteRouteStatusEnum::DROPPED => "DROPPED",
            RouteRouteStatusEnum::INACTIVE => "INACTIVE",
            RouteRouteStatusEnum::PENDING => "PENDING",
        }
    }
}

impl std::convert::TryFrom< &str> for RouteRouteStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(RouteRouteStatusEnum::ACTIVE),
           "DROPPED" => Ok(RouteRouteStatusEnum::DROPPED),
           "INACTIVE" => Ok(RouteRouteStatusEnum::INACTIVE),
           "PENDING" => Ok(RouteRouteStatusEnum::PENDING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouteRouteStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouteRouteTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The type of this route, which can be one of the following values: - 'TRANSIT' for a transit route that this router learned from another Cloud Router and will readvertise to one of its BGP peers - 'SUBNET' for a route from a subnet of the VPC - 'BGP' for a route learned from a BGP peer of this router - 'STATIC' for a static route
pub enum RouteRouteTypeEnum {
    
    /// "BGP"
    #[serde(rename="BGP")]
    BGP,
    
    /// "STATIC"
    #[serde(rename="STATIC")]
    STATIC,
    
    /// "SUBNET"
    #[serde(rename="SUBNET")]
    SUBNET,
    
    /// "TRANSIT"
    #[serde(rename="TRANSIT")]
    TRANSIT,
}

impl AsRef<str> for RouteRouteTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouteRouteTypeEnum::BGP => "BGP",
            RouteRouteTypeEnum::STATIC => "STATIC",
            RouteRouteTypeEnum::SUBNET => "SUBNET",
            RouteRouteTypeEnum::TRANSIT => "TRANSIT",
        }
    }
}

impl std::convert::TryFrom< &str> for RouteRouteTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "BGP" => Ok(RouteRouteTypeEnum::BGP),
           "STATIC" => Ok(RouteRouteTypeEnum::STATIC),
           "SUBNET" => Ok(RouteRouteTypeEnum::SUBNET),
           "TRANSIT" => Ok(RouteRouteTypeEnum::TRANSIT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouteRouteTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouteAsPathPathSegmentTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The type of the AS Path, which can be one of the following values: - 'AS_SET': unordered set of autonomous systems that the route in has traversed - 'AS_SEQUENCE': ordered set of autonomous systems that the route has traversed - 'AS_CONFED_SEQUENCE': ordered set of Member Autonomous Systems in the local confederation that the route has traversed - 'AS_CONFED_SET': unordered set of Member Autonomous Systems in the local confederation that the route has traversed 
pub enum RouteAsPathPathSegmentTypeEnum {
    
    /// "AS_CONFED_SEQUENCE"
    #[serde(rename="AS_CONFED_SEQUENCE")]
    ASCONFEDSEQUENCE,
    
    /// "AS_CONFED_SET"
    #[serde(rename="AS_CONFED_SET")]
    ASCONFEDSET,
    
    /// "AS_SEQUENCE"
    #[serde(rename="AS_SEQUENCE")]
    ASSEQUENCE,
    
    /// "AS_SET"
    #[serde(rename="AS_SET")]
    ASSET,
}

impl AsRef<str> for RouteAsPathPathSegmentTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouteAsPathPathSegmentTypeEnum::ASCONFEDSEQUENCE => "AS_CONFED_SEQUENCE",
            RouteAsPathPathSegmentTypeEnum::ASCONFEDSET => "AS_CONFED_SET",
            RouteAsPathPathSegmentTypeEnum::ASSEQUENCE => "AS_SEQUENCE",
            RouteAsPathPathSegmentTypeEnum::ASSET => "AS_SET",
        }
    }
}

impl std::convert::TryFrom< &str> for RouteAsPathPathSegmentTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AS_CONFED_SEQUENCE" => Ok(RouteAsPathPathSegmentTypeEnum::ASCONFEDSEQUENCE),
           "AS_CONFED_SET" => Ok(RouteAsPathPathSegmentTypeEnum::ASCONFEDSET),
           "AS_SEQUENCE" => Ok(RouteAsPathPathSegmentTypeEnum::ASSEQUENCE),
           "AS_SET" => Ok(RouteAsPathPathSegmentTypeEnum::ASSET),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouteAsPathPathSegmentTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterBgpAdvertiseModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
pub enum RouterBgpAdvertiseModeEnum {
    
    /// "CUSTOM"
    #[serde(rename="CUSTOM")]
    CUSTOM,
    
    /// "DEFAULT"
    #[serde(rename="DEFAULT")]
    DEFAULT,
}

impl AsRef<str> for RouterBgpAdvertiseModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterBgpAdvertiseModeEnum::CUSTOM => "CUSTOM",
            RouterBgpAdvertiseModeEnum::DEFAULT => "DEFAULT",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterBgpAdvertiseModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CUSTOM" => Ok(RouterBgpAdvertiseModeEnum::CUSTOM),
           "DEFAULT" => Ok(RouterBgpAdvertiseModeEnum::DEFAULT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterBgpAdvertiseModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterBgpAdvertisedGroupsEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
pub enum RouterBgpAdvertisedGroupsEnum {
    

    /// Advertise all available subnets (including peer VPC subnets).
    ///
    /// "ALL_SUBNETS"
    #[serde(rename="ALL_SUBNETS")]
    ALLSUBNETS,
}

impl AsRef<str> for RouterBgpAdvertisedGroupsEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterBgpAdvertisedGroupsEnum::ALLSUBNETS => "ALL_SUBNETS",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterBgpAdvertisedGroupsEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALL_SUBNETS" => Ok(RouterBgpAdvertisedGroupsEnum::ALLSUBNETS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterBgpAdvertisedGroupsEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterBgpPeerAdvertiseModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// User-specified flag to indicate which mode to use for advertisement.
pub enum RouterBgpPeerAdvertiseModeEnum {
    
    /// "CUSTOM"
    #[serde(rename="CUSTOM")]
    CUSTOM,
    
    /// "DEFAULT"
    #[serde(rename="DEFAULT")]
    DEFAULT,
}

impl AsRef<str> for RouterBgpPeerAdvertiseModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterBgpPeerAdvertiseModeEnum::CUSTOM => "CUSTOM",
            RouterBgpPeerAdvertiseModeEnum::DEFAULT => "DEFAULT",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterBgpPeerAdvertiseModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CUSTOM" => Ok(RouterBgpPeerAdvertiseModeEnum::CUSTOM),
           "DEFAULT" => Ok(RouterBgpPeerAdvertiseModeEnum::DEFAULT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterBgpPeerAdvertiseModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterBgpPeerAdvertisedGroupsEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// User-specified list of prefix groups to advertise in custom mode, which currently supports the following option: - ALL_SUBNETS: Advertises all of the router's own VPC subnets. This excludes any routes learned for subnets that use VPC Network Peering. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
pub enum RouterBgpPeerAdvertisedGroupsEnum {
    

    /// Advertise all available subnets (including peer VPC subnets).
    ///
    /// "ALL_SUBNETS"
    #[serde(rename="ALL_SUBNETS")]
    ALLSUBNETS,
}

impl AsRef<str> for RouterBgpPeerAdvertisedGroupsEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterBgpPeerAdvertisedGroupsEnum::ALLSUBNETS => "ALL_SUBNETS",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterBgpPeerAdvertisedGroupsEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALL_SUBNETS" => Ok(RouterBgpPeerAdvertisedGroupsEnum::ALLSUBNETS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterBgpPeerAdvertisedGroupsEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterBgpPeerEnableEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
pub enum RouterBgpPeerEnableEnum {
    
    /// "FALSE"
    #[serde(rename="FALSE")]
    FALSE,
    
    /// "TRUE"
    #[serde(rename="TRUE")]
    TRUE,
}

impl AsRef<str> for RouterBgpPeerEnableEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterBgpPeerEnableEnum::FALSE => "FALSE",
            RouterBgpPeerEnableEnum::TRUE => "TRUE",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterBgpPeerEnableEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FALSE" => Ok(RouterBgpPeerEnableEnum::FALSE),
           "TRUE" => Ok(RouterBgpPeerEnableEnum::TRUE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterBgpPeerEnableEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterBgpPeerManagementTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The resource that configures and manages this BGP peer. - MANAGED_BY_USER is the default value and can be managed by you or other users - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted. 
pub enum RouterBgpPeerManagementTypeEnum {
    

    /// The BGP peer is automatically created for PARTNER type InterconnectAttachment; Google will automatically create/delete this BGP peer when the PARTNER InterconnectAttachment is created/deleted, and Google will update the ipAddress and peerIpAddress when the PARTNER InterconnectAttachment is provisioned. This type of BGP peer cannot be created or deleted, but can be modified for all fields except for name, ipAddress and peerIpAddress.
    ///
    /// "MANAGED_BY_ATTACHMENT"
    #[serde(rename="MANAGED_BY_ATTACHMENT")]
    MANAGEDBYATTACHMENT,
    

    /// Default value, the BGP peer is manually created and managed by user.
    ///
    /// "MANAGED_BY_USER"
    #[serde(rename="MANAGED_BY_USER")]
    MANAGEDBYUSER,
}

impl AsRef<str> for RouterBgpPeerManagementTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterBgpPeerManagementTypeEnum::MANAGEDBYATTACHMENT => "MANAGED_BY_ATTACHMENT",
            RouterBgpPeerManagementTypeEnum::MANAGEDBYUSER => "MANAGED_BY_USER",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterBgpPeerManagementTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "MANAGED_BY_ATTACHMENT" => Ok(RouterBgpPeerManagementTypeEnum::MANAGEDBYATTACHMENT),
           "MANAGED_BY_USER" => Ok(RouterBgpPeerManagementTypeEnum::MANAGEDBYUSER),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterBgpPeerManagementTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterBgpPeerBfdSessionInitializationModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is DISABLED.
pub enum RouterBgpPeerBfdSessionInitializationModeEnum {
    
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    
    /// "DISABLED"
    #[serde(rename="DISABLED")]
    DISABLED,
    
    /// "PASSIVE"
    #[serde(rename="PASSIVE")]
    PASSIVE,
}

impl AsRef<str> for RouterBgpPeerBfdSessionInitializationModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterBgpPeerBfdSessionInitializationModeEnum::ACTIVE => "ACTIVE",
            RouterBgpPeerBfdSessionInitializationModeEnum::DISABLED => "DISABLED",
            RouterBgpPeerBfdSessionInitializationModeEnum::PASSIVE => "PASSIVE",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterBgpPeerBfdSessionInitializationModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(RouterBgpPeerBfdSessionInitializationModeEnum::ACTIVE),
           "DISABLED" => Ok(RouterBgpPeerBfdSessionInitializationModeEnum::DISABLED),
           "PASSIVE" => Ok(RouterBgpPeerBfdSessionInitializationModeEnum::PASSIVE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterBgpPeerBfdSessionInitializationModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterInterfaceManagementTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The resource that configures and manages this interface. - MANAGED_BY_USER is the default value and can be managed directly by users. - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted. 
pub enum RouterInterfaceManagementTypeEnum {
    

    /// The interface is automatically created for PARTNER type InterconnectAttachment, Google will automatically create/update/delete this interface when the PARTNER InterconnectAttachment is created/provisioned/deleted. This type of interface cannot be manually managed by user.
    ///
    /// "MANAGED_BY_ATTACHMENT"
    #[serde(rename="MANAGED_BY_ATTACHMENT")]
    MANAGEDBYATTACHMENT,
    

    /// Default value, the interface is manually created and managed by user.
    ///
    /// "MANAGED_BY_USER"
    #[serde(rename="MANAGED_BY_USER")]
    MANAGEDBYUSER,
}

impl AsRef<str> for RouterInterfaceManagementTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterInterfaceManagementTypeEnum::MANAGEDBYATTACHMENT => "MANAGED_BY_ATTACHMENT",
            RouterInterfaceManagementTypeEnum::MANAGEDBYUSER => "MANAGED_BY_USER",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterInterfaceManagementTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "MANAGED_BY_ATTACHMENT" => Ok(RouterInterfaceManagementTypeEnum::MANAGEDBYATTACHMENT),
           "MANAGED_BY_USER" => Ok(RouterInterfaceManagementTypeEnum::MANAGEDBYUSER),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterInterfaceManagementTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterNatAutoNetworkTierEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The network tier to use when automatically reserving NAT IP addresses. Must be one of: PREMIUM, STANDARD. If not specified, then the current project-level default tier is used.
pub enum RouterNatAutoNetworkTierEnum {
    

    /// Public internet quality with fixed bandwidth.
    ///
    /// "FIXED_STANDARD"
    #[serde(rename="FIXED_STANDARD")]
    FIXEDSTANDARD,
    

    /// High quality, Google-grade network tier, support for all networking products.
    ///
    /// "PREMIUM"
    #[serde(rename="PREMIUM")]
    PREMIUM,
    

    /// Public internet quality, only limited support for other networking products.
    ///
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
    

    /// (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    ///
    /// "STANDARD_OVERRIDES_FIXED_STANDARD"
    #[serde(rename="STANDARD_OVERRIDES_FIXED_STANDARD")]
    STANDARDOVERRIDESFIXEDSTANDARD,
}

impl AsRef<str> for RouterNatAutoNetworkTierEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterNatAutoNetworkTierEnum::FIXEDSTANDARD => "FIXED_STANDARD",
            RouterNatAutoNetworkTierEnum::PREMIUM => "PREMIUM",
            RouterNatAutoNetworkTierEnum::STANDARD => "STANDARD",
            RouterNatAutoNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD => "STANDARD_OVERRIDES_FIXED_STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterNatAutoNetworkTierEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "FIXED_STANDARD" => Ok(RouterNatAutoNetworkTierEnum::FIXEDSTANDARD),
           "PREMIUM" => Ok(RouterNatAutoNetworkTierEnum::PREMIUM),
           "STANDARD" => Ok(RouterNatAutoNetworkTierEnum::STANDARD),
           "STANDARD_OVERRIDES_FIXED_STANDARD" => Ok(RouterNatAutoNetworkTierEnum::STANDARDOVERRIDESFIXEDSTANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterNatAutoNetworkTierEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterNatEndpointTypesEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// List of NAT-ted endpoint types supported by the Nat Gateway. If the list is empty, then it will be equivalent to include ENDPOINT_TYPE_VM
pub enum RouterNatEndpointTypesEnum {
    

    /// This is used for regional Application Load Balancers (internal and external) and regional proxy Network Load Balancers (internal and external) endpoints.
    ///
    /// "ENDPOINT_TYPE_MANAGED_PROXY_LB"
    #[serde(rename="ENDPOINT_TYPE_MANAGED_PROXY_LB")]
    ENDPOINTTYPEMANAGEDPROXYLB,
    

    /// This is used for Secure Web Gateway endpoints.
    ///
    /// "ENDPOINT_TYPE_SWG"
    #[serde(rename="ENDPOINT_TYPE_SWG")]
    ENDPOINTTYPESWG,
    

    /// This is the default.
    ///
    /// "ENDPOINT_TYPE_VM"
    #[serde(rename="ENDPOINT_TYPE_VM")]
    ENDPOINTTYPEVM,
}

impl AsRef<str> for RouterNatEndpointTypesEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterNatEndpointTypesEnum::ENDPOINTTYPEMANAGEDPROXYLB => "ENDPOINT_TYPE_MANAGED_PROXY_LB",
            RouterNatEndpointTypesEnum::ENDPOINTTYPESWG => "ENDPOINT_TYPE_SWG",
            RouterNatEndpointTypesEnum::ENDPOINTTYPEVM => "ENDPOINT_TYPE_VM",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterNatEndpointTypesEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ENDPOINT_TYPE_MANAGED_PROXY_LB" => Ok(RouterNatEndpointTypesEnum::ENDPOINTTYPEMANAGEDPROXYLB),
           "ENDPOINT_TYPE_SWG" => Ok(RouterNatEndpointTypesEnum::ENDPOINTTYPESWG),
           "ENDPOINT_TYPE_VM" => Ok(RouterNatEndpointTypesEnum::ENDPOINTTYPEVM),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterNatEndpointTypesEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterNatNatIpAllocateOptionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty. 
pub enum RouterNatNatIpAllocateOptionEnum {
    

    /// Nat IPs are allocated by GCP; customers can not specify any Nat IPs.
    ///
    /// "AUTO_ONLY"
    #[serde(rename="AUTO_ONLY")]
    AUTOONLY,
    

    /// Only use Nat IPs provided by customers. When specified Nat IPs are not enough then the Nat service fails for new VMs.
    ///
    /// "MANUAL_ONLY"
    #[serde(rename="MANUAL_ONLY")]
    MANUALONLY,
}

impl AsRef<str> for RouterNatNatIpAllocateOptionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterNatNatIpAllocateOptionEnum::AUTOONLY => "AUTO_ONLY",
            RouterNatNatIpAllocateOptionEnum::MANUALONLY => "MANUAL_ONLY",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterNatNatIpAllocateOptionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "AUTO_ONLY" => Ok(RouterNatNatIpAllocateOptionEnum::AUTOONLY),
           "MANUAL_ONLY" => Ok(RouterNatNatIpAllocateOptionEnum::MANUALONLY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterNatNatIpAllocateOptionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterNatSourceSubnetworkIpRangesToNatEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES then there should not be any other Router.Nat section in any Router for this network in this region.
pub enum RouterNatSourceSubnetworkIpRangesToNatEnum {
    

    /// All the IP ranges in every Subnetwork are allowed to Nat.
    ///
    /// "ALL_SUBNETWORKS_ALL_IP_RANGES"
    #[serde(rename="ALL_SUBNETWORKS_ALL_IP_RANGES")]
    ALLSUBNETWORKSALLIPRANGES,
    

    /// All the primary IP ranges in every Subnetwork are allowed to Nat.
    ///
    /// "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES"
    #[serde(rename="ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES")]
    ALLSUBNETWORKSALLPRIMARYIPRANGES,
    

    /// A list of Subnetworks are allowed to Nat (specified in the field subnetwork below)
    ///
    /// "LIST_OF_SUBNETWORKS"
    #[serde(rename="LIST_OF_SUBNETWORKS")]
    LISTOFSUBNETWORKS,
}

impl AsRef<str> for RouterNatSourceSubnetworkIpRangesToNatEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterNatSourceSubnetworkIpRangesToNatEnum::ALLSUBNETWORKSALLIPRANGES => "ALL_SUBNETWORKS_ALL_IP_RANGES",
            RouterNatSourceSubnetworkIpRangesToNatEnum::ALLSUBNETWORKSALLPRIMARYIPRANGES => "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES",
            RouterNatSourceSubnetworkIpRangesToNatEnum::LISTOFSUBNETWORKS => "LIST_OF_SUBNETWORKS",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterNatSourceSubnetworkIpRangesToNatEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALL_SUBNETWORKS_ALL_IP_RANGES" => Ok(RouterNatSourceSubnetworkIpRangesToNatEnum::ALLSUBNETWORKSALLIPRANGES),
           "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES" => Ok(RouterNatSourceSubnetworkIpRangesToNatEnum::ALLSUBNETWORKSALLPRIMARYIPRANGES),
           "LIST_OF_SUBNETWORKS" => Ok(RouterNatSourceSubnetworkIpRangesToNatEnum::LISTOFSUBNETWORKS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterNatSourceSubnetworkIpRangesToNatEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterNatTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Indicates whether this NAT is used for public or private IP translation. If unspecified, it defaults to PUBLIC.
pub enum RouterNatTypeEnum {
    

    /// NAT used for private IP translation.
    ///
    /// "PRIVATE"
    #[serde(rename="PRIVATE")]
    PRIVATE,
    

    /// NAT used for public IP translation. This is the default.
    ///
    /// "PUBLIC"
    #[serde(rename="PUBLIC")]
    PUBLIC,
}

impl AsRef<str> for RouterNatTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterNatTypeEnum::PRIVATE => "PRIVATE",
            RouterNatTypeEnum::PUBLIC => "PUBLIC",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterNatTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "PRIVATE" => Ok(RouterNatTypeEnum::PRIVATE),
           "PUBLIC" => Ok(RouterNatTypeEnum::PUBLIC),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterNatTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterNatLogConfigFilterEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful. 
pub enum RouterNatLogConfigFilterEnum {
    

    /// Export logs for all (successful and unsuccessful) connections.
    ///
    /// "ALL"
    #[serde(rename="ALL")]
    ALL,
    

    /// Export logs for connection failures only.
    ///
    /// "ERRORS_ONLY"
    #[serde(rename="ERRORS_ONLY")]
    ERRORSONLY,
    

    /// Export logs for successful connections only.
    ///
    /// "TRANSLATIONS_ONLY"
    #[serde(rename="TRANSLATIONS_ONLY")]
    TRANSLATIONSONLY,
}

impl AsRef<str> for RouterNatLogConfigFilterEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterNatLogConfigFilterEnum::ALL => "ALL",
            RouterNatLogConfigFilterEnum::ERRORSONLY => "ERRORS_ONLY",
            RouterNatLogConfigFilterEnum::TRANSLATIONSONLY => "TRANSLATIONS_ONLY",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterNatLogConfigFilterEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALL" => Ok(RouterNatLogConfigFilterEnum::ALL),
           "ERRORS_ONLY" => Ok(RouterNatLogConfigFilterEnum::ERRORSONLY),
           "TRANSLATIONS_ONLY" => Ok(RouterNatLogConfigFilterEnum::TRANSLATIONSONLY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterNatLogConfigFilterEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterNatSubnetworkToNatSourceIpRangesToNatEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES]
pub enum RouterNatSubnetworkToNatSourceIpRangesToNatEnum {
    

    /// The primary and all the secondary ranges are allowed to Nat.
    ///
    /// "ALL_IP_RANGES"
    #[serde(rename="ALL_IP_RANGES")]
    ALLIPRANGES,
    

    /// A list of secondary ranges are allowed to Nat.
    ///
    /// "LIST_OF_SECONDARY_IP_RANGES"
    #[serde(rename="LIST_OF_SECONDARY_IP_RANGES")]
    LISTOFSECONDARYIPRANGES,
    

    /// The primary range is allowed to Nat.
    ///
    /// "PRIMARY_IP_RANGE"
    #[serde(rename="PRIMARY_IP_RANGE")]
    PRIMARYIPRANGE,
}

impl AsRef<str> for RouterNatSubnetworkToNatSourceIpRangesToNatEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterNatSubnetworkToNatSourceIpRangesToNatEnum::ALLIPRANGES => "ALL_IP_RANGES",
            RouterNatSubnetworkToNatSourceIpRangesToNatEnum::LISTOFSECONDARYIPRANGES => "LIST_OF_SECONDARY_IP_RANGES",
            RouterNatSubnetworkToNatSourceIpRangesToNatEnum::PRIMARYIPRANGE => "PRIMARY_IP_RANGE",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterNatSubnetworkToNatSourceIpRangesToNatEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALL_IP_RANGES" => Ok(RouterNatSubnetworkToNatSourceIpRangesToNatEnum::ALLIPRANGES),
           "LIST_OF_SECONDARY_IP_RANGES" => Ok(RouterNatSubnetworkToNatSourceIpRangesToNatEnum::LISTOFSECONDARYIPRANGES),
           "PRIMARY_IP_RANGE" => Ok(RouterNatSubnetworkToNatSourceIpRangesToNatEnum::PRIMARYIPRANGE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterNatSubnetworkToNatSourceIpRangesToNatEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterStatusBgpPeerStatusStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Status of the BGP peer: {UP, DOWN}
pub enum RouterStatusBgpPeerStatusStatusEnum {
    
    /// "DOWN"
    #[serde(rename="DOWN")]
    DOWN,
    
    /// "UNKNOWN"
    #[serde(rename="UNKNOWN")]
    UNKNOWN,
    
    /// "UP"
    #[serde(rename="UP")]
    UP,
}

impl AsRef<str> for RouterStatusBgpPeerStatusStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterStatusBgpPeerStatusStatusEnum::DOWN => "DOWN",
            RouterStatusBgpPeerStatusStatusEnum::UNKNOWN => "UNKNOWN",
            RouterStatusBgpPeerStatusStatusEnum::UP => "UP",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterStatusBgpPeerStatusStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DOWN" => Ok(RouterStatusBgpPeerStatusStatusEnum::DOWN),
           "UNKNOWN" => Ok(RouterStatusBgpPeerStatusStatusEnum::UNKNOWN),
           "UP" => Ok(RouterStatusBgpPeerStatusStatusEnum::UP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterStatusBgpPeerStatusStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterStatusBgpPeerStatusStatusReasonEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Indicates why particular status was returned.
pub enum RouterStatusBgpPeerStatusStatusReasonEnum {
    

    /// Indicates internal problems with configuration of MD5 authentication. This particular reason can only be returned when md5AuthEnabled is true and status is DOWN.
    ///
    /// "MD5_AUTH_INTERNAL_PROBLEM"
    #[serde(rename="MD5_AUTH_INTERNAL_PROBLEM")]
    MD5AUTHINTERNALPROBLEM,
    
    /// "STATUS_REASON_UNSPECIFIED"
    #[serde(rename="STATUS_REASON_UNSPECIFIED")]
    STATUSREASONUNSPECIFIED,
}

impl AsRef<str> for RouterStatusBgpPeerStatusStatusReasonEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterStatusBgpPeerStatusStatusReasonEnum::MD5AUTHINTERNALPROBLEM => "MD5_AUTH_INTERNAL_PROBLEM",
            RouterStatusBgpPeerStatusStatusReasonEnum::STATUSREASONUNSPECIFIED => "STATUS_REASON_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterStatusBgpPeerStatusStatusReasonEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "MD5_AUTH_INTERNAL_PROBLEM" => Ok(RouterStatusBgpPeerStatusStatusReasonEnum::MD5AUTHINTERNALPROBLEM),
           "STATUS_REASON_UNSPECIFIED" => Ok(RouterStatusBgpPeerStatusStatusReasonEnum::STATUSREASONUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterStatusBgpPeerStatusStatusReasonEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RuleActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This is deprecated and has no effect. Do not use.
pub enum RuleActionEnum {
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "ALLOW"
    #[serde(rename="ALLOW")]
    ALLOW,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "ALLOW_WITH_LOG"
    #[serde(rename="ALLOW_WITH_LOG")]
    ALLOWWITHLOG,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "DENY"
    #[serde(rename="DENY")]
    DENY,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "DENY_WITH_LOG"
    #[serde(rename="DENY_WITH_LOG")]
    DENYWITHLOG,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "LOG"
    #[serde(rename="LOG")]
    LOG,
    

    /// This is deprecated and has no effect. Do not use.
    ///
    /// "NO_ACTION"
    #[serde(rename="NO_ACTION")]
    NOACTION,
}

impl AsRef<str> for RuleActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RuleActionEnum::ALLOW => "ALLOW",
            RuleActionEnum::ALLOWWITHLOG => "ALLOW_WITH_LOG",
            RuleActionEnum::DENY => "DENY",
            RuleActionEnum::DENYWITHLOG => "DENY_WITH_LOG",
            RuleActionEnum::LOG => "LOG",
            RuleActionEnum::NOACTION => "NO_ACTION",
        }
    }
}

impl std::convert::TryFrom< &str> for RuleActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALLOW" => Ok(RuleActionEnum::ALLOW),
           "ALLOW_WITH_LOG" => Ok(RuleActionEnum::ALLOWWITHLOG),
           "DENY" => Ok(RuleActionEnum::DENY),
           "DENY_WITH_LOG" => Ok(RuleActionEnum::DENYWITHLOG),
           "LOG" => Ok(RuleActionEnum::LOG),
           "NO_ACTION" => Ok(RuleActionEnum::NOACTION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RuleActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SSLHealthCheckPortSpecificationEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
pub enum SSLHealthCheckPortSpecificationEnum {
    

    /// The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    ///
    /// "USE_FIXED_PORT"
    #[serde(rename="USE_FIXED_PORT")]
    USEFIXEDPORT,
    

    /// Not supported.
    ///
    /// "USE_NAMED_PORT"
    #[serde(rename="USE_NAMED_PORT")]
    USENAMEDPORT,
    

    /// For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    ///
    /// "USE_SERVING_PORT"
    #[serde(rename="USE_SERVING_PORT")]
    USESERVINGPORT,
}

impl AsRef<str> for SSLHealthCheckPortSpecificationEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SSLHealthCheckPortSpecificationEnum::USEFIXEDPORT => "USE_FIXED_PORT",
            SSLHealthCheckPortSpecificationEnum::USENAMEDPORT => "USE_NAMED_PORT",
            SSLHealthCheckPortSpecificationEnum::USESERVINGPORT => "USE_SERVING_PORT",
        }
    }
}

impl std::convert::TryFrom< &str> for SSLHealthCheckPortSpecificationEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "USE_FIXED_PORT" => Ok(SSLHealthCheckPortSpecificationEnum::USEFIXEDPORT),
           "USE_NAMED_PORT" => Ok(SSLHealthCheckPortSpecificationEnum::USENAMEDPORT),
           "USE_SERVING_PORT" => Ok(SSLHealthCheckPortSpecificationEnum::USESERVINGPORT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SSLHealthCheckPortSpecificationEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SSLHealthCheckProxyHeaderEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
pub enum SSLHealthCheckProxyHeaderEnum {
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    
    /// "PROXY_V1"
    #[serde(rename="PROXY_V1")]
    PROXYV1,
}

impl AsRef<str> for SSLHealthCheckProxyHeaderEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SSLHealthCheckProxyHeaderEnum::NONE => "NONE",
            SSLHealthCheckProxyHeaderEnum::PROXYV1 => "PROXY_V1",
        }
    }
}

impl std::convert::TryFrom< &str> for SSLHealthCheckProxyHeaderEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(SSLHealthCheckProxyHeaderEnum::NONE),
           "PROXY_V1" => Ok(SSLHealthCheckProxyHeaderEnum::PROXYV1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SSLHealthCheckProxyHeaderEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SavedAttachedDiskInterfaceEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME.
pub enum SavedAttachedDiskInterfaceEnum {
    
    /// "NVME"
    #[serde(rename="NVME")]
    NVME,
    
    /// "SCSI"
    #[serde(rename="SCSI")]
    SCSI,
}

impl AsRef<str> for SavedAttachedDiskInterfaceEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SavedAttachedDiskInterfaceEnum::NVME => "NVME",
            SavedAttachedDiskInterfaceEnum::SCSI => "SCSI",
        }
    }
}

impl std::convert::TryFrom< &str> for SavedAttachedDiskInterfaceEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NVME" => Ok(SavedAttachedDiskInterfaceEnum::NVME),
           "SCSI" => Ok(SavedAttachedDiskInterfaceEnum::SCSI),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SavedAttachedDiskInterfaceEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SavedAttachedDiskModeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY.
pub enum SavedAttachedDiskModeEnum {
    

    /// Attaches this disk in read-only mode. Multiple virtual machines can use a disk in read-only mode at a time.
    ///
    /// "READ_ONLY"
    #[serde(rename="READ_ONLY")]
    READONLY,
    

    /// *[Default]* Attaches this disk in read-write mode. Only one virtual machine at a time can be attached to a disk in read-write mode.
    ///
    /// "READ_WRITE"
    #[serde(rename="READ_WRITE")]
    READWRITE,
}

impl AsRef<str> for SavedAttachedDiskModeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SavedAttachedDiskModeEnum::READONLY => "READ_ONLY",
            SavedAttachedDiskModeEnum::READWRITE => "READ_WRITE",
        }
    }
}

impl std::convert::TryFrom< &str> for SavedAttachedDiskModeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "READ_ONLY" => Ok(SavedAttachedDiskModeEnum::READONLY),
           "READ_WRITE" => Ok(SavedAttachedDiskModeEnum::READWRITE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SavedAttachedDiskModeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SavedAttachedDiskStorageBytesStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
pub enum SavedAttachedDiskStorageBytesStatusEnum {
    
    /// "UPDATING"
    #[serde(rename="UPDATING")]
    UPDATING,
    
    /// "UP_TO_DATE"
    #[serde(rename="UP_TO_DATE")]
    UPTODATE,
}

impl AsRef<str> for SavedAttachedDiskStorageBytesStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SavedAttachedDiskStorageBytesStatusEnum::UPDATING => "UPDATING",
            SavedAttachedDiskStorageBytesStatusEnum::UPTODATE => "UP_TO_DATE",
        }
    }
}

impl std::convert::TryFrom< &str> for SavedAttachedDiskStorageBytesStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "UPDATING" => Ok(SavedAttachedDiskStorageBytesStatusEnum::UPDATING),
           "UP_TO_DATE" => Ok(SavedAttachedDiskStorageBytesStatusEnum::UPTODATE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SavedAttachedDiskStorageBytesStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SavedAttachedDiskTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of the attached disk, either SCRATCH or PERSISTENT.
pub enum SavedAttachedDiskTypeEnum {
    
    /// "PERSISTENT"
    #[serde(rename="PERSISTENT")]
    PERSISTENT,
    
    /// "SCRATCH"
    #[serde(rename="SCRATCH")]
    SCRATCH,
}

impl AsRef<str> for SavedAttachedDiskTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SavedAttachedDiskTypeEnum::PERSISTENT => "PERSISTENT",
            SavedAttachedDiskTypeEnum::SCRATCH => "SCRATCH",
        }
    }
}

impl std::convert::TryFrom< &str> for SavedAttachedDiskTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "PERSISTENT" => Ok(SavedAttachedDiskTypeEnum::PERSISTENT),
           "SCRATCH" => Ok(SavedAttachedDiskTypeEnum::SCRATCH),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SavedAttachedDiskTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SavedDiskArchitectureEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The architecture of the attached disk.
pub enum SavedDiskArchitectureEnum {
    

    /// Default value indicating Architecture is not set.
    ///
    /// "ARCHITECTURE_UNSPECIFIED"
    #[serde(rename="ARCHITECTURE_UNSPECIFIED")]
    ARCHITECTUREUNSPECIFIED,
    

    /// Machines with architecture ARM64
    ///
    /// "ARM64"
    #[serde(rename="ARM64")]
    ARM64,
    

    /// Machines with architecture X86_64
    ///
    /// "X86_64"
    #[serde(rename="X86_64")]
    X8664,
}

impl AsRef<str> for SavedDiskArchitectureEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SavedDiskArchitectureEnum::ARCHITECTUREUNSPECIFIED => "ARCHITECTURE_UNSPECIFIED",
            SavedDiskArchitectureEnum::ARM64 => "ARM64",
            SavedDiskArchitectureEnum::X8664 => "X86_64",
        }
    }
}

impl std::convert::TryFrom< &str> for SavedDiskArchitectureEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ARCHITECTURE_UNSPECIFIED" => Ok(SavedDiskArchitectureEnum::ARCHITECTUREUNSPECIFIED),
           "ARM64" => Ok(SavedDiskArchitectureEnum::ARM64),
           "X86_64" => Ok(SavedDiskArchitectureEnum::X8664),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SavedDiskArchitectureEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SavedDiskStorageBytesStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
pub enum SavedDiskStorageBytesStatusEnum {
    
    /// "UPDATING"
    #[serde(rename="UPDATING")]
    UPDATING,
    
    /// "UP_TO_DATE"
    #[serde(rename="UP_TO_DATE")]
    UPTODATE,
}

impl AsRef<str> for SavedDiskStorageBytesStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SavedDiskStorageBytesStatusEnum::UPDATING => "UPDATING",
            SavedDiskStorageBytesStatusEnum::UPTODATE => "UP_TO_DATE",
        }
    }
}

impl std::convert::TryFrom< &str> for SavedDiskStorageBytesStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "UPDATING" => Ok(SavedDiskStorageBytesStatusEnum::UPDATING),
           "UP_TO_DATE" => Ok(SavedDiskStorageBytesStatusEnum::UPTODATE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SavedDiskStorageBytesStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ScalingScheduleStatusStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The current state of a scaling schedule.
pub enum ScalingScheduleStatusStateEnum {
    

    /// The current autoscaling recommendation is influenced by this scaling schedule.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// This scaling schedule has been disabled by the user.
    ///
    /// "DISABLED"
    #[serde(rename="DISABLED")]
    DISABLED,
    

    /// This scaling schedule will never become active again.
    ///
    /// "OBSOLETE"
    #[serde(rename="OBSOLETE")]
    OBSOLETE,
    

    /// The current autoscaling recommendation is not influenced by this scaling schedule.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
}

impl AsRef<str> for ScalingScheduleStatusStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ScalingScheduleStatusStateEnum::ACTIVE => "ACTIVE",
            ScalingScheduleStatusStateEnum::DISABLED => "DISABLED",
            ScalingScheduleStatusStateEnum::OBSOLETE => "OBSOLETE",
            ScalingScheduleStatusStateEnum::READY => "READY",
        }
    }
}

impl std::convert::TryFrom< &str> for ScalingScheduleStatusStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(ScalingScheduleStatusStateEnum::ACTIVE),
           "DISABLED" => Ok(ScalingScheduleStatusStateEnum::DISABLED),
           "OBSOLETE" => Ok(ScalingScheduleStatusStateEnum::OBSOLETE),
           "READY" => Ok(ScalingScheduleStatusStateEnum::READY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ScalingScheduleStatusStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SchedulingInstanceTerminationActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the termination action for the instance.
pub enum SchedulingInstanceTerminationActionEnum {
    

    /// Delete the VM.
    ///
    /// "DELETE"
    #[serde(rename="DELETE")]
    DELETE,
    

    /// Default value. This value is unused.
    ///
    /// "INSTANCE_TERMINATION_ACTION_UNSPECIFIED"
    #[serde(rename="INSTANCE_TERMINATION_ACTION_UNSPECIFIED")]
    INSTANCETERMINATIONACTIONUNSPECIFIED,
    

    /// Stop the VM without storing in-memory content. default action.
    ///
    /// "STOP"
    #[serde(rename="STOP")]
    STOP,
}

impl AsRef<str> for SchedulingInstanceTerminationActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SchedulingInstanceTerminationActionEnum::DELETE => "DELETE",
            SchedulingInstanceTerminationActionEnum::INSTANCETERMINATIONACTIONUNSPECIFIED => "INSTANCE_TERMINATION_ACTION_UNSPECIFIED",
            SchedulingInstanceTerminationActionEnum::STOP => "STOP",
        }
    }
}

impl std::convert::TryFrom< &str> for SchedulingInstanceTerminationActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DELETE" => Ok(SchedulingInstanceTerminationActionEnum::DELETE),
           "INSTANCE_TERMINATION_ACTION_UNSPECIFIED" => Ok(SchedulingInstanceTerminationActionEnum::INSTANCETERMINATIONACTIONUNSPECIFIED),
           "STOP" => Ok(SchedulingInstanceTerminationActionEnum::STOP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SchedulingInstanceTerminationActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SchedulingOnHostMaintenanceEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy.
pub enum SchedulingOnHostMaintenanceEnum {
    

    /// *[Default]* Allows Compute Engine to automatically migrate instances out of the way of maintenance events.
    ///
    /// "MIGRATE"
    #[serde(rename="MIGRATE")]
    MIGRATE,
    

    /// Tells Compute Engine to terminate and (optionally) restart the instance away from the maintenance activity. If you would like your instance to be restarted, set the automaticRestart flag to true. Your instance may be restarted more than once, and it may be restarted outside the window of maintenance events.
    ///
    /// "TERMINATE"
    #[serde(rename="TERMINATE")]
    TERMINATE,
}

impl AsRef<str> for SchedulingOnHostMaintenanceEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SchedulingOnHostMaintenanceEnum::MIGRATE => "MIGRATE",
            SchedulingOnHostMaintenanceEnum::TERMINATE => "TERMINATE",
        }
    }
}

impl std::convert::TryFrom< &str> for SchedulingOnHostMaintenanceEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "MIGRATE" => Ok(SchedulingOnHostMaintenanceEnum::MIGRATE),
           "TERMINATE" => Ok(SchedulingOnHostMaintenanceEnum::TERMINATE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SchedulingOnHostMaintenanceEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SchedulingProvisioningModelEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the provisioning model of the instance.
pub enum SchedulingProvisioningModelEnum {
    

    /// Heavily discounted, no guaranteed runtime.
    ///
    /// "SPOT"
    #[serde(rename="SPOT")]
    SPOT,
    

    /// Standard provisioning with user controlled runtime, no discounts.
    ///
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
}

impl AsRef<str> for SchedulingProvisioningModelEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SchedulingProvisioningModelEnum::SPOT => "SPOT",
            SchedulingProvisioningModelEnum::STANDARD => "STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for SchedulingProvisioningModelEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "SPOT" => Ok(SchedulingProvisioningModelEnum::SPOT),
           "STANDARD" => Ok(SchedulingProvisioningModelEnum::STANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SchedulingProvisioningModelEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SchedulingNodeAffinityOperatorEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
pub enum SchedulingNodeAffinityOperatorEnum {
    

    /// Requires Compute Engine to seek for matched nodes.
    ///
    /// "IN"
    #[serde(rename="IN")]
    IN,
    

    /// Requires Compute Engine to avoid certain nodes.
    ///
    /// "NOT_IN"
    #[serde(rename="NOT_IN")]
    NOTIN,
    
    /// "OPERATOR_UNSPECIFIED"
    #[serde(rename="OPERATOR_UNSPECIFIED")]
    OPERATORUNSPECIFIED,
}

impl AsRef<str> for SchedulingNodeAffinityOperatorEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SchedulingNodeAffinityOperatorEnum::IN => "IN",
            SchedulingNodeAffinityOperatorEnum::NOTIN => "NOT_IN",
            SchedulingNodeAffinityOperatorEnum::OPERATORUNSPECIFIED => "OPERATOR_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for SchedulingNodeAffinityOperatorEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IN" => Ok(SchedulingNodeAffinityOperatorEnum::IN),
           "NOT_IN" => Ok(SchedulingNodeAffinityOperatorEnum::NOTIN),
           "OPERATOR_UNSPECIFIED" => Ok(SchedulingNodeAffinityOperatorEnum::OPERATORUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SchedulingNodeAffinityOperatorEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. - CLOUD_ARMOR_NETWORK: Cloud Armor network policies can be configured to filter packets targeting network load balancing resources such as backend services, target pools, target instances, and instances with external IPs. They filter requests before the request is served from the application. This field can be set only at resource creation time.
pub enum SecurityPolicyTypeEnum {
    
    /// "CLOUD_ARMOR"
    #[serde(rename="CLOUD_ARMOR")]
    CLOUDARMOR,
    
    /// "CLOUD_ARMOR_EDGE"
    #[serde(rename="CLOUD_ARMOR_EDGE")]
    CLOUDARMOREDGE,
    
    /// "CLOUD_ARMOR_NETWORK"
    #[serde(rename="CLOUD_ARMOR_NETWORK")]
    CLOUDARMORNETWORK,
}

impl AsRef<str> for SecurityPolicyTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyTypeEnum::CLOUDARMOR => "CLOUD_ARMOR",
            SecurityPolicyTypeEnum::CLOUDARMOREDGE => "CLOUD_ARMOR_EDGE",
            SecurityPolicyTypeEnum::CLOUDARMORNETWORK => "CLOUD_ARMOR_NETWORK",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLOUD_ARMOR" => Ok(SecurityPolicyTypeEnum::CLOUDARMOR),
           "CLOUD_ARMOR_EDGE" => Ok(SecurityPolicyTypeEnum::CLOUDARMOREDGE),
           "CLOUD_ARMOR_NETWORK" => Ok(SecurityPolicyTypeEnum::CLOUDARMORNETWORK),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules. This field is only supported in Global Security Policies of type CLOUD_ARMOR.
pub enum SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum {
    
    /// "PREMIUM"
    #[serde(rename="PREMIUM")]
    PREMIUM,
    
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
}

impl AsRef<str> for SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum::PREMIUM => "PREMIUM",
            SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum::STANDARD => "STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "PREMIUM" => Ok(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum::PREMIUM),
           "STANDARD" => Ok(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum::STANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyAdvancedOptionsConfigJsonParsingEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum SecurityPolicyAdvancedOptionsConfigJsonParsingEnum {
    
    /// "DISABLED"
    #[serde(rename="DISABLED")]
    DISABLED,
    
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
    
    /// "STANDARD_WITH_GRAPHQL"
    #[serde(rename="STANDARD_WITH_GRAPHQL")]
    STANDARDWITHGRAPHQL,
}

impl AsRef<str> for SecurityPolicyAdvancedOptionsConfigJsonParsingEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyAdvancedOptionsConfigJsonParsingEnum::DISABLED => "DISABLED",
            SecurityPolicyAdvancedOptionsConfigJsonParsingEnum::STANDARD => "STANDARD",
            SecurityPolicyAdvancedOptionsConfigJsonParsingEnum::STANDARDWITHGRAPHQL => "STANDARD_WITH_GRAPHQL",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyAdvancedOptionsConfigJsonParsingEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DISABLED" => Ok(SecurityPolicyAdvancedOptionsConfigJsonParsingEnum::DISABLED),
           "STANDARD" => Ok(SecurityPolicyAdvancedOptionsConfigJsonParsingEnum::STANDARD),
           "STANDARD_WITH_GRAPHQL" => Ok(SecurityPolicyAdvancedOptionsConfigJsonParsingEnum::STANDARDWITHGRAPHQL),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyAdvancedOptionsConfigJsonParsingEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyAdvancedOptionsConfigLogLevelEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum SecurityPolicyAdvancedOptionsConfigLogLevelEnum {
    
    /// "NORMAL"
    #[serde(rename="NORMAL")]
    NORMAL,
    
    /// "VERBOSE"
    #[serde(rename="VERBOSE")]
    VERBOSE,
}

impl AsRef<str> for SecurityPolicyAdvancedOptionsConfigLogLevelEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyAdvancedOptionsConfigLogLevelEnum::NORMAL => "NORMAL",
            SecurityPolicyAdvancedOptionsConfigLogLevelEnum::VERBOSE => "VERBOSE",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyAdvancedOptionsConfigLogLevelEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NORMAL" => Ok(SecurityPolicyAdvancedOptionsConfigLogLevelEnum::NORMAL),
           "VERBOSE" => Ok(SecurityPolicyAdvancedOptionsConfigLogLevelEnum::VERBOSE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyAdvancedOptionsConfigLogLevelEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyDdosProtectionConfigDdosProtectionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum SecurityPolicyDdosProtectionConfigDdosProtectionEnum {
    
    /// "ADVANCED"
    #[serde(rename="ADVANCED")]
    ADVANCED,
    
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
}

impl AsRef<str> for SecurityPolicyDdosProtectionConfigDdosProtectionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyDdosProtectionConfigDdosProtectionEnum::ADVANCED => "ADVANCED",
            SecurityPolicyDdosProtectionConfigDdosProtectionEnum::STANDARD => "STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyDdosProtectionConfigDdosProtectionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ADVANCED" => Ok(SecurityPolicyDdosProtectionConfigDdosProtectionEnum::ADVANCED),
           "STANDARD" => Ok(SecurityPolicyDdosProtectionConfigDdosProtectionEnum::STANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyDdosProtectionConfigDdosProtectionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyRuleMatcherVersionedExprEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
pub enum SecurityPolicyRuleMatcherVersionedExprEnum {
    

    /// Matches the source IP address of a request to the IP ranges supplied in config.
    ///
    /// "SRC_IPS_V1"
    #[serde(rename="SRC_IPS_V1")]
    SRCIPSV1,
}

impl AsRef<str> for SecurityPolicyRuleMatcherVersionedExprEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyRuleMatcherVersionedExprEnum::SRCIPSV1 => "SRC_IPS_V1",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyRuleMatcherVersionedExprEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "SRC_IPS_V1" => Ok(SecurityPolicyRuleMatcherVersionedExprEnum::SRCIPSV1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyRuleMatcherVersionedExprEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The match operator for the field.
pub enum SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum {
    

    /// The operator matches if the field value contains the specified value.
    ///
    /// "CONTAINS"
    #[serde(rename="CONTAINS")]
    CONTAINS,
    

    /// The operator matches if the field value ends with the specified value.
    ///
    /// "ENDS_WITH"
    #[serde(rename="ENDS_WITH")]
    ENDSWITH,
    

    /// The operator matches if the field value equals the specified value.
    ///
    /// "EQUALS"
    #[serde(rename="EQUALS")]
    EQUALS,
    

    /// The operator matches if the field value is any value.
    ///
    /// "EQUALS_ANY"
    #[serde(rename="EQUALS_ANY")]
    EQUALSANY,
    

    /// The operator matches if the field value starts with the specified value.
    ///
    /// "STARTS_WITH"
    #[serde(rename="STARTS_WITH")]
    STARTSWITH,
}

impl AsRef<str> for SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum::CONTAINS => "CONTAINS",
            SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum::ENDSWITH => "ENDS_WITH",
            SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum::EQUALS => "EQUALS",
            SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum::EQUALSANY => "EQUALS_ANY",
            SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum::STARTSWITH => "STARTS_WITH",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CONTAINS" => Ok(SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum::CONTAINS),
           "ENDS_WITH" => Ok(SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum::ENDSWITH),
           "EQUALS" => Ok(SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum::EQUALS),
           "EQUALS_ANY" => Ok(SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum::EQUALSANY),
           "STARTS_WITH" => Ok(SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum::STARTSWITH),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamOpEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if "enforceOnKey" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. - TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL. - USER_IP: The IP address of the originating client, which is resolved based on "userIpRequestHeaders" configured with the security policy. If there is no "userIpRequestHeaders" configuration or an IP address cannot be resolved from it, the key type defaults to IP. 
pub enum SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum {
    
    /// "ALL"
    #[serde(rename="ALL")]
    ALL,
    
    /// "HTTP_COOKIE"
    #[serde(rename="HTTP_COOKIE")]
    HTTPCOOKIE,
    
    /// "HTTP_HEADER"
    #[serde(rename="HTTP_HEADER")]
    HTTPHEADER,
    
    /// "HTTP_PATH"
    #[serde(rename="HTTP_PATH")]
    HTTPPATH,
    
    /// "IP"
    #[serde(rename="IP")]
    IP,
    
    /// "REGION_CODE"
    #[serde(rename="REGION_CODE")]
    REGIONCODE,
    
    /// "SNI"
    #[serde(rename="SNI")]
    SNI,
    
    /// "TLS_JA3_FINGERPRINT"
    #[serde(rename="TLS_JA3_FINGERPRINT")]
    TLSJA3FINGERPRINT,
    
    /// "USER_IP"
    #[serde(rename="USER_IP")]
    USERIP,
    
    /// "XFF_IP"
    #[serde(rename="XFF_IP")]
    XFFIP,
}

impl AsRef<str> for SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::ALL => "ALL",
            SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::HTTPCOOKIE => "HTTP_COOKIE",
            SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::HTTPHEADER => "HTTP_HEADER",
            SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::HTTPPATH => "HTTP_PATH",
            SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::IP => "IP",
            SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::REGIONCODE => "REGION_CODE",
            SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::SNI => "SNI",
            SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::TLSJA3FINGERPRINT => "TLS_JA3_FINGERPRINT",
            SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::USERIP => "USER_IP",
            SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::XFFIP => "XFF_IP",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALL" => Ok(SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::ALL),
           "HTTP_COOKIE" => Ok(SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::HTTPCOOKIE),
           "HTTP_HEADER" => Ok(SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::HTTPHEADER),
           "HTTP_PATH" => Ok(SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::HTTPPATH),
           "IP" => Ok(SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::IP),
           "REGION_CODE" => Ok(SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::REGIONCODE),
           "SNI" => Ok(SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::SNI),
           "TLS_JA3_FINGERPRINT" => Ok(SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::TLSJA3FINGERPRINT),
           "USER_IP" => Ok(SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::USERIP),
           "XFF_IP" => Ok(SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum::XFFIP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if "enforceOnKeyConfigs" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. - TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL. - USER_IP: The IP address of the originating client, which is resolved based on "userIpRequestHeaders" configured with the security policy. If there is no "userIpRequestHeaders" configuration or an IP address cannot be resolved from it, the key type defaults to IP. 
pub enum SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum {
    
    /// "ALL"
    #[serde(rename="ALL")]
    ALL,
    
    /// "HTTP_COOKIE"
    #[serde(rename="HTTP_COOKIE")]
    HTTPCOOKIE,
    
    /// "HTTP_HEADER"
    #[serde(rename="HTTP_HEADER")]
    HTTPHEADER,
    
    /// "HTTP_PATH"
    #[serde(rename="HTTP_PATH")]
    HTTPPATH,
    
    /// "IP"
    #[serde(rename="IP")]
    IP,
    
    /// "REGION_CODE"
    #[serde(rename="REGION_CODE")]
    REGIONCODE,
    
    /// "SNI"
    #[serde(rename="SNI")]
    SNI,
    
    /// "TLS_JA3_FINGERPRINT"
    #[serde(rename="TLS_JA3_FINGERPRINT")]
    TLSJA3FINGERPRINT,
    
    /// "USER_IP"
    #[serde(rename="USER_IP")]
    USERIP,
    
    /// "XFF_IP"
    #[serde(rename="XFF_IP")]
    XFFIP,
}

impl AsRef<str> for SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::ALL => "ALL",
            SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::HTTPCOOKIE => "HTTP_COOKIE",
            SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::HTTPHEADER => "HTTP_HEADER",
            SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::HTTPPATH => "HTTP_PATH",
            SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::IP => "IP",
            SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::REGIONCODE => "REGION_CODE",
            SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::SNI => "SNI",
            SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::TLSJA3FINGERPRINT => "TLS_JA3_FINGERPRINT",
            SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::USERIP => "USER_IP",
            SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::XFFIP => "XFF_IP",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALL" => Ok(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::ALL),
           "HTTP_COOKIE" => Ok(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::HTTPCOOKIE),
           "HTTP_HEADER" => Ok(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::HTTPHEADER),
           "HTTP_PATH" => Ok(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::HTTPPATH),
           "IP" => Ok(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::IP),
           "REGION_CODE" => Ok(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::REGIONCODE),
           "SNI" => Ok(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::SNI),
           "TLS_JA3_FINGERPRINT" => Ok(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::TLSJA3FINGERPRINT),
           "USER_IP" => Ok(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::USERIP),
           "XFF_IP" => Ok(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum::XFFIP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyRuleRedirectOptionTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Type of the redirect action.
pub enum SecurityPolicyRuleRedirectOptionTypeEnum {
    
    /// "EXTERNAL_302"
    #[serde(rename="EXTERNAL_302")]
    EXTERNAL302,
    
    /// "GOOGLE_RECAPTCHA"
    #[serde(rename="GOOGLE_RECAPTCHA")]
    GOOGLERECAPTCHA,
}

impl AsRef<str> for SecurityPolicyRuleRedirectOptionTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyRuleRedirectOptionTypeEnum::EXTERNAL302 => "EXTERNAL_302",
            SecurityPolicyRuleRedirectOptionTypeEnum::GOOGLERECAPTCHA => "GOOGLE_RECAPTCHA",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyRuleRedirectOptionTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EXTERNAL_302" => Ok(SecurityPolicyRuleRedirectOptionTypeEnum::EXTERNAL302),
           "GOOGLE_RECAPTCHA" => Ok(SecurityPolicyRuleRedirectOptionTypeEnum::GOOGLERECAPTCHA),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyRuleRedirectOptionTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyUserDefinedFieldBaseEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The base relative to which 'offset' is measured. Possible values are: - IPV4: Points to the beginning of the IPv4 header. - IPV6: Points to the beginning of the IPv6 header. - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. required
pub enum SecurityPolicyUserDefinedFieldBaseEnum {
    
    /// "IPV4"
    #[serde(rename="IPV4")]
    IPV4,
    
    /// "IPV6"
    #[serde(rename="IPV6")]
    IPV6,
    
    /// "TCP"
    #[serde(rename="TCP")]
    TCP,
    
    /// "UDP"
    #[serde(rename="UDP")]
    UDP,
}

impl AsRef<str> for SecurityPolicyUserDefinedFieldBaseEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyUserDefinedFieldBaseEnum::IPV4 => "IPV4",
            SecurityPolicyUserDefinedFieldBaseEnum::IPV6 => "IPV6",
            SecurityPolicyUserDefinedFieldBaseEnum::TCP => "TCP",
            SecurityPolicyUserDefinedFieldBaseEnum::UDP => "UDP",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyUserDefinedFieldBaseEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPV4" => Ok(SecurityPolicyUserDefinedFieldBaseEnum::IPV4),
           "IPV6" => Ok(SecurityPolicyUserDefinedFieldBaseEnum::IPV6),
           "TCP" => Ok(SecurityPolicyUserDefinedFieldBaseEnum::TCP),
           "UDP" => Ok(SecurityPolicyUserDefinedFieldBaseEnum::UDP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyUserDefinedFieldBaseEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ServerBindingTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum ServerBindingTypeEnum {
    

    /// Node may associate with any physical server over its lifetime.
    ///
    /// "RESTART_NODE_ON_ANY_SERVER"
    #[serde(rename="RESTART_NODE_ON_ANY_SERVER")]
    RESTARTNODEONANYSERVER,
    

    /// Node may associate with minimal physical servers over its lifetime.
    ///
    /// "RESTART_NODE_ON_MINIMAL_SERVERS"
    #[serde(rename="RESTART_NODE_ON_MINIMAL_SERVERS")]
    RESTARTNODEONMINIMALSERVERS,
    
    /// "SERVER_BINDING_TYPE_UNSPECIFIED"
    #[serde(rename="SERVER_BINDING_TYPE_UNSPECIFIED")]
    SERVERBINDINGTYPEUNSPECIFIED,
}

impl AsRef<str> for ServerBindingTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ServerBindingTypeEnum::RESTARTNODEONANYSERVER => "RESTART_NODE_ON_ANY_SERVER",
            ServerBindingTypeEnum::RESTARTNODEONMINIMALSERVERS => "RESTART_NODE_ON_MINIMAL_SERVERS",
            ServerBindingTypeEnum::SERVERBINDINGTYPEUNSPECIFIED => "SERVER_BINDING_TYPE_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for ServerBindingTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "RESTART_NODE_ON_ANY_SERVER" => Ok(ServerBindingTypeEnum::RESTARTNODEONANYSERVER),
           "RESTART_NODE_ON_MINIMAL_SERVERS" => Ok(ServerBindingTypeEnum::RESTARTNODEONMINIMALSERVERS),
           "SERVER_BINDING_TYPE_UNSPECIFIED" => Ok(ServerBindingTypeEnum::SERVERBINDINGTYPEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ServerBindingTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ServiceAttachmentConnectionPreferenceEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
pub enum ServiceAttachmentConnectionPreferenceEnum {
    
    /// "ACCEPT_AUTOMATIC"
    #[serde(rename="ACCEPT_AUTOMATIC")]
    ACCEPTAUTOMATIC,
    
    /// "ACCEPT_MANUAL"
    #[serde(rename="ACCEPT_MANUAL")]
    ACCEPTMANUAL,
    
    /// "CONNECTION_PREFERENCE_UNSPECIFIED"
    #[serde(rename="CONNECTION_PREFERENCE_UNSPECIFIED")]
    CONNECTIONPREFERENCEUNSPECIFIED,
}

impl AsRef<str> for ServiceAttachmentConnectionPreferenceEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ServiceAttachmentConnectionPreferenceEnum::ACCEPTAUTOMATIC => "ACCEPT_AUTOMATIC",
            ServiceAttachmentConnectionPreferenceEnum::ACCEPTMANUAL => "ACCEPT_MANUAL",
            ServiceAttachmentConnectionPreferenceEnum::CONNECTIONPREFERENCEUNSPECIFIED => "CONNECTION_PREFERENCE_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for ServiceAttachmentConnectionPreferenceEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACCEPT_AUTOMATIC" => Ok(ServiceAttachmentConnectionPreferenceEnum::ACCEPTAUTOMATIC),
           "ACCEPT_MANUAL" => Ok(ServiceAttachmentConnectionPreferenceEnum::ACCEPTMANUAL),
           "CONNECTION_PREFERENCE_UNSPECIFIED" => Ok(ServiceAttachmentConnectionPreferenceEnum::CONNECTIONPREFERENCEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ServiceAttachmentConnectionPreferenceEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ServiceAttachmentConnectedEndpointStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The status of a connected endpoint to this service attachment.
pub enum ServiceAttachmentConnectedEndpointStatusEnum {
    

    /// The connection has been accepted by the producer.
    ///
    /// "ACCEPTED"
    #[serde(rename="ACCEPTED")]
    ACCEPTED,
    

    /// The connection has been closed by the producer.
    ///
    /// "CLOSED"
    #[serde(rename="CLOSED")]
    CLOSED,
    

    /// The connection has been accepted by the producer, but the producer needs to take further action before the forwarding rule can serve traffic.
    ///
    /// "NEEDS_ATTENTION"
    #[serde(rename="NEEDS_ATTENTION")]
    NEEDSATTENTION,
    

    /// The connection is pending acceptance by the producer.
    ///
    /// "PENDING"
    #[serde(rename="PENDING")]
    PENDING,
    

    /// The consumer is still connected but not using the connection.
    ///
    /// "REJECTED"
    #[serde(rename="REJECTED")]
    REJECTED,
    
    /// "STATUS_UNSPECIFIED"
    #[serde(rename="STATUS_UNSPECIFIED")]
    STATUSUNSPECIFIED,
}

impl AsRef<str> for ServiceAttachmentConnectedEndpointStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ServiceAttachmentConnectedEndpointStatusEnum::ACCEPTED => "ACCEPTED",
            ServiceAttachmentConnectedEndpointStatusEnum::CLOSED => "CLOSED",
            ServiceAttachmentConnectedEndpointStatusEnum::NEEDSATTENTION => "NEEDS_ATTENTION",
            ServiceAttachmentConnectedEndpointStatusEnum::PENDING => "PENDING",
            ServiceAttachmentConnectedEndpointStatusEnum::REJECTED => "REJECTED",
            ServiceAttachmentConnectedEndpointStatusEnum::STATUSUNSPECIFIED => "STATUS_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for ServiceAttachmentConnectedEndpointStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACCEPTED" => Ok(ServiceAttachmentConnectedEndpointStatusEnum::ACCEPTED),
           "CLOSED" => Ok(ServiceAttachmentConnectedEndpointStatusEnum::CLOSED),
           "NEEDS_ATTENTION" => Ok(ServiceAttachmentConnectedEndpointStatusEnum::NEEDSATTENTION),
           "PENDING" => Ok(ServiceAttachmentConnectedEndpointStatusEnum::PENDING),
           "REJECTED" => Ok(ServiceAttachmentConnectedEndpointStatusEnum::REJECTED),
           "STATUS_UNSPECIFIED" => Ok(ServiceAttachmentConnectedEndpointStatusEnum::STATUSUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ServiceAttachmentConnectedEndpointStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Status of the action, which can be one of the following: `PROPAGATING`, `PROPAGATED`, `ABANDONED`, `FAILED`, or `DONE`.
pub enum SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum {
    

    /// Operation not tracked in this location e.g. zone is marked as DOWN.
    ///
    /// "ABANDONED"
    #[serde(rename="ABANDONED")]
    ABANDONED,
    

    /// Operation has completed successfully.
    ///
    /// "DONE"
    #[serde(rename="DONE")]
    DONE,
    

    /// Operation is in an error state.
    ///
    /// "FAILED"
    #[serde(rename="FAILED")]
    FAILED,
    

    /// Operation is confirmed to be in the location.
    ///
    /// "PROPAGATED"
    #[serde(rename="PROPAGATED")]
    PROPAGATED,
    

    /// Operation is not yet confirmed to have been created in the location.
    ///
    /// "PROPAGATING"
    #[serde(rename="PROPAGATING")]
    PROPAGATING,
    
    /// "UNSPECIFIED"
    #[serde(rename="UNSPECIFIED")]
    UNSPECIFIED,
}

impl AsRef<str> for SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::ABANDONED => "ABANDONED",
            SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::DONE => "DONE",
            SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::FAILED => "FAILED",
            SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::PROPAGATED => "PROPAGATED",
            SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::PROPAGATING => "PROPAGATING",
            SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::UNSPECIFIED => "UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ABANDONED" => Ok(SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::ABANDONED),
           "DONE" => Ok(SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::DONE),
           "FAILED" => Ok(SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::FAILED),
           "PROPAGATED" => Ok(SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::PROPAGATED),
           "PROPAGATING" => Ok(SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::PROPAGATING),
           "UNSPECIFIED" => Ok(SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum::UNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfoStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ShareSettingShareTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Type of sharing for this shared-reservation
pub enum ShareSettingShareTypeEnum {
    

    /// Default value.
    ///
    /// "LOCAL"
    #[serde(rename="LOCAL")]
    LOCAL,
    

    /// Shared-reservation is open to entire Organization
    ///
    /// "ORGANIZATION"
    #[serde(rename="ORGANIZATION")]
    ORGANIZATION,
    

    /// Default value. This value is unused.
    ///
    /// "SHARE_TYPE_UNSPECIFIED"
    #[serde(rename="SHARE_TYPE_UNSPECIFIED")]
    SHARETYPEUNSPECIFIED,
    

    /// Shared-reservation is open to specific projects
    ///
    /// "SPECIFIC_PROJECTS"
    #[serde(rename="SPECIFIC_PROJECTS")]
    SPECIFICPROJECTS,
}

impl AsRef<str> for ShareSettingShareTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ShareSettingShareTypeEnum::LOCAL => "LOCAL",
            ShareSettingShareTypeEnum::ORGANIZATION => "ORGANIZATION",
            ShareSettingShareTypeEnum::SHARETYPEUNSPECIFIED => "SHARE_TYPE_UNSPECIFIED",
            ShareSettingShareTypeEnum::SPECIFICPROJECTS => "SPECIFIC_PROJECTS",
        }
    }
}

impl std::convert::TryFrom< &str> for ShareSettingShareTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "LOCAL" => Ok(ShareSettingShareTypeEnum::LOCAL),
           "ORGANIZATION" => Ok(ShareSettingShareTypeEnum::ORGANIZATION),
           "SHARE_TYPE_UNSPECIFIED" => Ok(ShareSettingShareTypeEnum::SHARETYPEUNSPECIFIED),
           "SPECIFIC_PROJECTS" => Ok(ShareSettingShareTypeEnum::SPECIFICPROJECTS),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ShareSettingShareTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SnapshotArchitectureEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The architecture of the snapshot. Valid values are ARM64 or X86_64.
pub enum SnapshotArchitectureEnum {
    

    /// Default value indicating Architecture is not set.
    ///
    /// "ARCHITECTURE_UNSPECIFIED"
    #[serde(rename="ARCHITECTURE_UNSPECIFIED")]
    ARCHITECTUREUNSPECIFIED,
    

    /// Machines with architecture ARM64
    ///
    /// "ARM64"
    #[serde(rename="ARM64")]
    ARM64,
    

    /// Machines with architecture X86_64
    ///
    /// "X86_64"
    #[serde(rename="X86_64")]
    X8664,
}

impl AsRef<str> for SnapshotArchitectureEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SnapshotArchitectureEnum::ARCHITECTUREUNSPECIFIED => "ARCHITECTURE_UNSPECIFIED",
            SnapshotArchitectureEnum::ARM64 => "ARM64",
            SnapshotArchitectureEnum::X8664 => "X86_64",
        }
    }
}

impl std::convert::TryFrom< &str> for SnapshotArchitectureEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ARCHITECTURE_UNSPECIFIED" => Ok(SnapshotArchitectureEnum::ARCHITECTUREUNSPECIFIED),
           "ARM64" => Ok(SnapshotArchitectureEnum::ARM64),
           "X86_64" => Ok(SnapshotArchitectureEnum::X8664),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SnapshotArchitectureEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SnapshotSnapshotTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Indicates the type of the snapshot.
pub enum SnapshotSnapshotTypeEnum {
    
    /// "ARCHIVE"
    #[serde(rename="ARCHIVE")]
    ARCHIVE,
    
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
}

impl AsRef<str> for SnapshotSnapshotTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SnapshotSnapshotTypeEnum::ARCHIVE => "ARCHIVE",
            SnapshotSnapshotTypeEnum::STANDARD => "STANDARD",
        }
    }
}

impl std::convert::TryFrom< &str> for SnapshotSnapshotTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ARCHIVE" => Ok(SnapshotSnapshotTypeEnum::ARCHIVE),
           "STANDARD" => Ok(SnapshotSnapshotTypeEnum::STANDARD),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SnapshotSnapshotTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SnapshotStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
pub enum SnapshotStatusEnum {
    

    /// Snapshot creation is in progress.
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// Snapshot is currently being deleted.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// Snapshot creation failed.
    ///
    /// "FAILED"
    #[serde(rename="FAILED")]
    FAILED,
    

    /// Snapshot has been created successfully.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
    

    /// Snapshot is being uploaded.
    ///
    /// "UPLOADING"
    #[serde(rename="UPLOADING")]
    UPLOADING,
}

impl AsRef<str> for SnapshotStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SnapshotStatusEnum::CREATING => "CREATING",
            SnapshotStatusEnum::DELETING => "DELETING",
            SnapshotStatusEnum::FAILED => "FAILED",
            SnapshotStatusEnum::READY => "READY",
            SnapshotStatusEnum::UPLOADING => "UPLOADING",
        }
    }
}

impl std::convert::TryFrom< &str> for SnapshotStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(SnapshotStatusEnum::CREATING),
           "DELETING" => Ok(SnapshotStatusEnum::DELETING),
           "FAILED" => Ok(SnapshotStatusEnum::FAILED),
           "READY" => Ok(SnapshotStatusEnum::READY),
           "UPLOADING" => Ok(SnapshotStatusEnum::UPLOADING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SnapshotStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SnapshotStorageBytesStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
pub enum SnapshotStorageBytesStatusEnum {
    
    /// "UPDATING"
    #[serde(rename="UPDATING")]
    UPDATING,
    
    /// "UP_TO_DATE"
    #[serde(rename="UP_TO_DATE")]
    UPTODATE,
}

impl AsRef<str> for SnapshotStorageBytesStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SnapshotStorageBytesStatusEnum::UPDATING => "UPDATING",
            SnapshotStorageBytesStatusEnum::UPTODATE => "UP_TO_DATE",
        }
    }
}

impl std::convert::TryFrom< &str> for SnapshotStorageBytesStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "UPDATING" => Ok(SnapshotStorageBytesStatusEnum::UPDATING),
           "UP_TO_DATE" => Ok(SnapshotStorageBytesStatusEnum::UPTODATE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SnapshotStorageBytesStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SnapshotSettingsStorageLocationSettingPolicyEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The chosen location policy.
pub enum SnapshotSettingsStorageLocationSettingPolicyEnum {
    

    /// Store snapshot in the same region as with the originating disk. No additional parameters are needed.
    ///
    /// "LOCAL_REGION"
    #[serde(rename="LOCAL_REGION")]
    LOCALREGION,
    

    /// Store snapshot to the nearest multi region GCS bucket, relative to the originating disk. No additional parameters are needed.
    ///
    /// "NEAREST_MULTI_REGION"
    #[serde(rename="NEAREST_MULTI_REGION")]
    NEARESTMULTIREGION,
    

    /// Store snapshot in the specific locations, as specified by the user. The list of regions to store must be defined under the `locations` field.
    ///
    /// "SPECIFIC_LOCATIONS"
    #[serde(rename="SPECIFIC_LOCATIONS")]
    SPECIFICLOCATIONS,
    
    /// "STORAGE_LOCATION_POLICY_UNSPECIFIED"
    #[serde(rename="STORAGE_LOCATION_POLICY_UNSPECIFIED")]
    STORAGELOCATIONPOLICYUNSPECIFIED,
}

impl AsRef<str> for SnapshotSettingsStorageLocationSettingPolicyEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SnapshotSettingsStorageLocationSettingPolicyEnum::LOCALREGION => "LOCAL_REGION",
            SnapshotSettingsStorageLocationSettingPolicyEnum::NEARESTMULTIREGION => "NEAREST_MULTI_REGION",
            SnapshotSettingsStorageLocationSettingPolicyEnum::SPECIFICLOCATIONS => "SPECIFIC_LOCATIONS",
            SnapshotSettingsStorageLocationSettingPolicyEnum::STORAGELOCATIONPOLICYUNSPECIFIED => "STORAGE_LOCATION_POLICY_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for SnapshotSettingsStorageLocationSettingPolicyEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "LOCAL_REGION" => Ok(SnapshotSettingsStorageLocationSettingPolicyEnum::LOCALREGION),
           "NEAREST_MULTI_REGION" => Ok(SnapshotSettingsStorageLocationSettingPolicyEnum::NEARESTMULTIREGION),
           "SPECIFIC_LOCATIONS" => Ok(SnapshotSettingsStorageLocationSettingPolicyEnum::SPECIFICLOCATIONS),
           "STORAGE_LOCATION_POLICY_UNSPECIFIED" => Ok(SnapshotSettingsStorageLocationSettingPolicyEnum::STORAGELOCATIONPOLICYUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SnapshotSettingsStorageLocationSettingPolicyEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SourceInstancePropertyKeyRevocationActionTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
pub enum SourceInstancePropertyKeyRevocationActionTypeEnum {
    

    /// Default value. This value is unused.
    ///
    /// "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED"
    #[serde(rename="KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED")]
    KEYREVOCATIONACTIONTYPEUNSPECIFIED,
    

    /// Indicates user chose no operation.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    

    /// Indicates user chose to opt for VM shutdown on key revocation.
    ///
    /// "STOP"
    #[serde(rename="STOP")]
    STOP,
}

impl AsRef<str> for SourceInstancePropertyKeyRevocationActionTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SourceInstancePropertyKeyRevocationActionTypeEnum::KEYREVOCATIONACTIONTYPEUNSPECIFIED => "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED",
            SourceInstancePropertyKeyRevocationActionTypeEnum::NONE => "NONE",
            SourceInstancePropertyKeyRevocationActionTypeEnum::STOP => "STOP",
        }
    }
}

impl std::convert::TryFrom< &str> for SourceInstancePropertyKeyRevocationActionTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED" => Ok(SourceInstancePropertyKeyRevocationActionTypeEnum::KEYREVOCATIONACTIONTYPEUNSPECIFIED),
           "NONE" => Ok(SourceInstancePropertyKeyRevocationActionTypeEnum::NONE),
           "STOP" => Ok(SourceInstancePropertyKeyRevocationActionTypeEnum::STOP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SourceInstancePropertyKeyRevocationActionTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslCertificateTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
pub enum SslCertificateTypeEnum {
    

    /// Google-managed SSLCertificate.
    ///
    /// "MANAGED"
    #[serde(rename="MANAGED")]
    MANAGED,
    

    /// Certificate uploaded by user.
    ///
    /// "SELF_MANAGED"
    #[serde(rename="SELF_MANAGED")]
    SELFMANAGED,
    
    /// "TYPE_UNSPECIFIED"
    #[serde(rename="TYPE_UNSPECIFIED")]
    TYPEUNSPECIFIED,
}

impl AsRef<str> for SslCertificateTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslCertificateTypeEnum::MANAGED => "MANAGED",
            SslCertificateTypeEnum::SELFMANAGED => "SELF_MANAGED",
            SslCertificateTypeEnum::TYPEUNSPECIFIED => "TYPE_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for SslCertificateTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "MANAGED" => Ok(SslCertificateTypeEnum::MANAGED),
           "SELF_MANAGED" => Ok(SslCertificateTypeEnum::SELFMANAGED),
           "TYPE_UNSPECIFIED" => Ok(SslCertificateTypeEnum::TYPEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslCertificateTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslCertificateManagedSslCertificateDomainStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output only] Detailed statuses of the domains specified for managed certificate resource.
pub enum SslCertificateManagedSslCertificateDomainStatusEnum {
    

    /// A managed certificate can be provisioned, no issues for this domain.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    
    /// "DOMAIN_STATUS_UNSPECIFIED"
    #[serde(rename="DOMAIN_STATUS_UNSPECIFIED")]
    DOMAINSTATUSUNSPECIFIED,
    

    /// Failed to check CAA records for the domain.
    ///
    /// "FAILED_CAA_CHECKING"
    #[serde(rename="FAILED_CAA_CHECKING")]
    FAILEDCAACHECKING,
    

    /// Certificate issuance forbidden by an explicit CAA record for the domain.
    ///
    /// "FAILED_CAA_FORBIDDEN"
    #[serde(rename="FAILED_CAA_FORBIDDEN")]
    FAILEDCAAFORBIDDEN,
    

    /// There seems to be problem with the user's DNS or load balancer configuration for this domain.
    ///
    /// "FAILED_NOT_VISIBLE"
    #[serde(rename="FAILED_NOT_VISIBLE")]
    FAILEDNOTVISIBLE,
    

    /// Reached rate-limit for certificates per top-level private domain.
    ///
    /// "FAILED_RATE_LIMITED"
    #[serde(rename="FAILED_RATE_LIMITED")]
    FAILEDRATELIMITED,
    

    /// Certificate provisioning for this domain is under way. GCP will attempt to provision the first certificate.
    ///
    /// "PROVISIONING"
    #[serde(rename="PROVISIONING")]
    PROVISIONING,
}

impl AsRef<str> for SslCertificateManagedSslCertificateDomainStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslCertificateManagedSslCertificateDomainStatusEnum::ACTIVE => "ACTIVE",
            SslCertificateManagedSslCertificateDomainStatusEnum::DOMAINSTATUSUNSPECIFIED => "DOMAIN_STATUS_UNSPECIFIED",
            SslCertificateManagedSslCertificateDomainStatusEnum::FAILEDCAACHECKING => "FAILED_CAA_CHECKING",
            SslCertificateManagedSslCertificateDomainStatusEnum::FAILEDCAAFORBIDDEN => "FAILED_CAA_FORBIDDEN",
            SslCertificateManagedSslCertificateDomainStatusEnum::FAILEDNOTVISIBLE => "FAILED_NOT_VISIBLE",
            SslCertificateManagedSslCertificateDomainStatusEnum::FAILEDRATELIMITED => "FAILED_RATE_LIMITED",
            SslCertificateManagedSslCertificateDomainStatusEnum::PROVISIONING => "PROVISIONING",
        }
    }
}

impl std::convert::TryFrom< &str> for SslCertificateManagedSslCertificateDomainStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(SslCertificateManagedSslCertificateDomainStatusEnum::ACTIVE),
           "DOMAIN_STATUS_UNSPECIFIED" => Ok(SslCertificateManagedSslCertificateDomainStatusEnum::DOMAINSTATUSUNSPECIFIED),
           "FAILED_CAA_CHECKING" => Ok(SslCertificateManagedSslCertificateDomainStatusEnum::FAILEDCAACHECKING),
           "FAILED_CAA_FORBIDDEN" => Ok(SslCertificateManagedSslCertificateDomainStatusEnum::FAILEDCAAFORBIDDEN),
           "FAILED_NOT_VISIBLE" => Ok(SslCertificateManagedSslCertificateDomainStatusEnum::FAILEDNOTVISIBLE),
           "FAILED_RATE_LIMITED" => Ok(SslCertificateManagedSslCertificateDomainStatusEnum::FAILEDRATELIMITED),
           "PROVISIONING" => Ok(SslCertificateManagedSslCertificateDomainStatusEnum::PROVISIONING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslCertificateManagedSslCertificateDomainStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslCertificateManagedSslCertificateStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output only] Status of the managed certificate resource.
pub enum SslCertificateManagedSslCertificateStatusEnum {
    

    /// The certificate management is working, and a certificate has been provisioned.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    
    /// "MANAGED_CERTIFICATE_STATUS_UNSPECIFIED"
    #[serde(rename="MANAGED_CERTIFICATE_STATUS_UNSPECIFIED")]
    MANAGEDCERTIFICATESTATUSUNSPECIFIED,
    

    /// The certificate management is working. GCP will attempt to provision the first certificate.
    ///
    /// "PROVISIONING"
    #[serde(rename="PROVISIONING")]
    PROVISIONING,
    

    /// Certificate provisioning failed due to an issue with the DNS or load balancing configuration. For details of which domain failed, consult domain_status field.
    ///
    /// "PROVISIONING_FAILED"
    #[serde(rename="PROVISIONING_FAILED")]
    PROVISIONINGFAILED,
    

    /// Certificate provisioning failed due to an issue with the DNS or load balancing configuration. It won't be retried. To try again delete and create a new managed SslCertificate resource. For details of which domain failed, consult domain_status field.
    ///
    /// "PROVISIONING_FAILED_PERMANENTLY"
    #[serde(rename="PROVISIONING_FAILED_PERMANENTLY")]
    PROVISIONINGFAILEDPERMANENTLY,
    

    /// Renewal of the certificate has failed due to an issue with the DNS or load balancing configuration. The existing cert is still serving; however, it will expire shortly. To provision a renewed certificate, delete and create a new managed SslCertificate resource. For details on which domain failed, consult domain_status field.
    ///
    /// "RENEWAL_FAILED"
    #[serde(rename="RENEWAL_FAILED")]
    RENEWALFAILED,
}

impl AsRef<str> for SslCertificateManagedSslCertificateStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslCertificateManagedSslCertificateStatusEnum::ACTIVE => "ACTIVE",
            SslCertificateManagedSslCertificateStatusEnum::MANAGEDCERTIFICATESTATUSUNSPECIFIED => "MANAGED_CERTIFICATE_STATUS_UNSPECIFIED",
            SslCertificateManagedSslCertificateStatusEnum::PROVISIONING => "PROVISIONING",
            SslCertificateManagedSslCertificateStatusEnum::PROVISIONINGFAILED => "PROVISIONING_FAILED",
            SslCertificateManagedSslCertificateStatusEnum::PROVISIONINGFAILEDPERMANENTLY => "PROVISIONING_FAILED_PERMANENTLY",
            SslCertificateManagedSslCertificateStatusEnum::RENEWALFAILED => "RENEWAL_FAILED",
        }
    }
}

impl std::convert::TryFrom< &str> for SslCertificateManagedSslCertificateStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(SslCertificateManagedSslCertificateStatusEnum::ACTIVE),
           "MANAGED_CERTIFICATE_STATUS_UNSPECIFIED" => Ok(SslCertificateManagedSslCertificateStatusEnum::MANAGEDCERTIFICATESTATUSUNSPECIFIED),
           "PROVISIONING" => Ok(SslCertificateManagedSslCertificateStatusEnum::PROVISIONING),
           "PROVISIONING_FAILED" => Ok(SslCertificateManagedSslCertificateStatusEnum::PROVISIONINGFAILED),
           "PROVISIONING_FAILED_PERMANENTLY" => Ok(SslCertificateManagedSslCertificateStatusEnum::PROVISIONINGFAILEDPERMANENTLY),
           "RENEWAL_FAILED" => Ok(SslCertificateManagedSslCertificateStatusEnum::RENEWALFAILED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslCertificateManagedSslCertificateStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslPolicyMinTlsVersionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2.
pub enum SslPolicyMinTlsVersionEnum {
    

    /// TLS 1.0
    ///
    /// "TLS_1_0"
    #[serde(rename="TLS_1_0")]
    TLS10,
    

    /// TLS 1.1
    ///
    /// "TLS_1_1"
    #[serde(rename="TLS_1_1")]
    TLS11,
    

    /// TLS 1.2
    ///
    /// "TLS_1_2"
    #[serde(rename="TLS_1_2")]
    TLS12,
}

impl AsRef<str> for SslPolicyMinTlsVersionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslPolicyMinTlsVersionEnum::TLS10 => "TLS_1_0",
            SslPolicyMinTlsVersionEnum::TLS11 => "TLS_1_1",
            SslPolicyMinTlsVersionEnum::TLS12 => "TLS_1_2",
        }
    }
}

impl std::convert::TryFrom< &str> for SslPolicyMinTlsVersionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "TLS_1_0" => Ok(SslPolicyMinTlsVersionEnum::TLS10),
           "TLS_1_1" => Ok(SslPolicyMinTlsVersionEnum::TLS11),
           "TLS_1_2" => Ok(SslPolicyMinTlsVersionEnum::TLS12),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslPolicyMinTlsVersionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslPolicyProfileEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
pub enum SslPolicyProfileEnum {
    

    /// Compatible profile. Allows the broadset set of clients, even those which support only out-of-date SSL features to negotiate with the load balancer.
    ///
    /// "COMPATIBLE"
    #[serde(rename="COMPATIBLE")]
    COMPATIBLE,
    

    /// Custom profile. Allow only the set of allowed SSL features specified in the customFeatures field.
    ///
    /// "CUSTOM"
    #[serde(rename="CUSTOM")]
    CUSTOM,
    

    /// Modern profile. Supports a wide set of SSL features, allowing modern clients to negotiate SSL with the load balancer.
    ///
    /// "MODERN"
    #[serde(rename="MODERN")]
    MODERN,
    

    /// Restricted profile. Supports a reduced set of SSL features, intended to meet stricter compliance requirements.
    ///
    /// "RESTRICTED"
    #[serde(rename="RESTRICTED")]
    RESTRICTED,
}

impl AsRef<str> for SslPolicyProfileEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslPolicyProfileEnum::COMPATIBLE => "COMPATIBLE",
            SslPolicyProfileEnum::CUSTOM => "CUSTOM",
            SslPolicyProfileEnum::MODERN => "MODERN",
            SslPolicyProfileEnum::RESTRICTED => "RESTRICTED",
        }
    }
}

impl std::convert::TryFrom< &str> for SslPolicyProfileEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "COMPATIBLE" => Ok(SslPolicyProfileEnum::COMPATIBLE),
           "CUSTOM" => Ok(SslPolicyProfileEnum::CUSTOM),
           "MODERN" => Ok(SslPolicyProfileEnum::MODERN),
           "RESTRICTED" => Ok(SslPolicyProfileEnum::RESTRICTED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslPolicyProfileEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// These stateful disks will never be deleted during autohealing, update or VM instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
pub enum StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum {
    
    /// "NEVER"
    #[serde(rename="NEVER")]
    NEVER,
    
    /// "ON_PERMANENT_INSTANCE_DELETION"
    #[serde(rename="ON_PERMANENT_INSTANCE_DELETION")]
    ONPERMANENTINSTANCEDELETION,
}

impl AsRef<str> for StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum::NEVER => "NEVER",
            StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum::ONPERMANENTINSTANCEDELETION => "ON_PERMANENT_INSTANCE_DELETION",
        }
    }
}

impl std::convert::TryFrom< &str> for StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NEVER" => Ok(StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum::NEVER),
           "ON_PERMANENT_INSTANCE_DELETION" => Ok(StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum::ONPERMANENTINSTANCEDELETION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted.
pub enum StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum {
    
    /// "NEVER"
    #[serde(rename="NEVER")]
    NEVER,
    
    /// "ON_PERMANENT_INSTANCE_DELETION"
    #[serde(rename="ON_PERMANENT_INSTANCE_DELETION")]
    ONPERMANENTINSTANCEDELETION,
}

impl AsRef<str> for StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum::NEVER => "NEVER",
            StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum::ONPERMANENTINSTANCEDELETION => "ON_PERMANENT_INSTANCE_DELETION",
        }
    }
}

impl std::convert::TryFrom< &str> for StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NEVER" => Ok(StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum::NEVER),
           "ON_PERMANENT_INSTANCE_DELETION" => Ok(StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum::ONPERMANENTINSTANCEDELETION),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StatefulPolicyPreservedStateNetworkIpAutoDeleteEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolCapacityProvisioningTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Provisioning type of the byte capacity of the pool.
pub enum StoragePoolCapacityProvisioningTypeEnum {
    

    /// Advanced provisioning "thinly" allocates the related resource.
    ///
    /// "ADVANCED"
    #[serde(rename="ADVANCED")]
    ADVANCED,
    

    /// Standard provisioning allocates the related resource for the pool disks' exclusive use.
    ///
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
    
    /// "UNSPECIFIED"
    #[serde(rename="UNSPECIFIED")]
    UNSPECIFIED,
}

impl AsRef<str> for StoragePoolCapacityProvisioningTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolCapacityProvisioningTypeEnum::ADVANCED => "ADVANCED",
            StoragePoolCapacityProvisioningTypeEnum::STANDARD => "STANDARD",
            StoragePoolCapacityProvisioningTypeEnum::UNSPECIFIED => "UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolCapacityProvisioningTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ADVANCED" => Ok(StoragePoolCapacityProvisioningTypeEnum::ADVANCED),
           "STANDARD" => Ok(StoragePoolCapacityProvisioningTypeEnum::STANDARD),
           "UNSPECIFIED" => Ok(StoragePoolCapacityProvisioningTypeEnum::UNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolCapacityProvisioningTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolPerformanceProvisioningTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Provisioning type of the performance-related parameters of the pool, such as throughput and IOPS.
pub enum StoragePoolPerformanceProvisioningTypeEnum {
    

    /// Advanced provisioning "thinly" allocates the related resource.
    ///
    /// "ADVANCED"
    #[serde(rename="ADVANCED")]
    ADVANCED,
    

    /// Standard provisioning allocates the related resource for the pool disks' exclusive use.
    ///
    /// "STANDARD"
    #[serde(rename="STANDARD")]
    STANDARD,
    
    /// "UNSPECIFIED"
    #[serde(rename="UNSPECIFIED")]
    UNSPECIFIED,
}

impl AsRef<str> for StoragePoolPerformanceProvisioningTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolPerformanceProvisioningTypeEnum::ADVANCED => "ADVANCED",
            StoragePoolPerformanceProvisioningTypeEnum::STANDARD => "STANDARD",
            StoragePoolPerformanceProvisioningTypeEnum::UNSPECIFIED => "UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolPerformanceProvisioningTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ADVANCED" => Ok(StoragePoolPerformanceProvisioningTypeEnum::ADVANCED),
           "STANDARD" => Ok(StoragePoolPerformanceProvisioningTypeEnum::STANDARD),
           "UNSPECIFIED" => Ok(StoragePoolPerformanceProvisioningTypeEnum::UNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolPerformanceProvisioningTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of storage pool creation. - CREATING: Storage pool is provisioning. storagePool. - FAILED: Storage pool creation failed. - READY: Storage pool is ready for use. - DELETING: Storage pool is deleting. 
pub enum StoragePoolStateEnum {
    

    /// StoragePool is provisioning
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// StoragePool is deleting.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// StoragePool creation failed.
    ///
    /// "FAILED"
    #[serde(rename="FAILED")]
    FAILED,
    

    /// StoragePool is ready for use.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
}

impl AsRef<str> for StoragePoolStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolStateEnum::CREATING => "CREATING",
            StoragePoolStateEnum::DELETING => "DELETING",
            StoragePoolStateEnum::FAILED => "FAILED",
            StoragePoolStateEnum::READY => "READY",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(StoragePoolStateEnum::CREATING),
           "DELETING" => Ok(StoragePoolStateEnum::DELETING),
           "FAILED" => Ok(StoragePoolStateEnum::FAILED),
           "READY" => Ok(StoragePoolStateEnum::READY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolDiskStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The disk status.
pub enum StoragePoolDiskStatusEnum {
    

    /// Disk is provisioning
    ///
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    

    /// Disk is deleting.
    ///
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    

    /// Disk creation failed.
    ///
    /// "FAILED"
    #[serde(rename="FAILED")]
    FAILED,
    

    /// Disk is ready for use.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
    

    /// Source data is being copied into the disk.
    ///
    /// "RESTORING"
    #[serde(rename="RESTORING")]
    RESTORING,
    

    /// Disk is currently unavailable and cannot be accessed, attached or detached.
    ///
    /// "UNAVAILABLE"
    #[serde(rename="UNAVAILABLE")]
    UNAVAILABLE,
}

impl AsRef<str> for StoragePoolDiskStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolDiskStatusEnum::CREATING => "CREATING",
            StoragePoolDiskStatusEnum::DELETING => "DELETING",
            StoragePoolDiskStatusEnum::FAILED => "FAILED",
            StoragePoolDiskStatusEnum::READY => "READY",
            StoragePoolDiskStatusEnum::RESTORING => "RESTORING",
            StoragePoolDiskStatusEnum::UNAVAILABLE => "UNAVAILABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolDiskStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(StoragePoolDiskStatusEnum::CREATING),
           "DELETING" => Ok(StoragePoolDiskStatusEnum::DELETING),
           "FAILED" => Ok(StoragePoolDiskStatusEnum::FAILED),
           "READY" => Ok(StoragePoolDiskStatusEnum::READY),
           "RESTORING" => Ok(StoragePoolDiskStatusEnum::RESTORING),
           "UNAVAILABLE" => Ok(StoragePoolDiskStatusEnum::UNAVAILABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolDiskStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworkIpv6AccessTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
pub enum SubnetworkIpv6AccessTypeEnum {
    

    /// VMs on this subnet will be assigned IPv6 addresses that are accessible via the Internet, as well as the VPC network.
    ///
    /// "EXTERNAL"
    #[serde(rename="EXTERNAL")]
    EXTERNAL,
    

    /// VMs on this subnet will be assigned IPv6 addresses that are only accessible over the VPC network.
    ///
    /// "INTERNAL"
    #[serde(rename="INTERNAL")]
    INTERNAL,
}

impl AsRef<str> for SubnetworkIpv6AccessTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworkIpv6AccessTypeEnum::EXTERNAL => "EXTERNAL",
            SubnetworkIpv6AccessTypeEnum::INTERNAL => "INTERNAL",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworkIpv6AccessTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EXTERNAL" => Ok(SubnetworkIpv6AccessTypeEnum::EXTERNAL),
           "INTERNAL" => Ok(SubnetworkIpv6AccessTypeEnum::INTERNAL),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworkIpv6AccessTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworkPrivateIpv6GoogleAccessEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// This field is for internal use. This field can be both set at resource creation time and updated using patch.
pub enum SubnetworkPrivateIpv6GoogleAccessEnum {
    

    /// Disable private IPv6 access to/from Google services.
    ///
    /// "DISABLE_GOOGLE_ACCESS"
    #[serde(rename="DISABLE_GOOGLE_ACCESS")]
    DISABLEGOOGLEACCESS,
    

    /// Bidirectional private IPv6 access to/from Google services.
    ///
    /// "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE"
    #[serde(rename="ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE")]
    ENABLEBIDIRECTIONALACCESSTOGOOGLE,
    

    /// Outbound private IPv6 access from VMs in this subnet to Google services.
    ///
    /// "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE"
    #[serde(rename="ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE")]
    ENABLEOUTBOUNDVMACCESSTOGOOGLE,
}

impl AsRef<str> for SubnetworkPrivateIpv6GoogleAccessEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworkPrivateIpv6GoogleAccessEnum::DISABLEGOOGLEACCESS => "DISABLE_GOOGLE_ACCESS",
            SubnetworkPrivateIpv6GoogleAccessEnum::ENABLEBIDIRECTIONALACCESSTOGOOGLE => "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE",
            SubnetworkPrivateIpv6GoogleAccessEnum::ENABLEOUTBOUNDVMACCESSTOGOOGLE => "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworkPrivateIpv6GoogleAccessEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DISABLE_GOOGLE_ACCESS" => Ok(SubnetworkPrivateIpv6GoogleAccessEnum::DISABLEGOOGLEACCESS),
           "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE" => Ok(SubnetworkPrivateIpv6GoogleAccessEnum::ENABLEBIDIRECTIONALACCESSTOGOOGLE),
           "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE" => Ok(SubnetworkPrivateIpv6GoogleAccessEnum::ENABLEOUTBOUNDVMACCESSTOGOOGLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworkPrivateIpv6GoogleAccessEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworkPurposeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The purpose of the resource. This field can be either PRIVATE, GLOBAL_MANAGED_PROXY, REGIONAL_MANAGED_PROXY, PRIVATE_SERVICE_CONNECT, or PRIVATE is the default purpose for user-created subnets or subnets that are automatically created in auto mode networks. Subnets with purpose set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY are user-created subnetworks that are reserved for Envoy-based load balancers. A subnet with purpose set to PRIVATE_SERVICE_CONNECT is used to publish services using Private Service Connect. If unspecified, the subnet purpose defaults to PRIVATE. The enableFlowLogs field isn't supported if the subnet purpose field is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY.
pub enum SubnetworkPurposeEnum {
    

    /// Subnet reserved for Global Envoy-based Load Balancing.
    ///
    /// "GLOBAL_MANAGED_PROXY"
    #[serde(rename="GLOBAL_MANAGED_PROXY")]
    GLOBALMANAGEDPROXY,
    

    /// Subnet reserved for Internal HTTP(S) Load Balancing. This is a legacy purpose, please use REGIONAL_MANAGED_PROXY instead.
    ///
    /// "INTERNAL_HTTPS_LOAD_BALANCER"
    #[serde(rename="INTERNAL_HTTPS_LOAD_BALANCER")]
    INTERNALHTTPSLOADBALANCER,
    

    /// Regular user created or automatically created subnet.
    ///
    /// "PRIVATE"
    #[serde(rename="PRIVATE")]
    PRIVATE,
    

    /// Subnetwork used as source range for Private NAT Gateways.
    ///
    /// "PRIVATE_NAT"
    #[serde(rename="PRIVATE_NAT")]
    PRIVATENAT,
    

    /// Regular user created or automatically created subnet.
    ///
    /// "PRIVATE_RFC_1918"
    #[serde(rename="PRIVATE_RFC_1918")]
    PRIVATERFC1918,
    

    /// Subnetworks created for Private Service Connect in the producer network.
    ///
    /// "PRIVATE_SERVICE_CONNECT"
    #[serde(rename="PRIVATE_SERVICE_CONNECT")]
    PRIVATESERVICECONNECT,
    

    /// Subnetwork used for Regional Envoy-based Load Balancing.
    ///
    /// "REGIONAL_MANAGED_PROXY"
    #[serde(rename="REGIONAL_MANAGED_PROXY")]
    REGIONALMANAGEDPROXY,
}

impl AsRef<str> for SubnetworkPurposeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworkPurposeEnum::GLOBALMANAGEDPROXY => "GLOBAL_MANAGED_PROXY",
            SubnetworkPurposeEnum::INTERNALHTTPSLOADBALANCER => "INTERNAL_HTTPS_LOAD_BALANCER",
            SubnetworkPurposeEnum::PRIVATE => "PRIVATE",
            SubnetworkPurposeEnum::PRIVATENAT => "PRIVATE_NAT",
            SubnetworkPurposeEnum::PRIVATERFC1918 => "PRIVATE_RFC_1918",
            SubnetworkPurposeEnum::PRIVATESERVICECONNECT => "PRIVATE_SERVICE_CONNECT",
            SubnetworkPurposeEnum::REGIONALMANAGEDPROXY => "REGIONAL_MANAGED_PROXY",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworkPurposeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GLOBAL_MANAGED_PROXY" => Ok(SubnetworkPurposeEnum::GLOBALMANAGEDPROXY),
           "INTERNAL_HTTPS_LOAD_BALANCER" => Ok(SubnetworkPurposeEnum::INTERNALHTTPSLOADBALANCER),
           "PRIVATE" => Ok(SubnetworkPurposeEnum::PRIVATE),
           "PRIVATE_NAT" => Ok(SubnetworkPurposeEnum::PRIVATENAT),
           "PRIVATE_RFC_1918" => Ok(SubnetworkPurposeEnum::PRIVATERFC1918),
           "PRIVATE_SERVICE_CONNECT" => Ok(SubnetworkPurposeEnum::PRIVATESERVICECONNECT),
           "REGIONAL_MANAGED_PROXY" => Ok(SubnetworkPurposeEnum::REGIONALMANAGEDPROXY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworkPurposeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworkRoleEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The role of subnetwork. Currently, this field is only used when purpose is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Envoy-based load balancers in a region. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
pub enum SubnetworkRoleEnum {
    

    /// The ACTIVE subnet that is currently used.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// The BACKUP subnet that could be promoted to ACTIVE.
    ///
    /// "BACKUP"
    #[serde(rename="BACKUP")]
    BACKUP,
}

impl AsRef<str> for SubnetworkRoleEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworkRoleEnum::ACTIVE => "ACTIVE",
            SubnetworkRoleEnum::BACKUP => "BACKUP",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworkRoleEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(SubnetworkRoleEnum::ACTIVE),
           "BACKUP" => Ok(SubnetworkRoleEnum::BACKUP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworkRoleEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworkStackTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
pub enum SubnetworkStackTypeEnum {
    

    /// New VMs in this subnet can have both IPv4 and IPv6 addresses.
    ///
    /// "IPV4_IPV6"
    #[serde(rename="IPV4_IPV6")]
    IPV4IPV6,
    

    /// New VMs in this subnet will only be assigned IPv4 addresses.
    ///
    /// "IPV4_ONLY"
    #[serde(rename="IPV4_ONLY")]
    IPV4ONLY,
}

impl AsRef<str> for SubnetworkStackTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworkStackTypeEnum::IPV4IPV6 => "IPV4_IPV6",
            SubnetworkStackTypeEnum::IPV4ONLY => "IPV4_ONLY",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworkStackTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPV4_IPV6" => Ok(SubnetworkStackTypeEnum::IPV4IPV6),
           "IPV4_ONLY" => Ok(SubnetworkStackTypeEnum::IPV4ONLY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworkStackTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworkStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY
pub enum SubnetworkStateEnum {
    

    /// Subnetwork is being drained.
    ///
    /// "DRAINING"
    #[serde(rename="DRAINING")]
    DRAINING,
    

    /// Subnetwork is ready for use.
    ///
    /// "READY"
    #[serde(rename="READY")]
    READY,
}

impl AsRef<str> for SubnetworkStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworkStateEnum::DRAINING => "DRAINING",
            SubnetworkStateEnum::READY => "READY",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworkStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DRAINING" => Ok(SubnetworkStateEnum::DRAINING),
           "READY" => Ok(SubnetworkStateEnum::READY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworkStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworkLogConfigAggregationIntervalEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
pub enum SubnetworkLogConfigAggregationIntervalEnum {
    
    /// "INTERVAL_10_MIN"
    #[serde(rename="INTERVAL_10_MIN")]
    INTERVAL10MIN,
    
    /// "INTERVAL_15_MIN"
    #[serde(rename="INTERVAL_15_MIN")]
    INTERVAL15MIN,
    
    /// "INTERVAL_1_MIN"
    #[serde(rename="INTERVAL_1_MIN")]
    INTERVAL1MIN,
    
    /// "INTERVAL_30_SEC"
    #[serde(rename="INTERVAL_30_SEC")]
    INTERVAL30SEC,
    
    /// "INTERVAL_5_MIN"
    #[serde(rename="INTERVAL_5_MIN")]
    INTERVAL5MIN,
    
    /// "INTERVAL_5_SEC"
    #[serde(rename="INTERVAL_5_SEC")]
    INTERVAL5SEC,
}

impl AsRef<str> for SubnetworkLogConfigAggregationIntervalEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworkLogConfigAggregationIntervalEnum::INTERVAL10MIN => "INTERVAL_10_MIN",
            SubnetworkLogConfigAggregationIntervalEnum::INTERVAL15MIN => "INTERVAL_15_MIN",
            SubnetworkLogConfigAggregationIntervalEnum::INTERVAL1MIN => "INTERVAL_1_MIN",
            SubnetworkLogConfigAggregationIntervalEnum::INTERVAL30SEC => "INTERVAL_30_SEC",
            SubnetworkLogConfigAggregationIntervalEnum::INTERVAL5MIN => "INTERVAL_5_MIN",
            SubnetworkLogConfigAggregationIntervalEnum::INTERVAL5SEC => "INTERVAL_5_SEC",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworkLogConfigAggregationIntervalEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "INTERVAL_10_MIN" => Ok(SubnetworkLogConfigAggregationIntervalEnum::INTERVAL10MIN),
           "INTERVAL_15_MIN" => Ok(SubnetworkLogConfigAggregationIntervalEnum::INTERVAL15MIN),
           "INTERVAL_1_MIN" => Ok(SubnetworkLogConfigAggregationIntervalEnum::INTERVAL1MIN),
           "INTERVAL_30_SEC" => Ok(SubnetworkLogConfigAggregationIntervalEnum::INTERVAL30SEC),
           "INTERVAL_5_MIN" => Ok(SubnetworkLogConfigAggregationIntervalEnum::INTERVAL5MIN),
           "INTERVAL_5_SEC" => Ok(SubnetworkLogConfigAggregationIntervalEnum::INTERVAL5SEC),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworkLogConfigAggregationIntervalEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworkLogConfigMetadataEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
pub enum SubnetworkLogConfigMetadataEnum {
    
    /// "CUSTOM_METADATA"
    #[serde(rename="CUSTOM_METADATA")]
    CUSTOMMETADATA,
    
    /// "EXCLUDE_ALL_METADATA"
    #[serde(rename="EXCLUDE_ALL_METADATA")]
    EXCLUDEALLMETADATA,
    
    /// "INCLUDE_ALL_METADATA"
    #[serde(rename="INCLUDE_ALL_METADATA")]
    INCLUDEALLMETADATA,
}

impl AsRef<str> for SubnetworkLogConfigMetadataEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworkLogConfigMetadataEnum::CUSTOMMETADATA => "CUSTOM_METADATA",
            SubnetworkLogConfigMetadataEnum::EXCLUDEALLMETADATA => "EXCLUDE_ALL_METADATA",
            SubnetworkLogConfigMetadataEnum::INCLUDEALLMETADATA => "INCLUDE_ALL_METADATA",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworkLogConfigMetadataEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CUSTOM_METADATA" => Ok(SubnetworkLogConfigMetadataEnum::CUSTOMMETADATA),
           "EXCLUDE_ALL_METADATA" => Ok(SubnetworkLogConfigMetadataEnum::EXCLUDEALLMETADATA),
           "INCLUDE_ALL_METADATA" => Ok(SubnetworkLogConfigMetadataEnum::INCLUDEALLMETADATA),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworkLogConfigMetadataEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubsettingPolicyEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum SubsettingPolicyEnum {
    

    /// Subsetting based on consistent hashing. For Traffic Director, the number of backends per backend group (the subset size) is based on the `subset_size` parameter. For Internal HTTP(S) load balancing, the number of backends per backend group (the subset size) is dynamically adjusted in two cases: - As the number of proxy instances participating in Internal HTTP(S) load balancing increases, the subset size decreases. - When the total number of backends in a network exceeds the capacity of a single proxy instance, subset sizes are reduced automatically for each service that has backend subsetting enabled.
    ///
    /// "CONSISTENT_HASH_SUBSETTING"
    #[serde(rename="CONSISTENT_HASH_SUBSETTING")]
    CONSISTENTHASHSUBSETTING,
    

    /// No Subsetting. Clients may open connections and send traffic to all backends of this backend service. This can lead to performance issues if there is substantial imbalance in the count of clients and backends.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
}

impl AsRef<str> for SubsettingPolicyEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubsettingPolicyEnum::CONSISTENTHASHSUBSETTING => "CONSISTENT_HASH_SUBSETTING",
            SubsettingPolicyEnum::NONE => "NONE",
        }
    }
}

impl std::convert::TryFrom< &str> for SubsettingPolicyEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CONSISTENT_HASH_SUBSETTING" => Ok(SubsettingPolicyEnum::CONSISTENTHASHSUBSETTING),
           "NONE" => Ok(SubsettingPolicyEnum::NONE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubsettingPolicyEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TCPHealthCheckPortSpecificationEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
pub enum TCPHealthCheckPortSpecificationEnum {
    

    /// The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    ///
    /// "USE_FIXED_PORT"
    #[serde(rename="USE_FIXED_PORT")]
    USEFIXEDPORT,
    

    /// Not supported.
    ///
    /// "USE_NAMED_PORT"
    #[serde(rename="USE_NAMED_PORT")]
    USENAMEDPORT,
    

    /// For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    ///
    /// "USE_SERVING_PORT"
    #[serde(rename="USE_SERVING_PORT")]
    USESERVINGPORT,
}

impl AsRef<str> for TCPHealthCheckPortSpecificationEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TCPHealthCheckPortSpecificationEnum::USEFIXEDPORT => "USE_FIXED_PORT",
            TCPHealthCheckPortSpecificationEnum::USENAMEDPORT => "USE_NAMED_PORT",
            TCPHealthCheckPortSpecificationEnum::USESERVINGPORT => "USE_SERVING_PORT",
        }
    }
}

impl std::convert::TryFrom< &str> for TCPHealthCheckPortSpecificationEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "USE_FIXED_PORT" => Ok(TCPHealthCheckPortSpecificationEnum::USEFIXEDPORT),
           "USE_NAMED_PORT" => Ok(TCPHealthCheckPortSpecificationEnum::USENAMEDPORT),
           "USE_SERVING_PORT" => Ok(TCPHealthCheckPortSpecificationEnum::USESERVINGPORT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TCPHealthCheckPortSpecificationEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TCPHealthCheckProxyHeaderEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
pub enum TCPHealthCheckProxyHeaderEnum {
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    
    /// "PROXY_V1"
    #[serde(rename="PROXY_V1")]
    PROXYV1,
}

impl AsRef<str> for TCPHealthCheckProxyHeaderEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TCPHealthCheckProxyHeaderEnum::NONE => "NONE",
            TCPHealthCheckProxyHeaderEnum::PROXYV1 => "PROXY_V1",
        }
    }
}

impl std::convert::TryFrom< &str> for TCPHealthCheckProxyHeaderEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(TCPHealthCheckProxyHeaderEnum::NONE),
           "PROXY_V1" => Ok(TCPHealthCheckProxyHeaderEnum::PROXYV1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TCPHealthCheckProxyHeaderEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// QUIC policy for the TargetHttpsProxy resource.
pub enum TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum {
    

    /// The load balancer will not attempt to negotiate QUIC with clients.
    ///
    /// "DISABLE"
    #[serde(rename="DISABLE")]
    DISABLE,
    

    /// The load balancer will attempt to negotiate QUIC with clients.
    ///
    /// "ENABLE"
    #[serde(rename="ENABLE")]
    ENABLE,
    

    /// No overrides to the default QUIC policy. This option is implicit if no QUIC override has been specified in the request.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
}

impl AsRef<str> for TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum::DISABLE => "DISABLE",
            TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum::ENABLE => "ENABLE",
            TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum::NONE => "NONE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DISABLE" => Ok(TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum::DISABLE),
           "ENABLE" => Ok(TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum::ENABLE),
           "NONE" => Ok(TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum::NONE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetHttpsProxyQuicOverrideEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE. - When quic-override is set to NONE, Google manages whether QUIC is used. - When quic-override is set to ENABLE, the load balancer uses QUIC when possible. - When quic-override is set to DISABLE, the load balancer doesn't use QUIC. - If the quic-override flag is not specified, NONE is implied. 
pub enum TargetHttpsProxyQuicOverrideEnum {
    

    /// The load balancer will not attempt to negotiate QUIC with clients.
    ///
    /// "DISABLE"
    #[serde(rename="DISABLE")]
    DISABLE,
    

    /// The load balancer will attempt to negotiate QUIC with clients.
    ///
    /// "ENABLE"
    #[serde(rename="ENABLE")]
    ENABLE,
    

    /// No overrides to the default QUIC policy. This option is implicit if no QUIC override has been specified in the request.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
}

impl AsRef<str> for TargetHttpsProxyQuicOverrideEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetHttpsProxyQuicOverrideEnum::DISABLE => "DISABLE",
            TargetHttpsProxyQuicOverrideEnum::ENABLE => "ENABLE",
            TargetHttpsProxyQuicOverrideEnum::NONE => "NONE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetHttpsProxyQuicOverrideEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DISABLE" => Ok(TargetHttpsProxyQuicOverrideEnum::DISABLE),
           "ENABLE" => Ok(TargetHttpsProxyQuicOverrideEnum::ENABLE),
           "NONE" => Ok(TargetHttpsProxyQuicOverrideEnum::NONE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetHttpsProxyQuicOverrideEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetInstanceNatPolicyEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Must have a value of NO_NAT. Protocol forwarding delivers packets while preserving the destination IP address of the forwarding rule referencing the target instance.
pub enum TargetInstanceNatPolicyEnum {
    

    /// No NAT performed.
    ///
    /// "NO_NAT"
    #[serde(rename="NO_NAT")]
    NONAT,
}

impl AsRef<str> for TargetInstanceNatPolicyEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetInstanceNatPolicyEnum::NONAT => "NO_NAT",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetInstanceNatPolicyEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NO_NAT" => Ok(TargetInstanceNatPolicyEnum::NONAT),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetInstanceNatPolicyEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetPoolSessionAffinityEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Session affinity option, must be one of the following values: NONE: Connections from the same client IP may go to any instance in the pool. CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy. CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy.
pub enum TargetPoolSessionAffinityEnum {
    

    /// 2-tuple hash on packet's source and destination IP addresses. Connections from the same source IP address to the same destination IP address will be served by the same backend VM while that VM remains healthy.
    ///
    /// "CLIENT_IP"
    #[serde(rename="CLIENT_IP")]
    CLIENTIP,
    

    /// 1-tuple hash only on packet's source IP address. Connections from the same source IP address will be served by the same backend VM while that VM remains healthy. This option can only be used for Internal TCP/UDP Load Balancing.
    ///
    /// "CLIENT_IP_NO_DESTINATION"
    #[serde(rename="CLIENT_IP_NO_DESTINATION")]
    CLIENTIPNODESTINATION,
    

    /// 5-tuple hash on packet's source and destination IP addresses, IP protocol, and source and destination ports. Connections for the same IP protocol from the same source IP address and port to the same destination IP address and port will be served by the same backend VM while that VM remains healthy. This option cannot be used for HTTP(S) load balancing.
    ///
    /// "CLIENT_IP_PORT_PROTO"
    #[serde(rename="CLIENT_IP_PORT_PROTO")]
    CLIENTIPPORTPROTO,
    

    /// 3-tuple hash on packet's source and destination IP addresses, and IP protocol. Connections for the same IP protocol from the same source IP address to the same destination IP address will be served by the same backend VM while that VM remains healthy. This option cannot be used for HTTP(S) load balancing.
    ///
    /// "CLIENT_IP_PROTO"
    #[serde(rename="CLIENT_IP_PROTO")]
    CLIENTIPPROTO,
    

    /// Hash based on a cookie generated by the L7 loadbalancer. Only valid for HTTP(S) load balancing.
    ///
    /// "GENERATED_COOKIE"
    #[serde(rename="GENERATED_COOKIE")]
    GENERATEDCOOKIE,
    

    /// The hash is based on a user specified header field.
    ///
    /// "HEADER_FIELD"
    #[serde(rename="HEADER_FIELD")]
    HEADERFIELD,
    

    /// The hash is based on a user provided cookie.
    ///
    /// "HTTP_COOKIE"
    #[serde(rename="HTTP_COOKIE")]
    HTTPCOOKIE,
    

    /// No session affinity. Connections from the same client IP may go to any instance in the pool.
    ///
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
}

impl AsRef<str> for TargetPoolSessionAffinityEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetPoolSessionAffinityEnum::CLIENTIP => "CLIENT_IP",
            TargetPoolSessionAffinityEnum::CLIENTIPNODESTINATION => "CLIENT_IP_NO_DESTINATION",
            TargetPoolSessionAffinityEnum::CLIENTIPPORTPROTO => "CLIENT_IP_PORT_PROTO",
            TargetPoolSessionAffinityEnum::CLIENTIPPROTO => "CLIENT_IP_PROTO",
            TargetPoolSessionAffinityEnum::GENERATEDCOOKIE => "GENERATED_COOKIE",
            TargetPoolSessionAffinityEnum::HEADERFIELD => "HEADER_FIELD",
            TargetPoolSessionAffinityEnum::HTTPCOOKIE => "HTTP_COOKIE",
            TargetPoolSessionAffinityEnum::NONE => "NONE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetPoolSessionAffinityEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLIENT_IP" => Ok(TargetPoolSessionAffinityEnum::CLIENTIP),
           "CLIENT_IP_NO_DESTINATION" => Ok(TargetPoolSessionAffinityEnum::CLIENTIPNODESTINATION),
           "CLIENT_IP_PORT_PROTO" => Ok(TargetPoolSessionAffinityEnum::CLIENTIPPORTPROTO),
           "CLIENT_IP_PROTO" => Ok(TargetPoolSessionAffinityEnum::CLIENTIPPROTO),
           "GENERATED_COOKIE" => Ok(TargetPoolSessionAffinityEnum::GENERATEDCOOKIE),
           "HEADER_FIELD" => Ok(TargetPoolSessionAffinityEnum::HEADERFIELD),
           "HTTP_COOKIE" => Ok(TargetPoolSessionAffinityEnum::HTTPCOOKIE),
           "NONE" => Ok(TargetPoolSessionAffinityEnum::NONE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetPoolSessionAffinityEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed.
pub enum TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum {
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    
    /// "PROXY_V1"
    #[serde(rename="PROXY_V1")]
    PROXYV1,
}

impl AsRef<str> for TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum::NONE => "NONE",
            TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum::PROXYV1 => "PROXY_V1",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum::NONE),
           "PROXY_V1" => Ok(TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum::PROXYV1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetSslProxyProxyHeaderEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
pub enum TargetSslProxyProxyHeaderEnum {
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    
    /// "PROXY_V1"
    #[serde(rename="PROXY_V1")]
    PROXYV1,
}

impl AsRef<str> for TargetSslProxyProxyHeaderEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetSslProxyProxyHeaderEnum::NONE => "NONE",
            TargetSslProxyProxyHeaderEnum::PROXYV1 => "PROXY_V1",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetSslProxyProxyHeaderEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(TargetSslProxyProxyHeaderEnum::NONE),
           "PROXY_V1" => Ok(TargetSslProxyProxyHeaderEnum::PROXYV1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetSslProxyProxyHeaderEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed.
pub enum TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum {
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    
    /// "PROXY_V1"
    #[serde(rename="PROXY_V1")]
    PROXYV1,
}

impl AsRef<str> for TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum::NONE => "NONE",
            TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum::PROXYV1 => "PROXY_V1",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum::NONE),
           "PROXY_V1" => Ok(TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum::PROXYV1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetTcpProxyProxyHeaderEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
pub enum TargetTcpProxyProxyHeaderEnum {
    
    /// "NONE"
    #[serde(rename="NONE")]
    NONE,
    
    /// "PROXY_V1"
    #[serde(rename="PROXY_V1")]
    PROXYV1,
}

impl AsRef<str> for TargetTcpProxyProxyHeaderEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetTcpProxyProxyHeaderEnum::NONE => "NONE",
            TargetTcpProxyProxyHeaderEnum::PROXYV1 => "PROXY_V1",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetTcpProxyProxyHeaderEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "NONE" => Ok(TargetTcpProxyProxyHeaderEnum::NONE),
           "PROXY_V1" => Ok(TargetTcpProxyProxyHeaderEnum::PROXYV1),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetTcpProxyProxyHeaderEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetVpnGatewayStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING.
pub enum TargetVpnGatewayStatusEnum {
    
    /// "CREATING"
    #[serde(rename="CREATING")]
    CREATING,
    
    /// "DELETING"
    #[serde(rename="DELETING")]
    DELETING,
    
    /// "FAILED"
    #[serde(rename="FAILED")]
    FAILED,
    
    /// "READY"
    #[serde(rename="READY")]
    READY,
}

impl AsRef<str> for TargetVpnGatewayStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetVpnGatewayStatusEnum::CREATING => "CREATING",
            TargetVpnGatewayStatusEnum::DELETING => "DELETING",
            TargetVpnGatewayStatusEnum::FAILED => "FAILED",
            TargetVpnGatewayStatusEnum::READY => "READY",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetVpnGatewayStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CREATING" => Ok(TargetVpnGatewayStatusEnum::CREATING),
           "DELETING" => Ok(TargetVpnGatewayStatusEnum::DELETING),
           "FAILED" => Ok(TargetVpnGatewayStatusEnum::FAILED),
           "READY" => Ok(TargetVpnGatewayStatusEnum::READY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetVpnGatewayStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UpcomingMaintenanceMaintenanceStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
pub enum UpcomingMaintenanceMaintenanceStatusEnum {
    

    /// There is ongoing maintenance on this VM.
    ///
    /// "ONGOING"
    #[serde(rename="ONGOING")]
    ONGOING,
    

    /// There is pending maintenance.
    ///
    /// "PENDING"
    #[serde(rename="PENDING")]
    PENDING,
    

    /// Unknown maintenance status. Do not use this value.
    ///
    /// "UNKNOWN"
    #[serde(rename="UNKNOWN")]
    UNKNOWN,
}

impl AsRef<str> for UpcomingMaintenanceMaintenanceStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UpcomingMaintenanceMaintenanceStatusEnum::ONGOING => "ONGOING",
            UpcomingMaintenanceMaintenanceStatusEnum::PENDING => "PENDING",
            UpcomingMaintenanceMaintenanceStatusEnum::UNKNOWN => "UNKNOWN",
        }
    }
}

impl std::convert::TryFrom< &str> for UpcomingMaintenanceMaintenanceStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ONGOING" => Ok(UpcomingMaintenanceMaintenanceStatusEnum::ONGOING),
           "PENDING" => Ok(UpcomingMaintenanceMaintenanceStatusEnum::PENDING),
           "UNKNOWN" => Ok(UpcomingMaintenanceMaintenanceStatusEnum::UNKNOWN),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UpcomingMaintenanceMaintenanceStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UpcomingMaintenanceTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Defines the type of maintenance.
pub enum UpcomingMaintenanceTypeEnum {
    

    /// Scheduled maintenance (e.g. maintenance after uptime guarantee is complete).
    ///
    /// "SCHEDULED"
    #[serde(rename="SCHEDULED")]
    SCHEDULED,
    

    /// No type specified. Do not use this value.
    ///
    /// "UNKNOWN_TYPE"
    #[serde(rename="UNKNOWN_TYPE")]
    UNKNOWNTYPE,
    

    /// Unscheduled maintenance (e.g. emergency maintenance during uptime guarantee).
    ///
    /// "UNSCHEDULED"
    #[serde(rename="UNSCHEDULED")]
    UNSCHEDULED,
}

impl AsRef<str> for UpcomingMaintenanceTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UpcomingMaintenanceTypeEnum::SCHEDULED => "SCHEDULED",
            UpcomingMaintenanceTypeEnum::UNKNOWNTYPE => "UNKNOWN_TYPE",
            UpcomingMaintenanceTypeEnum::UNSCHEDULED => "UNSCHEDULED",
        }
    }
}

impl std::convert::TryFrom< &str> for UpcomingMaintenanceTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "SCHEDULED" => Ok(UpcomingMaintenanceTypeEnum::SCHEDULED),
           "UNKNOWN_TYPE" => Ok(UpcomingMaintenanceTypeEnum::UNKNOWNTYPE),
           "UNSCHEDULED" => Ok(UpcomingMaintenanceTypeEnum::UNSCHEDULED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UpcomingMaintenanceTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UrlMapsValidateRequestLoadBalancingSchemesEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the load balancer type(s) this validation request is for. Use EXTERNAL_MANAGED for global external Application Load Balancers and regional external Application Load Balancers. Use EXTERNAL for classic Application Load Balancers. Use INTERNAL_MANAGED for internal Application Load Balancers. For more information, refer to Choosing a load balancer. If unspecified, the load balancing scheme will be inferred from the backend service resources this URL map references. If that can not be inferred (for example, this URL map only references backend buckets, or this Url map is for rewrites and redirects only and doesn't reference any backends), EXTERNAL will be used as the default type. If specified, the scheme(s) must not conflict with the load balancing scheme of the backend service resources this Url map references.
pub enum UrlMapsValidateRequestLoadBalancingSchemesEnum {
    

    /// Signifies that this will be used for classic Application Load Balancers.
    ///
    /// "EXTERNAL"
    #[serde(rename="EXTERNAL")]
    EXTERNAL,
    

    /// Signifies that this will be used for Envoy-based global external Application Load Balancers.
    ///
    /// "EXTERNAL_MANAGED"
    #[serde(rename="EXTERNAL_MANAGED")]
    EXTERNALMANAGED,
    

    /// If unspecified, the validation will try to infer the scheme from the backend service resources this Url map references. If the inference is not possible, EXTERNAL will be used as the default type.
    ///
    /// "LOAD_BALANCING_SCHEME_UNSPECIFIED"
    #[serde(rename="LOAD_BALANCING_SCHEME_UNSPECIFIED")]
    LOADBALANCINGSCHEMEUNSPECIFIED,
}

impl AsRef<str> for UrlMapsValidateRequestLoadBalancingSchemesEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UrlMapsValidateRequestLoadBalancingSchemesEnum::EXTERNAL => "EXTERNAL",
            UrlMapsValidateRequestLoadBalancingSchemesEnum::EXTERNALMANAGED => "EXTERNAL_MANAGED",
            UrlMapsValidateRequestLoadBalancingSchemesEnum::LOADBALANCINGSCHEMEUNSPECIFIED => "LOAD_BALANCING_SCHEME_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for UrlMapsValidateRequestLoadBalancingSchemesEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EXTERNAL" => Ok(UrlMapsValidateRequestLoadBalancingSchemesEnum::EXTERNAL),
           "EXTERNAL_MANAGED" => Ok(UrlMapsValidateRequestLoadBalancingSchemesEnum::EXTERNALMANAGED),
           "LOAD_BALANCING_SCHEME_UNSPECIFIED" => Ok(UrlMapsValidateRequestLoadBalancingSchemesEnum::LOADBALANCINGSCHEMEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UrlMapsValidateRequestLoadBalancingSchemesEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UsableSubnetworkIpv6AccessTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
pub enum UsableSubnetworkIpv6AccessTypeEnum {
    

    /// VMs on this subnet will be assigned IPv6 addresses that are accessible via the Internet, as well as the VPC network.
    ///
    /// "EXTERNAL"
    #[serde(rename="EXTERNAL")]
    EXTERNAL,
    

    /// VMs on this subnet will be assigned IPv6 addresses that are only accessible over the VPC network.
    ///
    /// "INTERNAL"
    #[serde(rename="INTERNAL")]
    INTERNAL,
}

impl AsRef<str> for UsableSubnetworkIpv6AccessTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UsableSubnetworkIpv6AccessTypeEnum::EXTERNAL => "EXTERNAL",
            UsableSubnetworkIpv6AccessTypeEnum::INTERNAL => "INTERNAL",
        }
    }
}

impl std::convert::TryFrom< &str> for UsableSubnetworkIpv6AccessTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "EXTERNAL" => Ok(UsableSubnetworkIpv6AccessTypeEnum::EXTERNAL),
           "INTERNAL" => Ok(UsableSubnetworkIpv6AccessTypeEnum::INTERNAL),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UsableSubnetworkIpv6AccessTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UsableSubnetworkPurposeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The purpose of the resource. This field can be either PRIVATE, GLOBAL_MANAGED_PROXY, REGIONAL_MANAGED_PROXY, PRIVATE_SERVICE_CONNECT, or PRIVATE is the default purpose for user-created subnets or subnets that are automatically created in auto mode networks. Subnets with purpose set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY are user-created subnetworks that are reserved for Envoy-based load balancers. A subnet with purpose set to PRIVATE_SERVICE_CONNECT is used to publish services using Private Service Connect. If unspecified, the subnet purpose defaults to PRIVATE. The enableFlowLogs field isn't supported if the subnet purpose field is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY.
pub enum UsableSubnetworkPurposeEnum {
    

    /// Subnet reserved for Global Envoy-based Load Balancing.
    ///
    /// "GLOBAL_MANAGED_PROXY"
    #[serde(rename="GLOBAL_MANAGED_PROXY")]
    GLOBALMANAGEDPROXY,
    

    /// Subnet reserved for Internal HTTP(S) Load Balancing. This is a legacy purpose, please use REGIONAL_MANAGED_PROXY instead.
    ///
    /// "INTERNAL_HTTPS_LOAD_BALANCER"
    #[serde(rename="INTERNAL_HTTPS_LOAD_BALANCER")]
    INTERNALHTTPSLOADBALANCER,
    

    /// Regular user created or automatically created subnet.
    ///
    /// "PRIVATE"
    #[serde(rename="PRIVATE")]
    PRIVATE,
    

    /// Subnetwork used as source range for Private NAT Gateways.
    ///
    /// "PRIVATE_NAT"
    #[serde(rename="PRIVATE_NAT")]
    PRIVATENAT,
    

    /// Regular user created or automatically created subnet.
    ///
    /// "PRIVATE_RFC_1918"
    #[serde(rename="PRIVATE_RFC_1918")]
    PRIVATERFC1918,
    

    /// Subnetworks created for Private Service Connect in the producer network.
    ///
    /// "PRIVATE_SERVICE_CONNECT"
    #[serde(rename="PRIVATE_SERVICE_CONNECT")]
    PRIVATESERVICECONNECT,
    

    /// Subnetwork used for Regional Envoy-based Load Balancing.
    ///
    /// "REGIONAL_MANAGED_PROXY"
    #[serde(rename="REGIONAL_MANAGED_PROXY")]
    REGIONALMANAGEDPROXY,
}

impl AsRef<str> for UsableSubnetworkPurposeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UsableSubnetworkPurposeEnum::GLOBALMANAGEDPROXY => "GLOBAL_MANAGED_PROXY",
            UsableSubnetworkPurposeEnum::INTERNALHTTPSLOADBALANCER => "INTERNAL_HTTPS_LOAD_BALANCER",
            UsableSubnetworkPurposeEnum::PRIVATE => "PRIVATE",
            UsableSubnetworkPurposeEnum::PRIVATENAT => "PRIVATE_NAT",
            UsableSubnetworkPurposeEnum::PRIVATERFC1918 => "PRIVATE_RFC_1918",
            UsableSubnetworkPurposeEnum::PRIVATESERVICECONNECT => "PRIVATE_SERVICE_CONNECT",
            UsableSubnetworkPurposeEnum::REGIONALMANAGEDPROXY => "REGIONAL_MANAGED_PROXY",
        }
    }
}

impl std::convert::TryFrom< &str> for UsableSubnetworkPurposeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "GLOBAL_MANAGED_PROXY" => Ok(UsableSubnetworkPurposeEnum::GLOBALMANAGEDPROXY),
           "INTERNAL_HTTPS_LOAD_BALANCER" => Ok(UsableSubnetworkPurposeEnum::INTERNALHTTPSLOADBALANCER),
           "PRIVATE" => Ok(UsableSubnetworkPurposeEnum::PRIVATE),
           "PRIVATE_NAT" => Ok(UsableSubnetworkPurposeEnum::PRIVATENAT),
           "PRIVATE_RFC_1918" => Ok(UsableSubnetworkPurposeEnum::PRIVATERFC1918),
           "PRIVATE_SERVICE_CONNECT" => Ok(UsableSubnetworkPurposeEnum::PRIVATESERVICECONNECT),
           "REGIONAL_MANAGED_PROXY" => Ok(UsableSubnetworkPurposeEnum::REGIONALMANAGEDPROXY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UsableSubnetworkPurposeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UsableSubnetworkRoleEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The role of subnetwork. Currently, this field is only used when purpose is set to GLOBAL_MANAGED_PROXY or REGIONAL_MANAGED_PROXY. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Envoy-based load balancers in a region. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
pub enum UsableSubnetworkRoleEnum {
    

    /// The ACTIVE subnet that is currently used.
    ///
    /// "ACTIVE"
    #[serde(rename="ACTIVE")]
    ACTIVE,
    

    /// The BACKUP subnet that could be promoted to ACTIVE.
    ///
    /// "BACKUP"
    #[serde(rename="BACKUP")]
    BACKUP,
}

impl AsRef<str> for UsableSubnetworkRoleEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UsableSubnetworkRoleEnum::ACTIVE => "ACTIVE",
            UsableSubnetworkRoleEnum::BACKUP => "BACKUP",
        }
    }
}

impl std::convert::TryFrom< &str> for UsableSubnetworkRoleEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ACTIVE" => Ok(UsableSubnetworkRoleEnum::ACTIVE),
           "BACKUP" => Ok(UsableSubnetworkRoleEnum::BACKUP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UsableSubnetworkRoleEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UsableSubnetworkStackTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
pub enum UsableSubnetworkStackTypeEnum {
    

    /// New VMs in this subnet can have both IPv4 and IPv6 addresses.
    ///
    /// "IPV4_IPV6"
    #[serde(rename="IPV4_IPV6")]
    IPV4IPV6,
    

    /// New VMs in this subnet will only be assigned IPv4 addresses.
    ///
    /// "IPV4_ONLY"
    #[serde(rename="IPV4_ONLY")]
    IPV4ONLY,
}

impl AsRef<str> for UsableSubnetworkStackTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UsableSubnetworkStackTypeEnum::IPV4IPV6 => "IPV4_IPV6",
            UsableSubnetworkStackTypeEnum::IPV4ONLY => "IPV4_ONLY",
        }
    }
}

impl std::convert::TryFrom< &str> for UsableSubnetworkStackTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPV4_IPV6" => Ok(UsableSubnetworkStackTypeEnum::IPV4IPV6),
           "IPV4_ONLY" => Ok(UsableSubnetworkStackTypeEnum::IPV4ONLY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UsableSubnetworkStackTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnGatewayGatewayIpVersionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The IP family of the gateway IPs for the HA-VPN gateway interfaces. If not specified, IPV4 will be used.
pub enum VpnGatewayGatewayIpVersionEnum {
    

    /// Every HA-VPN gateway interface is configured with an IPv4 address.
    ///
    /// "IPV4"
    #[serde(rename="IPV4")]
    IPV4,
    

    /// Every HA-VPN gateway interface is configured with an IPv6 address.
    ///
    /// "IPV6"
    #[serde(rename="IPV6")]
    IPV6,
}

impl AsRef<str> for VpnGatewayGatewayIpVersionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnGatewayGatewayIpVersionEnum::IPV4 => "IPV4",
            VpnGatewayGatewayIpVersionEnum::IPV6 => "IPV6",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnGatewayGatewayIpVersionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPV4" => Ok(VpnGatewayGatewayIpVersionEnum::IPV4),
           "IPV6" => Ok(VpnGatewayGatewayIpVersionEnum::IPV6),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnGatewayGatewayIpVersionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnGatewayStackTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The stack type for this VPN gateway to identify the IP protocols that are enabled. Possible values are: IPV4_ONLY, IPV4_IPV6. If not specified, IPV4_ONLY will be used.
pub enum VpnGatewayStackTypeEnum {
    

    /// Enable VPN gateway with both IPv4 and IPv6 protocols.
    ///
    /// "IPV4_IPV6"
    #[serde(rename="IPV4_IPV6")]
    IPV4IPV6,
    

    /// Enable VPN gateway with only IPv4 protocol.
    ///
    /// "IPV4_ONLY"
    #[serde(rename="IPV4_ONLY")]
    IPV4ONLY,
}

impl AsRef<str> for VpnGatewayStackTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnGatewayStackTypeEnum::IPV4IPV6 => "IPV4_IPV6",
            VpnGatewayStackTypeEnum::IPV4ONLY => "IPV4_ONLY",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnGatewayStackTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "IPV4_IPV6" => Ok(VpnGatewayStackTypeEnum::IPV4IPV6),
           "IPV4_ONLY" => Ok(VpnGatewayStackTypeEnum::IPV4ONLY),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnGatewayStackTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnGatewayStatusHighAvailabilityRequirementStateStateEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Indicates the high availability requirement state for the VPN connection. Valid values are CONNECTION_REDUNDANCY_MET, CONNECTION_REDUNDANCY_NOT_MET.
pub enum VpnGatewayStatusHighAvailabilityRequirementStateStateEnum {
    

    /// VPN tunnels are configured with adequate redundancy from Cloud VPN gateway to the peer VPN gateway. For both GCP-to-non-GCP and GCP-to-GCP connections, the adequate redundancy is a pre-requirement for users to get 99.99% availability on GCP side; please note that for any connection, end-to-end 99.99% availability is subject to proper configuration on the peer VPN gateway.
    ///
    /// "CONNECTION_REDUNDANCY_MET"
    #[serde(rename="CONNECTION_REDUNDANCY_MET")]
    CONNECTIONREDUNDANCYMET,
    

    /// VPN tunnels are not configured with adequate redundancy from the Cloud VPN gateway to the peer gateway
    ///
    /// "CONNECTION_REDUNDANCY_NOT_MET"
    #[serde(rename="CONNECTION_REDUNDANCY_NOT_MET")]
    CONNECTIONREDUNDANCYNOTMET,
}

impl AsRef<str> for VpnGatewayStatusHighAvailabilityRequirementStateStateEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnGatewayStatusHighAvailabilityRequirementStateStateEnum::CONNECTIONREDUNDANCYMET => "CONNECTION_REDUNDANCY_MET",
            VpnGatewayStatusHighAvailabilityRequirementStateStateEnum::CONNECTIONREDUNDANCYNOTMET => "CONNECTION_REDUNDANCY_NOT_MET",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnGatewayStatusHighAvailabilityRequirementStateStateEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CONNECTION_REDUNDANCY_MET" => Ok(VpnGatewayStatusHighAvailabilityRequirementStateStateEnum::CONNECTIONREDUNDANCYMET),
           "CONNECTION_REDUNDANCY_NOT_MET" => Ok(VpnGatewayStatusHighAvailabilityRequirementStateStateEnum::CONNECTIONREDUNDANCYNOTMET),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnGatewayStatusHighAvailabilityRequirementStateStateEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReasonEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Indicates the reason why the VPN connection does not meet the high availability redundancy criteria/requirement. Valid values is INCOMPLETE_TUNNELS_COVERAGE.
pub enum VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReasonEnum {
    
    /// "INCOMPLETE_TUNNELS_COVERAGE"
    #[serde(rename="INCOMPLETE_TUNNELS_COVERAGE")]
    INCOMPLETETUNNELSCOVERAGE,
}

impl AsRef<str> for VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReasonEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReasonEnum::INCOMPLETETUNNELSCOVERAGE => "INCOMPLETE_TUNNELS_COVERAGE",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReasonEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "INCOMPLETE_TUNNELS_COVERAGE" => Ok(VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReasonEnum::INCOMPLETETUNNELSCOVERAGE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReasonEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnTunnelStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] The status of the VPN tunnel, which can be one of the following: - PROVISIONING: Resource is being allocated for the VPN tunnel. - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. - FIRST_HANDSHAKE: Successful first handshake with the peer VPN. - ESTABLISHED: Secure session is successfully established with the peer VPN. - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret). - NEGOTIATION_FAILURE: Handshake failed. - DEPROVISIONING: Resources are being deallocated for the VPN tunnel. - FAILED: Tunnel creation has failed and the tunnel is not ready to be used. - NO_INCOMING_PACKETS: No incoming packets from peer. - REJECTED: Tunnel configuration was rejected, can be result of being denied access. - ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources. - STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. - PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT. - TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel. 
pub enum VpnTunnelStatusEnum {
    

    /// Cloud VPN is in the process of allocating all required resources (specifically, a borg task).
    ///
    /// "ALLOCATING_RESOURCES"
    #[serde(rename="ALLOCATING_RESOURCES")]
    ALLOCATINGRESOURCES,
    

    /// Auth error (e.g. bad shared secret).
    ///
    /// "AUTHORIZATION_ERROR"
    #[serde(rename="AUTHORIZATION_ERROR")]
    AUTHORIZATIONERROR,
    

    /// Resources is being deallocated for the VPN tunnel.
    ///
    /// "DEPROVISIONING"
    #[serde(rename="DEPROVISIONING")]
    DEPROVISIONING,
    

    /// Secure session is successfully established with peer VPN.
    ///
    /// "ESTABLISHED"
    #[serde(rename="ESTABLISHED")]
    ESTABLISHED,
    

    /// Tunnel creation has failed and the tunnel is not ready to be used.
    ///
    /// "FAILED"
    #[serde(rename="FAILED")]
    FAILED,
    

    /// Successful first handshake with peer VPN.
    ///
    /// "FIRST_HANDSHAKE"
    #[serde(rename="FIRST_HANDSHAKE")]
    FIRSTHANDSHAKE,
    

    /// Handshake failed.
    ///
    /// "NEGOTIATION_FAILURE"
    #[serde(rename="NEGOTIATION_FAILURE")]
    NEGOTIATIONFAILURE,
    

    /// Deprecated, replaced by NO_INCOMING_PACKETS
    ///
    /// "NETWORK_ERROR"
    #[serde(rename="NETWORK_ERROR")]
    NETWORKERROR,
    

    /// No incoming packets from peer
    ///
    /// "NO_INCOMING_PACKETS"
    #[serde(rename="NO_INCOMING_PACKETS")]
    NOINCOMINGPACKETS,
    

    /// Resource is being allocated for the VPN tunnel.
    ///
    /// "PROVISIONING"
    #[serde(rename="PROVISIONING")]
    PROVISIONING,
    

    /// Tunnel configuration was rejected, can be result of being denylisted.
    ///
    /// "REJECTED"
    #[serde(rename="REJECTED")]
    REJECTED,
    

    /// Tunnel is stopped due to its Forwarding Rules being deleted.
    ///
    /// "STOPPED"
    #[serde(rename="STOPPED")]
    STOPPED,
    

    /// Waiting to receive all VPN-related configs from user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule and Route resources are needed to setup VPN tunnel.
    ///
    /// "WAITING_FOR_FULL_CONFIG"
    #[serde(rename="WAITING_FOR_FULL_CONFIG")]
    WAITINGFORFULLCONFIG,
}

impl AsRef<str> for VpnTunnelStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnTunnelStatusEnum::ALLOCATINGRESOURCES => "ALLOCATING_RESOURCES",
            VpnTunnelStatusEnum::AUTHORIZATIONERROR => "AUTHORIZATION_ERROR",
            VpnTunnelStatusEnum::DEPROVISIONING => "DEPROVISIONING",
            VpnTunnelStatusEnum::ESTABLISHED => "ESTABLISHED",
            VpnTunnelStatusEnum::FAILED => "FAILED",
            VpnTunnelStatusEnum::FIRSTHANDSHAKE => "FIRST_HANDSHAKE",
            VpnTunnelStatusEnum::NEGOTIATIONFAILURE => "NEGOTIATION_FAILURE",
            VpnTunnelStatusEnum::NETWORKERROR => "NETWORK_ERROR",
            VpnTunnelStatusEnum::NOINCOMINGPACKETS => "NO_INCOMING_PACKETS",
            VpnTunnelStatusEnum::PROVISIONING => "PROVISIONING",
            VpnTunnelStatusEnum::REJECTED => "REJECTED",
            VpnTunnelStatusEnum::STOPPED => "STOPPED",
            VpnTunnelStatusEnum::WAITINGFORFULLCONFIG => "WAITING_FOR_FULL_CONFIG",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnTunnelStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "ALLOCATING_RESOURCES" => Ok(VpnTunnelStatusEnum::ALLOCATINGRESOURCES),
           "AUTHORIZATION_ERROR" => Ok(VpnTunnelStatusEnum::AUTHORIZATIONERROR),
           "DEPROVISIONING" => Ok(VpnTunnelStatusEnum::DEPROVISIONING),
           "ESTABLISHED" => Ok(VpnTunnelStatusEnum::ESTABLISHED),
           "FAILED" => Ok(VpnTunnelStatusEnum::FAILED),
           "FIRST_HANDSHAKE" => Ok(VpnTunnelStatusEnum::FIRSTHANDSHAKE),
           "NEGOTIATION_FAILURE" => Ok(VpnTunnelStatusEnum::NEGOTIATIONFAILURE),
           "NETWORK_ERROR" => Ok(VpnTunnelStatusEnum::NETWORKERROR),
           "NO_INCOMING_PACKETS" => Ok(VpnTunnelStatusEnum::NOINCOMINGPACKETS),
           "PROVISIONING" => Ok(VpnTunnelStatusEnum::PROVISIONING),
           "REJECTED" => Ok(VpnTunnelStatusEnum::REJECTED),
           "STOPPED" => Ok(VpnTunnelStatusEnum::STOPPED),
           "WAITING_FOR_FULL_CONFIG" => Ok(VpnTunnelStatusEnum::WAITINGFORFULLCONFIG),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnTunnelStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region XpnResourceIdTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The type of the service resource.
pub enum XpnResourceIdTypeEnum {
    
    /// "PROJECT"
    #[serde(rename="PROJECT")]
    PROJECT,
    
    /// "XPN_RESOURCE_TYPE_UNSPECIFIED"
    #[serde(rename="XPN_RESOURCE_TYPE_UNSPECIFIED")]
    XPNRESOURCETYPEUNSPECIFIED,
}

impl AsRef<str> for XpnResourceIdTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            XpnResourceIdTypeEnum::PROJECT => "PROJECT",
            XpnResourceIdTypeEnum::XPNRESOURCETYPEUNSPECIFIED => "XPN_RESOURCE_TYPE_UNSPECIFIED",
        }
    }
}

impl std::convert::TryFrom< &str> for XpnResourceIdTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "PROJECT" => Ok(XpnResourceIdTypeEnum::PROJECT),
           "XPN_RESOURCE_TYPE_UNSPECIFIED" => Ok(XpnResourceIdTypeEnum::XPNRESOURCETYPEUNSPECIFIED),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a XpnResourceIdTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ZoneStatusEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] Status of the zone, either UP or DOWN.
pub enum ZoneStatusEnum {
    
    /// "DOWN"
    #[serde(rename="DOWN")]
    DOWN,
    
    /// "UP"
    #[serde(rename="UP")]
    UP,
}

impl AsRef<str> for ZoneStatusEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ZoneStatusEnum::DOWN => "DOWN",
            ZoneStatusEnum::UP => "UP",
        }
    }
}

impl std::convert::TryFrom< &str> for ZoneStatusEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "DOWN" => Ok(ZoneStatusEnum::DOWN),
           "UP" => Ok(ZoneStatusEnum::UP),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ZoneStatusEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AcceleratorTypeAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum AcceleratorTypeAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for AcceleratorTypeAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AcceleratorTypeAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            AcceleratorTypeAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            AcceleratorTypeAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            AcceleratorTypeAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            AcceleratorTypeAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            AcceleratorTypeAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            AcceleratorTypeAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            AcceleratorTypeAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            AcceleratorTypeAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            AcceleratorTypeAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            AcceleratorTypeAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            AcceleratorTypeAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            AcceleratorTypeAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            AcceleratorTypeAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            AcceleratorTypeAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            AcceleratorTypeAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            AcceleratorTypeAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            AcceleratorTypeAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            AcceleratorTypeAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            AcceleratorTypeAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            AcceleratorTypeAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            AcceleratorTypeAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for AcceleratorTypeAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(AcceleratorTypeAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AcceleratorTypeAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AcceleratorTypeListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum AcceleratorTypeListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for AcceleratorTypeListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AcceleratorTypeListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            AcceleratorTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            AcceleratorTypeListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            AcceleratorTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            AcceleratorTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            AcceleratorTypeListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            AcceleratorTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            AcceleratorTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            AcceleratorTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            AcceleratorTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            AcceleratorTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            AcceleratorTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            AcceleratorTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            AcceleratorTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            AcceleratorTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            AcceleratorTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            AcceleratorTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            AcceleratorTypeListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            AcceleratorTypeListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            AcceleratorTypeListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            AcceleratorTypeListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            AcceleratorTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            AcceleratorTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            AcceleratorTypeListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            AcceleratorTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            AcceleratorTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            AcceleratorTypeListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            AcceleratorTypeListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for AcceleratorTypeListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(AcceleratorTypeListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(AcceleratorTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(AcceleratorTypeListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(AcceleratorTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(AcceleratorTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(AcceleratorTypeListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(AcceleratorTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(AcceleratorTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(AcceleratorTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(AcceleratorTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(AcceleratorTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(AcceleratorTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(AcceleratorTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(AcceleratorTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(AcceleratorTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(AcceleratorTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(AcceleratorTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(AcceleratorTypeListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(AcceleratorTypeListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(AcceleratorTypeListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(AcceleratorTypeListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(AcceleratorTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(AcceleratorTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(AcceleratorTypeListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(AcceleratorTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(AcceleratorTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(AcceleratorTypeListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(AcceleratorTypeListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AcceleratorTypeListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AcceleratorTypesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum AcceleratorTypesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for AcceleratorTypesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AcceleratorTypesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            AcceleratorTypesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            AcceleratorTypesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            AcceleratorTypesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            AcceleratorTypesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            AcceleratorTypesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            AcceleratorTypesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            AcceleratorTypesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            AcceleratorTypesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            AcceleratorTypesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            AcceleratorTypesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            AcceleratorTypesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            AcceleratorTypesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            AcceleratorTypesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            AcceleratorTypesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            AcceleratorTypesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            AcceleratorTypesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            AcceleratorTypesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            AcceleratorTypesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            AcceleratorTypesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            AcceleratorTypesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            AcceleratorTypesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for AcceleratorTypesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(AcceleratorTypesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(AcceleratorTypesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(AcceleratorTypesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(AcceleratorTypesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(AcceleratorTypesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(AcceleratorTypesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(AcceleratorTypesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(AcceleratorTypesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(AcceleratorTypesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(AcceleratorTypesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(AcceleratorTypesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(AcceleratorTypesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(AcceleratorTypesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(AcceleratorTypesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(AcceleratorTypesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(AcceleratorTypesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(AcceleratorTypesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(AcceleratorTypesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(AcceleratorTypesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(AcceleratorTypesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(AcceleratorTypesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(AcceleratorTypesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(AcceleratorTypesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AcceleratorTypesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AddressAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum AddressAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for AddressAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AddressAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            AddressAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            AddressAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            AddressAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            AddressAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            AddressAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            AddressAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            AddressAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            AddressAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            AddressAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            AddressAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            AddressAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            AddressAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            AddressAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            AddressAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            AddressAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            AddressAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            AddressAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            AddressAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            AddressAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            AddressAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            AddressAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            AddressAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            AddressAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            AddressAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            AddressAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            AddressAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            AddressAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for AddressAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(AddressAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(AddressAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(AddressAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(AddressAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(AddressAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(AddressAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(AddressAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(AddressAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(AddressAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(AddressAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(AddressAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(AddressAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(AddressAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(AddressAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(AddressAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(AddressAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(AddressAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(AddressAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(AddressAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(AddressAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(AddressAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(AddressAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(AddressAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(AddressAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(AddressAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(AddressAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(AddressAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(AddressAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AddressAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AddressListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum AddressListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for AddressListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AddressListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            AddressListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            AddressListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            AddressListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            AddressListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            AddressListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            AddressListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            AddressListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            AddressListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            AddressListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            AddressListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            AddressListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            AddressListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            AddressListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            AddressListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            AddressListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            AddressListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            AddressListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            AddressListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            AddressListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            AddressListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            AddressListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            AddressListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            AddressListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            AddressListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            AddressListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            AddressListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            AddressListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for AddressListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(AddressListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(AddressListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(AddressListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(AddressListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(AddressListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(AddressListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(AddressListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(AddressListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(AddressListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(AddressListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(AddressListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(AddressListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(AddressListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(AddressListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(AddressListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(AddressListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(AddressListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(AddressListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(AddressListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(AddressListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(AddressListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(AddressListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(AddressListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(AddressListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(AddressListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(AddressListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(AddressListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(AddressListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AddressListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AddressesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum AddressesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for AddressesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AddressesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            AddressesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            AddressesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            AddressesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            AddressesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            AddressesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            AddressesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            AddressesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            AddressesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            AddressesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            AddressesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            AddressesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            AddressesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            AddressesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            AddressesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            AddressesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            AddressesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            AddressesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            AddressesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            AddressesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            AddressesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            AddressesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            AddressesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            AddressesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            AddressesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            AddressesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            AddressesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            AddressesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for AddressesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(AddressesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(AddressesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(AddressesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(AddressesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(AddressesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(AddressesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(AddressesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(AddressesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(AddressesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(AddressesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(AddressesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(AddressesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(AddressesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(AddressesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(AddressesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(AddressesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(AddressesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(AddressesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(AddressesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(AddressesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(AddressesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(AddressesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(AddressesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(AddressesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(AddressesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(AddressesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(AddressesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(AddressesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AddressesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AutoscalerAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum AutoscalerAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for AutoscalerAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AutoscalerAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            AutoscalerAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            AutoscalerAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            AutoscalerAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            AutoscalerAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            AutoscalerAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            AutoscalerAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            AutoscalerAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            AutoscalerAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            AutoscalerAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            AutoscalerAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            AutoscalerAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            AutoscalerAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            AutoscalerAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            AutoscalerAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            AutoscalerAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            AutoscalerAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            AutoscalerAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            AutoscalerAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            AutoscalerAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            AutoscalerAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            AutoscalerAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            AutoscalerAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            AutoscalerAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            AutoscalerAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            AutoscalerAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            AutoscalerAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            AutoscalerAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for AutoscalerAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(AutoscalerAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(AutoscalerAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(AutoscalerAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(AutoscalerAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(AutoscalerAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(AutoscalerAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(AutoscalerAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(AutoscalerAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(AutoscalerAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(AutoscalerAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(AutoscalerAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(AutoscalerAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(AutoscalerAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(AutoscalerAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(AutoscalerAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(AutoscalerAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(AutoscalerAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(AutoscalerAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(AutoscalerAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(AutoscalerAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(AutoscalerAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(AutoscalerAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(AutoscalerAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(AutoscalerAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(AutoscalerAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(AutoscalerAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(AutoscalerAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(AutoscalerAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AutoscalerAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AutoscalerListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum AutoscalerListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for AutoscalerListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AutoscalerListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            AutoscalerListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            AutoscalerListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            AutoscalerListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            AutoscalerListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            AutoscalerListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            AutoscalerListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            AutoscalerListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            AutoscalerListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            AutoscalerListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            AutoscalerListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            AutoscalerListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            AutoscalerListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            AutoscalerListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            AutoscalerListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            AutoscalerListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            AutoscalerListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            AutoscalerListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            AutoscalerListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            AutoscalerListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            AutoscalerListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            AutoscalerListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            AutoscalerListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            AutoscalerListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            AutoscalerListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            AutoscalerListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            AutoscalerListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            AutoscalerListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for AutoscalerListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(AutoscalerListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(AutoscalerListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(AutoscalerListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(AutoscalerListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(AutoscalerListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(AutoscalerListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(AutoscalerListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(AutoscalerListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(AutoscalerListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(AutoscalerListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(AutoscalerListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(AutoscalerListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(AutoscalerListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(AutoscalerListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(AutoscalerListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(AutoscalerListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(AutoscalerListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(AutoscalerListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(AutoscalerListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(AutoscalerListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(AutoscalerListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(AutoscalerListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(AutoscalerListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(AutoscalerListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(AutoscalerListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(AutoscalerListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(AutoscalerListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(AutoscalerListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AutoscalerListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region AutoscalersScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum AutoscalersScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for AutoscalersScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            AutoscalersScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            AutoscalersScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            AutoscalersScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            AutoscalersScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            AutoscalersScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            AutoscalersScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            AutoscalersScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            AutoscalersScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            AutoscalersScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            AutoscalersScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            AutoscalersScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            AutoscalersScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            AutoscalersScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            AutoscalersScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            AutoscalersScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            AutoscalersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            AutoscalersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            AutoscalersScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            AutoscalersScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            AutoscalersScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            AutoscalersScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            AutoscalersScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            AutoscalersScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            AutoscalersScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            AutoscalersScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            AutoscalersScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            AutoscalersScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            AutoscalersScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for AutoscalersScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(AutoscalersScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(AutoscalersScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(AutoscalersScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(AutoscalersScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(AutoscalersScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(AutoscalersScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(AutoscalersScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(AutoscalersScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(AutoscalersScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(AutoscalersScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(AutoscalersScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(AutoscalersScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(AutoscalersScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(AutoscalersScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(AutoscalersScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(AutoscalersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(AutoscalersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(AutoscalersScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(AutoscalersScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(AutoscalersScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(AutoscalersScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(AutoscalersScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(AutoscalersScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(AutoscalersScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(AutoscalersScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(AutoscalersScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(AutoscalersScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(AutoscalersScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a AutoscalersScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendBucketListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum BackendBucketListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for BackendBucketListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendBucketListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            BackendBucketListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            BackendBucketListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            BackendBucketListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            BackendBucketListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            BackendBucketListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            BackendBucketListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            BackendBucketListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            BackendBucketListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            BackendBucketListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            BackendBucketListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            BackendBucketListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            BackendBucketListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            BackendBucketListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            BackendBucketListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            BackendBucketListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            BackendBucketListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            BackendBucketListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            BackendBucketListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            BackendBucketListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            BackendBucketListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            BackendBucketListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            BackendBucketListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            BackendBucketListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            BackendBucketListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            BackendBucketListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            BackendBucketListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            BackendBucketListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendBucketListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(BackendBucketListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(BackendBucketListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(BackendBucketListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(BackendBucketListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(BackendBucketListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(BackendBucketListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(BackendBucketListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(BackendBucketListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(BackendBucketListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(BackendBucketListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(BackendBucketListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(BackendBucketListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(BackendBucketListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(BackendBucketListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(BackendBucketListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(BackendBucketListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(BackendBucketListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(BackendBucketListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(BackendBucketListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(BackendBucketListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(BackendBucketListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(BackendBucketListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(BackendBucketListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(BackendBucketListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(BackendBucketListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(BackendBucketListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(BackendBucketListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(BackendBucketListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendBucketListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum BackendServiceAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for BackendServiceAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            BackendServiceAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            BackendServiceAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            BackendServiceAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            BackendServiceAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            BackendServiceAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            BackendServiceAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            BackendServiceAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            BackendServiceAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            BackendServiceAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            BackendServiceAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            BackendServiceAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            BackendServiceAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            BackendServiceAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            BackendServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            BackendServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            BackendServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            BackendServiceAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            BackendServiceAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            BackendServiceAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            BackendServiceAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            BackendServiceAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            BackendServiceAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            BackendServiceAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            BackendServiceAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            BackendServiceAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            BackendServiceAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            BackendServiceAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(BackendServiceAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(BackendServiceAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(BackendServiceAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(BackendServiceAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(BackendServiceAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(BackendServiceAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(BackendServiceAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(BackendServiceAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(BackendServiceAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(BackendServiceAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(BackendServiceAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(BackendServiceAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(BackendServiceAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(BackendServiceAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(BackendServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(BackendServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(BackendServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(BackendServiceAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(BackendServiceAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(BackendServiceAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(BackendServiceAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(BackendServiceAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(BackendServiceAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(BackendServiceAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(BackendServiceAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(BackendServiceAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(BackendServiceAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(BackendServiceAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum BackendServiceListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for BackendServiceListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            BackendServiceListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            BackendServiceListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            BackendServiceListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            BackendServiceListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            BackendServiceListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            BackendServiceListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            BackendServiceListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            BackendServiceListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            BackendServiceListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            BackendServiceListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            BackendServiceListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            BackendServiceListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            BackendServiceListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            BackendServiceListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            BackendServiceListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            BackendServiceListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            BackendServiceListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            BackendServiceListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            BackendServiceListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            BackendServiceListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            BackendServiceListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            BackendServiceListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            BackendServiceListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            BackendServiceListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            BackendServiceListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            BackendServiceListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            BackendServiceListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(BackendServiceListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(BackendServiceListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(BackendServiceListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(BackendServiceListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(BackendServiceListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(BackendServiceListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(BackendServiceListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(BackendServiceListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(BackendServiceListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(BackendServiceListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(BackendServiceListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(BackendServiceListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(BackendServiceListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(BackendServiceListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(BackendServiceListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(BackendServiceListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(BackendServiceListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(BackendServiceListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(BackendServiceListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(BackendServiceListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(BackendServiceListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(BackendServiceListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(BackendServiceListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(BackendServiceListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(BackendServiceListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(BackendServiceListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(BackendServiceListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(BackendServiceListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServiceListUsableWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum BackendServiceListUsableWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for BackendServiceListUsableWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServiceListUsableWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            BackendServiceListUsableWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            BackendServiceListUsableWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            BackendServiceListUsableWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            BackendServiceListUsableWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            BackendServiceListUsableWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            BackendServiceListUsableWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            BackendServiceListUsableWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            BackendServiceListUsableWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            BackendServiceListUsableWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            BackendServiceListUsableWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            BackendServiceListUsableWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            BackendServiceListUsableWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            BackendServiceListUsableWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            BackendServiceListUsableWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            BackendServiceListUsableWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            BackendServiceListUsableWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            BackendServiceListUsableWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            BackendServiceListUsableWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            BackendServiceListUsableWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            BackendServiceListUsableWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            BackendServiceListUsableWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            BackendServiceListUsableWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            BackendServiceListUsableWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            BackendServiceListUsableWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            BackendServiceListUsableWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            BackendServiceListUsableWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            BackendServiceListUsableWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServiceListUsableWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(BackendServiceListUsableWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(BackendServiceListUsableWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(BackendServiceListUsableWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(BackendServiceListUsableWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(BackendServiceListUsableWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(BackendServiceListUsableWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(BackendServiceListUsableWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(BackendServiceListUsableWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(BackendServiceListUsableWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(BackendServiceListUsableWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(BackendServiceListUsableWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(BackendServiceListUsableWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(BackendServiceListUsableWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(BackendServiceListUsableWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(BackendServiceListUsableWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(BackendServiceListUsableWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(BackendServiceListUsableWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(BackendServiceListUsableWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(BackendServiceListUsableWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(BackendServiceListUsableWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(BackendServiceListUsableWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(BackendServiceListUsableWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(BackendServiceListUsableWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(BackendServiceListUsableWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(BackendServiceListUsableWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(BackendServiceListUsableWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(BackendServiceListUsableWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(BackendServiceListUsableWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServiceListUsableWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region BackendServicesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum BackendServicesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for BackendServicesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            BackendServicesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            BackendServicesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            BackendServicesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            BackendServicesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            BackendServicesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            BackendServicesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            BackendServicesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            BackendServicesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            BackendServicesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            BackendServicesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            BackendServicesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            BackendServicesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            BackendServicesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            BackendServicesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            BackendServicesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            BackendServicesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            BackendServicesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            BackendServicesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            BackendServicesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            BackendServicesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            BackendServicesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            BackendServicesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            BackendServicesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            BackendServicesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            BackendServicesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            BackendServicesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            BackendServicesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            BackendServicesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for BackendServicesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(BackendServicesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(BackendServicesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(BackendServicesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(BackendServicesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(BackendServicesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(BackendServicesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(BackendServicesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(BackendServicesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(BackendServicesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(BackendServicesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(BackendServicesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(BackendServicesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(BackendServicesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(BackendServicesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(BackendServicesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(BackendServicesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(BackendServicesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(BackendServicesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(BackendServicesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(BackendServicesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(BackendServicesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(BackendServicesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(BackendServicesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(BackendServicesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(BackendServicesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(BackendServicesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(BackendServicesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(BackendServicesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a BackendServicesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region CommitmentAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum CommitmentAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for CommitmentAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            CommitmentAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            CommitmentAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            CommitmentAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            CommitmentAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            CommitmentAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            CommitmentAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            CommitmentAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            CommitmentAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            CommitmentAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            CommitmentAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            CommitmentAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            CommitmentAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            CommitmentAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            CommitmentAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            CommitmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            CommitmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            CommitmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            CommitmentAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            CommitmentAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            CommitmentAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            CommitmentAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            CommitmentAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            CommitmentAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            CommitmentAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            CommitmentAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            CommitmentAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            CommitmentAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            CommitmentAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for CommitmentAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(CommitmentAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(CommitmentAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(CommitmentAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(CommitmentAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(CommitmentAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(CommitmentAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(CommitmentAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(CommitmentAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(CommitmentAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(CommitmentAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(CommitmentAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(CommitmentAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(CommitmentAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(CommitmentAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(CommitmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(CommitmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(CommitmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(CommitmentAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(CommitmentAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(CommitmentAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(CommitmentAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(CommitmentAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(CommitmentAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(CommitmentAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(CommitmentAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(CommitmentAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(CommitmentAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(CommitmentAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a CommitmentAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region CommitmentListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum CommitmentListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for CommitmentListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            CommitmentListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            CommitmentListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            CommitmentListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            CommitmentListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            CommitmentListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            CommitmentListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            CommitmentListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            CommitmentListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            CommitmentListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            CommitmentListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            CommitmentListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            CommitmentListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            CommitmentListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            CommitmentListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            CommitmentListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            CommitmentListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            CommitmentListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            CommitmentListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            CommitmentListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            CommitmentListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            CommitmentListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            CommitmentListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            CommitmentListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            CommitmentListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            CommitmentListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            CommitmentListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            CommitmentListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            CommitmentListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for CommitmentListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(CommitmentListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(CommitmentListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(CommitmentListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(CommitmentListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(CommitmentListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(CommitmentListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(CommitmentListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(CommitmentListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(CommitmentListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(CommitmentListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(CommitmentListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(CommitmentListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(CommitmentListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(CommitmentListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(CommitmentListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(CommitmentListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(CommitmentListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(CommitmentListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(CommitmentListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(CommitmentListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(CommitmentListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(CommitmentListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(CommitmentListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(CommitmentListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(CommitmentListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(CommitmentListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(CommitmentListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(CommitmentListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a CommitmentListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region CommitmentsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum CommitmentsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for CommitmentsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            CommitmentsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            CommitmentsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            CommitmentsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            CommitmentsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            CommitmentsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            CommitmentsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            CommitmentsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            CommitmentsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            CommitmentsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            CommitmentsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            CommitmentsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            CommitmentsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            CommitmentsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            CommitmentsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            CommitmentsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            CommitmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            CommitmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            CommitmentsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            CommitmentsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            CommitmentsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            CommitmentsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            CommitmentsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            CommitmentsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            CommitmentsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            CommitmentsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            CommitmentsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            CommitmentsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            CommitmentsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for CommitmentsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(CommitmentsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(CommitmentsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(CommitmentsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(CommitmentsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(CommitmentsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(CommitmentsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(CommitmentsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(CommitmentsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(CommitmentsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(CommitmentsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(CommitmentsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(CommitmentsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(CommitmentsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(CommitmentsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(CommitmentsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(CommitmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(CommitmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(CommitmentsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(CommitmentsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(CommitmentsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(CommitmentsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(CommitmentsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(CommitmentsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(CommitmentsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(CommitmentsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(CommitmentsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(CommitmentsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(CommitmentsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a CommitmentsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DiskAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum DiskAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for DiskAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DiskAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            DiskAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            DiskAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            DiskAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            DiskAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            DiskAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            DiskAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            DiskAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            DiskAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            DiskAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            DiskAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            DiskAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            DiskAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            DiskAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            DiskAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            DiskAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            DiskAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            DiskAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            DiskAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            DiskAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            DiskAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            DiskAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            DiskAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            DiskAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            DiskAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            DiskAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            DiskAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            DiskAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for DiskAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(DiskAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(DiskAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(DiskAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(DiskAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(DiskAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(DiskAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(DiskAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(DiskAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(DiskAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(DiskAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(DiskAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(DiskAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(DiskAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(DiskAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(DiskAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(DiskAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(DiskAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(DiskAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(DiskAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(DiskAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(DiskAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(DiskAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(DiskAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(DiskAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(DiskAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(DiskAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(DiskAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(DiskAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DiskAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DiskListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum DiskListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for DiskListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DiskListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            DiskListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            DiskListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            DiskListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            DiskListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            DiskListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            DiskListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            DiskListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            DiskListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            DiskListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            DiskListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            DiskListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            DiskListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            DiskListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            DiskListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            DiskListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            DiskListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            DiskListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            DiskListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            DiskListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            DiskListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            DiskListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            DiskListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            DiskListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            DiskListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            DiskListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            DiskListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            DiskListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for DiskListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(DiskListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(DiskListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(DiskListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(DiskListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(DiskListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(DiskListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(DiskListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(DiskListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(DiskListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(DiskListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(DiskListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(DiskListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(DiskListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(DiskListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(DiskListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(DiskListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(DiskListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(DiskListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(DiskListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(DiskListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(DiskListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(DiskListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(DiskListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(DiskListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(DiskListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(DiskListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(DiskListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(DiskListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DiskListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DiskTypeAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum DiskTypeAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for DiskTypeAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DiskTypeAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            DiskTypeAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            DiskTypeAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            DiskTypeAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            DiskTypeAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            DiskTypeAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            DiskTypeAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            DiskTypeAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            DiskTypeAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            DiskTypeAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            DiskTypeAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            DiskTypeAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            DiskTypeAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            DiskTypeAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            DiskTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            DiskTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            DiskTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            DiskTypeAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            DiskTypeAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            DiskTypeAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            DiskTypeAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            DiskTypeAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            DiskTypeAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            DiskTypeAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            DiskTypeAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            DiskTypeAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            DiskTypeAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            DiskTypeAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for DiskTypeAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(DiskTypeAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(DiskTypeAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(DiskTypeAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(DiskTypeAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(DiskTypeAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(DiskTypeAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(DiskTypeAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(DiskTypeAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(DiskTypeAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(DiskTypeAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(DiskTypeAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(DiskTypeAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(DiskTypeAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(DiskTypeAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(DiskTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(DiskTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(DiskTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(DiskTypeAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(DiskTypeAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(DiskTypeAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(DiskTypeAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(DiskTypeAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(DiskTypeAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(DiskTypeAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(DiskTypeAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(DiskTypeAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(DiskTypeAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(DiskTypeAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DiskTypeAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DiskTypeListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum DiskTypeListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for DiskTypeListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DiskTypeListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            DiskTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            DiskTypeListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            DiskTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            DiskTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            DiskTypeListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            DiskTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            DiskTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            DiskTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            DiskTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            DiskTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            DiskTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            DiskTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            DiskTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            DiskTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            DiskTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            DiskTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            DiskTypeListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            DiskTypeListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            DiskTypeListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            DiskTypeListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            DiskTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            DiskTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            DiskTypeListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            DiskTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            DiskTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            DiskTypeListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            DiskTypeListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for DiskTypeListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(DiskTypeListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(DiskTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(DiskTypeListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(DiskTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(DiskTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(DiskTypeListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(DiskTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(DiskTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(DiskTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(DiskTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(DiskTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(DiskTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(DiskTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(DiskTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(DiskTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(DiskTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(DiskTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(DiskTypeListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(DiskTypeListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(DiskTypeListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(DiskTypeListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(DiskTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(DiskTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(DiskTypeListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(DiskTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(DiskTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(DiskTypeListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(DiskTypeListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DiskTypeListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DiskTypesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum DiskTypesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for DiskTypesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DiskTypesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            DiskTypesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            DiskTypesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            DiskTypesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            DiskTypesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            DiskTypesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            DiskTypesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            DiskTypesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            DiskTypesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            DiskTypesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            DiskTypesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            DiskTypesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            DiskTypesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            DiskTypesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            DiskTypesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            DiskTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            DiskTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            DiskTypesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            DiskTypesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            DiskTypesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            DiskTypesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            DiskTypesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            DiskTypesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            DiskTypesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            DiskTypesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            DiskTypesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            DiskTypesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            DiskTypesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for DiskTypesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(DiskTypesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(DiskTypesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(DiskTypesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(DiskTypesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(DiskTypesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(DiskTypesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(DiskTypesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(DiskTypesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(DiskTypesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(DiskTypesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(DiskTypesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(DiskTypesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(DiskTypesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(DiskTypesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(DiskTypesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(DiskTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(DiskTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(DiskTypesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(DiskTypesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(DiskTypesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(DiskTypesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(DiskTypesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(DiskTypesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(DiskTypesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(DiskTypesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(DiskTypesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(DiskTypesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(DiskTypesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DiskTypesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region DisksScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum DisksScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for DisksScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            DisksScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            DisksScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            DisksScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            DisksScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            DisksScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            DisksScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            DisksScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            DisksScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            DisksScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            DisksScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            DisksScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            DisksScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            DisksScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            DisksScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            DisksScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            DisksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            DisksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            DisksScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            DisksScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            DisksScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            DisksScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            DisksScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            DisksScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            DisksScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            DisksScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            DisksScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            DisksScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            DisksScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for DisksScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(DisksScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(DisksScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(DisksScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(DisksScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(DisksScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(DisksScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(DisksScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(DisksScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(DisksScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(DisksScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(DisksScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(DisksScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(DisksScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(DisksScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(DisksScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(DisksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(DisksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(DisksScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(DisksScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(DisksScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(DisksScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(DisksScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(DisksScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(DisksScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(DisksScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(DisksScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(DisksScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(DisksScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a DisksScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ExchangedPeeringRoutesListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ExchangedPeeringRoutesListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ExchangedPeeringRoutesListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ExchangedPeeringRoutesListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ExchangedPeeringRoutesListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ExchangedPeeringRoutesListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ExchangedPeeringRoutesListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ExchangedPeeringRoutesListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ExchangedPeeringRoutesListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ExchangedPeeringRoutesListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ExchangedPeeringRoutesListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ExchangedPeeringRoutesListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ExchangedPeeringRoutesListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ExchangedPeeringRoutesListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ExchangedPeeringRoutesListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ExchangedPeeringRoutesListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ExchangedPeeringRoutesListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ExchangedPeeringRoutesListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ExchangedPeeringRoutesListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ExchangedPeeringRoutesListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ExchangedPeeringRoutesListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ExchangedPeeringRoutesListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ExchangedPeeringRoutesListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ExchangedPeeringRoutesListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ExchangedPeeringRoutesListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ExchangedPeeringRoutesListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ExchangedPeeringRoutesListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ExchangedPeeringRoutesListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ExternalVpnGatewayListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ExternalVpnGatewayListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ExternalVpnGatewayListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ExternalVpnGatewayListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ExternalVpnGatewayListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ExternalVpnGatewayListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ExternalVpnGatewayListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ExternalVpnGatewayListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ExternalVpnGatewayListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ExternalVpnGatewayListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ExternalVpnGatewayListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ExternalVpnGatewayListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ExternalVpnGatewayListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ExternalVpnGatewayListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ExternalVpnGatewayListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ExternalVpnGatewayListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ExternalVpnGatewayListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ExternalVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ExternalVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ExternalVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ExternalVpnGatewayListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ExternalVpnGatewayListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ExternalVpnGatewayListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ExternalVpnGatewayListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ExternalVpnGatewayListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ExternalVpnGatewayListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ExternalVpnGatewayListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ExternalVpnGatewayListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ExternalVpnGatewayListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ExternalVpnGatewayListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ExternalVpnGatewayListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ExternalVpnGatewayListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ExternalVpnGatewayListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ExternalVpnGatewayListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ExternalVpnGatewayListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ExternalVpnGatewayListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ExternalVpnGatewayListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ExternalVpnGatewayListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ExternalVpnGatewayListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ExternalVpnGatewayListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ExternalVpnGatewayListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ExternalVpnGatewayListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ExternalVpnGatewayListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ExternalVpnGatewayListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ExternalVpnGatewayListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ExternalVpnGatewayListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ExternalVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ExternalVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ExternalVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ExternalVpnGatewayListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ExternalVpnGatewayListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ExternalVpnGatewayListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ExternalVpnGatewayListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ExternalVpnGatewayListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ExternalVpnGatewayListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ExternalVpnGatewayListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ExternalVpnGatewayListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ExternalVpnGatewayListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ExternalVpnGatewayListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ExternalVpnGatewayListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ExternalVpnGatewayListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region FirewallListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum FirewallListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for FirewallListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            FirewallListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            FirewallListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            FirewallListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            FirewallListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            FirewallListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            FirewallListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            FirewallListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            FirewallListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            FirewallListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            FirewallListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            FirewallListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            FirewallListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            FirewallListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            FirewallListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            FirewallListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            FirewallListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            FirewallListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            FirewallListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            FirewallListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            FirewallListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            FirewallListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            FirewallListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            FirewallListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            FirewallListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            FirewallListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            FirewallListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            FirewallListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            FirewallListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for FirewallListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(FirewallListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(FirewallListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(FirewallListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(FirewallListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(FirewallListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(FirewallListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(FirewallListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(FirewallListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(FirewallListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(FirewallListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(FirewallListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(FirewallListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(FirewallListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(FirewallListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(FirewallListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(FirewallListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(FirewallListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(FirewallListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(FirewallListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(FirewallListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(FirewallListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(FirewallListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(FirewallListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(FirewallListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(FirewallListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(FirewallListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(FirewallListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(FirewallListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a FirewallListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region FirewallPolicyListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum FirewallPolicyListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for FirewallPolicyListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            FirewallPolicyListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            FirewallPolicyListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            FirewallPolicyListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            FirewallPolicyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            FirewallPolicyListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            FirewallPolicyListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            FirewallPolicyListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            FirewallPolicyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            FirewallPolicyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            FirewallPolicyListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            FirewallPolicyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            FirewallPolicyListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            FirewallPolicyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            FirewallPolicyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            FirewallPolicyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            FirewallPolicyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            FirewallPolicyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            FirewallPolicyListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            FirewallPolicyListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            FirewallPolicyListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            FirewallPolicyListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            FirewallPolicyListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            FirewallPolicyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            FirewallPolicyListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            FirewallPolicyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            FirewallPolicyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            FirewallPolicyListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            FirewallPolicyListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for FirewallPolicyListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(FirewallPolicyListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(FirewallPolicyListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(FirewallPolicyListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(FirewallPolicyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(FirewallPolicyListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(FirewallPolicyListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(FirewallPolicyListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(FirewallPolicyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(FirewallPolicyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(FirewallPolicyListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(FirewallPolicyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(FirewallPolicyListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(FirewallPolicyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(FirewallPolicyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(FirewallPolicyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(FirewallPolicyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(FirewallPolicyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(FirewallPolicyListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(FirewallPolicyListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(FirewallPolicyListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(FirewallPolicyListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(FirewallPolicyListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(FirewallPolicyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(FirewallPolicyListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(FirewallPolicyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(FirewallPolicyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(FirewallPolicyListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(FirewallPolicyListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a FirewallPolicyListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ForwardingRuleAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ForwardingRuleAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ForwardingRuleAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ForwardingRuleAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ForwardingRuleAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ForwardingRuleAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ForwardingRuleAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ForwardingRuleAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ForwardingRuleAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ForwardingRuleAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ForwardingRuleAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ForwardingRuleAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ForwardingRuleAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ForwardingRuleAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ForwardingRuleAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ForwardingRuleAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ForwardingRuleAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ForwardingRuleAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ForwardingRuleAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ForwardingRuleAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ForwardingRuleAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ForwardingRuleAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ForwardingRuleAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ForwardingRuleAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ForwardingRuleAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ForwardingRuleAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ForwardingRuleAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ForwardingRuleAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ForwardingRuleListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ForwardingRuleListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ForwardingRuleListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ForwardingRuleListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ForwardingRuleListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ForwardingRuleListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ForwardingRuleListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ForwardingRuleListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ForwardingRuleListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ForwardingRuleListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ForwardingRuleListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ForwardingRuleListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ForwardingRuleListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ForwardingRuleListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ForwardingRuleListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ForwardingRuleListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ForwardingRuleListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ForwardingRuleListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ForwardingRuleListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ForwardingRuleListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ForwardingRuleListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ForwardingRuleListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ForwardingRuleListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ForwardingRuleListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ForwardingRuleListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ForwardingRuleListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ForwardingRuleListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ForwardingRuleListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ForwardingRuleListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ForwardingRuleListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ForwardingRuleListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ForwardingRuleListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ForwardingRuleListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ForwardingRuleListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ForwardingRuleListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ForwardingRuleListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ForwardingRuleListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ForwardingRuleListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ForwardingRuleListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ForwardingRuleListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ForwardingRuleListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ForwardingRuleListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ForwardingRuleListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ForwardingRuleListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ForwardingRuleListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ForwardingRuleListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ForwardingRuleListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ForwardingRuleListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ForwardingRuleListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ForwardingRuleListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ForwardingRuleListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ForwardingRuleListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ForwardingRuleListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ForwardingRuleListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ForwardingRuleListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ForwardingRuleListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ForwardingRuleListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ForwardingRuleListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ForwardingRuleListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ForwardingRuleListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ForwardingRuleListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ForwardingRulesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ForwardingRulesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ForwardingRulesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ForwardingRulesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ForwardingRulesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ForwardingRulesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ForwardingRulesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ForwardingRulesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ForwardingRulesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ForwardingRulesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ForwardingRulesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ForwardingRulesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ForwardingRulesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ForwardingRulesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ForwardingRulesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ForwardingRulesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ForwardingRulesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ForwardingRulesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ForwardingRulesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ForwardingRulesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ForwardingRulesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ForwardingRulesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ForwardingRulesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ForwardingRulesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ForwardingRulesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ForwardingRulesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ForwardingRulesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ForwardingRulesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ForwardingRulesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ForwardingRulesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ForwardingRulesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ForwardingRulesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ForwardingRulesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ForwardingRulesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ForwardingRulesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ForwardingRulesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ForwardingRulesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ForwardingRulesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ForwardingRulesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ForwardingRulesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ForwardingRulesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ForwardingRulesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ForwardingRulesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ForwardingRulesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ForwardingRulesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ForwardingRulesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ForwardingRulesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ForwardingRulesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ForwardingRulesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ForwardingRulesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ForwardingRulesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ForwardingRulesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ForwardingRulesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ForwardingRulesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ForwardingRulesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ForwardingRulesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ForwardingRulesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ForwardingRulesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ForwardingRulesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ForwardingRulesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ForwardingRulesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HealthCheckListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum HealthCheckListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for HealthCheckListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HealthCheckListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            HealthCheckListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            HealthCheckListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            HealthCheckListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            HealthCheckListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            HealthCheckListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            HealthCheckListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            HealthCheckListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            HealthCheckListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            HealthCheckListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            HealthCheckListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            HealthCheckListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            HealthCheckListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            HealthCheckListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            HealthCheckListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            HealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            HealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            HealthCheckListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            HealthCheckListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            HealthCheckListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            HealthCheckListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            HealthCheckListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            HealthCheckListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            HealthCheckListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            HealthCheckListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            HealthCheckListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            HealthCheckListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            HealthCheckListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for HealthCheckListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(HealthCheckListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(HealthCheckListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(HealthCheckListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(HealthCheckListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(HealthCheckListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(HealthCheckListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(HealthCheckListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(HealthCheckListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(HealthCheckListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(HealthCheckListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(HealthCheckListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(HealthCheckListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(HealthCheckListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(HealthCheckListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(HealthCheckListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(HealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(HealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(HealthCheckListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(HealthCheckListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(HealthCheckListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(HealthCheckListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(HealthCheckListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(HealthCheckListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(HealthCheckListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(HealthCheckListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(HealthCheckListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(HealthCheckListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(HealthCheckListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HealthCheckListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HealthCheckServicesListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum HealthCheckServicesListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for HealthCheckServicesListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HealthCheckServicesListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            HealthCheckServicesListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            HealthCheckServicesListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            HealthCheckServicesListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            HealthCheckServicesListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            HealthCheckServicesListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            HealthCheckServicesListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            HealthCheckServicesListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            HealthCheckServicesListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            HealthCheckServicesListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            HealthCheckServicesListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            HealthCheckServicesListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            HealthCheckServicesListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            HealthCheckServicesListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            HealthCheckServicesListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            HealthCheckServicesListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            HealthCheckServicesListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            HealthCheckServicesListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            HealthCheckServicesListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            HealthCheckServicesListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            HealthCheckServicesListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            HealthCheckServicesListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            HealthCheckServicesListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            HealthCheckServicesListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            HealthCheckServicesListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            HealthCheckServicesListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            HealthCheckServicesListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            HealthCheckServicesListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for HealthCheckServicesListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(HealthCheckServicesListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(HealthCheckServicesListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(HealthCheckServicesListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(HealthCheckServicesListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(HealthCheckServicesListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(HealthCheckServicesListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(HealthCheckServicesListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(HealthCheckServicesListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(HealthCheckServicesListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(HealthCheckServicesListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(HealthCheckServicesListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(HealthCheckServicesListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(HealthCheckServicesListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(HealthCheckServicesListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(HealthCheckServicesListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(HealthCheckServicesListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(HealthCheckServicesListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(HealthCheckServicesListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(HealthCheckServicesListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(HealthCheckServicesListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(HealthCheckServicesListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(HealthCheckServicesListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(HealthCheckServicesListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(HealthCheckServicesListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(HealthCheckServicesListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(HealthCheckServicesListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(HealthCheckServicesListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(HealthCheckServicesListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HealthCheckServicesListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HealthChecksAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum HealthChecksAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for HealthChecksAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HealthChecksAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            HealthChecksAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            HealthChecksAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            HealthChecksAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            HealthChecksAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            HealthChecksAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            HealthChecksAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            HealthChecksAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            HealthChecksAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            HealthChecksAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            HealthChecksAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            HealthChecksAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            HealthChecksAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            HealthChecksAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            HealthChecksAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            HealthChecksAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            HealthChecksAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            HealthChecksAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            HealthChecksAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            HealthChecksAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            HealthChecksAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            HealthChecksAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            HealthChecksAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            HealthChecksAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            HealthChecksAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            HealthChecksAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            HealthChecksAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            HealthChecksAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for HealthChecksAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(HealthChecksAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(HealthChecksAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(HealthChecksAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(HealthChecksAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(HealthChecksAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(HealthChecksAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(HealthChecksAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(HealthChecksAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(HealthChecksAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(HealthChecksAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(HealthChecksAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(HealthChecksAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(HealthChecksAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(HealthChecksAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(HealthChecksAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(HealthChecksAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(HealthChecksAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(HealthChecksAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(HealthChecksAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(HealthChecksAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(HealthChecksAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(HealthChecksAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(HealthChecksAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(HealthChecksAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(HealthChecksAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(HealthChecksAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(HealthChecksAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(HealthChecksAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HealthChecksAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HealthChecksScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum HealthChecksScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for HealthChecksScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HealthChecksScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            HealthChecksScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            HealthChecksScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            HealthChecksScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            HealthChecksScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            HealthChecksScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            HealthChecksScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            HealthChecksScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            HealthChecksScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            HealthChecksScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            HealthChecksScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            HealthChecksScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            HealthChecksScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            HealthChecksScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            HealthChecksScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            HealthChecksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            HealthChecksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            HealthChecksScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            HealthChecksScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            HealthChecksScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            HealthChecksScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            HealthChecksScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            HealthChecksScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            HealthChecksScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            HealthChecksScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            HealthChecksScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            HealthChecksScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            HealthChecksScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for HealthChecksScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(HealthChecksScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(HealthChecksScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(HealthChecksScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(HealthChecksScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(HealthChecksScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(HealthChecksScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(HealthChecksScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(HealthChecksScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(HealthChecksScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(HealthChecksScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(HealthChecksScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(HealthChecksScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(HealthChecksScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(HealthChecksScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(HealthChecksScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(HealthChecksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(HealthChecksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(HealthChecksScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(HealthChecksScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(HealthChecksScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(HealthChecksScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(HealthChecksScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(HealthChecksScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(HealthChecksScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(HealthChecksScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(HealthChecksScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(HealthChecksScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(HealthChecksScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HealthChecksScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HttpHealthCheckListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum HttpHealthCheckListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for HttpHealthCheckListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HttpHealthCheckListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            HttpHealthCheckListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            HttpHealthCheckListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            HttpHealthCheckListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            HttpHealthCheckListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            HttpHealthCheckListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            HttpHealthCheckListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            HttpHealthCheckListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            HttpHealthCheckListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            HttpHealthCheckListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            HttpHealthCheckListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            HttpHealthCheckListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            HttpHealthCheckListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            HttpHealthCheckListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            HttpHealthCheckListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            HttpHealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            HttpHealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            HttpHealthCheckListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            HttpHealthCheckListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            HttpHealthCheckListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            HttpHealthCheckListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            HttpHealthCheckListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            HttpHealthCheckListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            HttpHealthCheckListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            HttpHealthCheckListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            HttpHealthCheckListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            HttpHealthCheckListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            HttpHealthCheckListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for HttpHealthCheckListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(HttpHealthCheckListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(HttpHealthCheckListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(HttpHealthCheckListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(HttpHealthCheckListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(HttpHealthCheckListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(HttpHealthCheckListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(HttpHealthCheckListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(HttpHealthCheckListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(HttpHealthCheckListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(HttpHealthCheckListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(HttpHealthCheckListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(HttpHealthCheckListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(HttpHealthCheckListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(HttpHealthCheckListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(HttpHealthCheckListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(HttpHealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(HttpHealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(HttpHealthCheckListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(HttpHealthCheckListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(HttpHealthCheckListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(HttpHealthCheckListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(HttpHealthCheckListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(HttpHealthCheckListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(HttpHealthCheckListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(HttpHealthCheckListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(HttpHealthCheckListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(HttpHealthCheckListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(HttpHealthCheckListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HttpHealthCheckListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region HttpsHealthCheckListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum HttpsHealthCheckListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for HttpsHealthCheckListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            HttpsHealthCheckListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            HttpsHealthCheckListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            HttpsHealthCheckListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            HttpsHealthCheckListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            HttpsHealthCheckListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            HttpsHealthCheckListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            HttpsHealthCheckListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            HttpsHealthCheckListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            HttpsHealthCheckListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            HttpsHealthCheckListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            HttpsHealthCheckListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            HttpsHealthCheckListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            HttpsHealthCheckListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            HttpsHealthCheckListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            HttpsHealthCheckListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            HttpsHealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            HttpsHealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            HttpsHealthCheckListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            HttpsHealthCheckListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            HttpsHealthCheckListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            HttpsHealthCheckListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            HttpsHealthCheckListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            HttpsHealthCheckListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            HttpsHealthCheckListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            HttpsHealthCheckListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            HttpsHealthCheckListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            HttpsHealthCheckListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            HttpsHealthCheckListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for HttpsHealthCheckListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(HttpsHealthCheckListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(HttpsHealthCheckListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(HttpsHealthCheckListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(HttpsHealthCheckListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(HttpsHealthCheckListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(HttpsHealthCheckListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(HttpsHealthCheckListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(HttpsHealthCheckListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(HttpsHealthCheckListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(HttpsHealthCheckListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(HttpsHealthCheckListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(HttpsHealthCheckListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(HttpsHealthCheckListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(HttpsHealthCheckListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(HttpsHealthCheckListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(HttpsHealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(HttpsHealthCheckListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(HttpsHealthCheckListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(HttpsHealthCheckListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(HttpsHealthCheckListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(HttpsHealthCheckListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(HttpsHealthCheckListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(HttpsHealthCheckListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(HttpsHealthCheckListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(HttpsHealthCheckListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(HttpsHealthCheckListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(HttpsHealthCheckListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(HttpsHealthCheckListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a HttpsHealthCheckListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ImageRawDiskContainerTypeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
pub enum ImageRawDiskContainerTypeEnum {
    
    /// "TAR"
    #[serde(rename="TAR")]
    TAR,
}

impl AsRef<str> for ImageRawDiskContainerTypeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ImageRawDiskContainerTypeEnum::TAR => "TAR",
        }
    }
}

impl std::convert::TryFrom< &str> for ImageRawDiskContainerTypeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "TAR" => Ok(ImageRawDiskContainerTypeEnum::TAR),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ImageRawDiskContainerTypeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ImageListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ImageListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ImageListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ImageListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ImageListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ImageListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ImageListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ImageListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ImageListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ImageListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ImageListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ImageListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ImageListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ImageListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ImageListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ImageListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ImageListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ImageListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ImageListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ImageListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ImageListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ImageListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ImageListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ImageListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ImageListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ImageListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ImageListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ImageListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ImageListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ImageListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ImageListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ImageListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ImageListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ImageListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ImageListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ImageListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ImageListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ImageListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ImageListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ImageListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ImageListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ImageListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ImageListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ImageListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ImageListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ImageListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ImageListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ImageListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ImageListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ImageListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ImageListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ImageListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ImageListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ImageListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ImageListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ImageListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ImageListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ImageListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ImageListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ImageListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ImageListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceGroupAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceGroupAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceGroupAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceGroupAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceGroupAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceGroupAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceGroupAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceGroupAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceGroupAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceGroupAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceGroupAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceGroupAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceGroupAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceGroupAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceGroupAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceGroupAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceGroupAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceGroupAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceGroupAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceGroupAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceGroupAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceGroupAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceGroupAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceGroupAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceGroupAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceGroupAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceGroupAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceGroupAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceGroupAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceGroupAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceGroupAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceGroupAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceGroupAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceGroupAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceGroupAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceGroupAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceGroupAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceGroupAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceGroupAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceGroupAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceGroupAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceGroupAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceGroupAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceGroupAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceGroupAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceGroupAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceGroupListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceGroupListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceGroupListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceGroupListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceGroupListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceGroupListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceGroupListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceGroupListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceGroupListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceGroupListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceGroupListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceGroupListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceGroupListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceGroupListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceGroupListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceGroupListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceGroupListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceGroupListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceGroupListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceGroupListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceGroupListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceGroupListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceGroupListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceGroupListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceGroupListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceGroupListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceGroupListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceGroupListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceGroupListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceGroupListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceGroupListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceGroupListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceGroupListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceGroupListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceGroupListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceGroupListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceGroupListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceGroupListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceGroupListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceGroupListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceGroupListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceGroupListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceGroupListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceGroupListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceGroupListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceGroupListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceGroupListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceGroupListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceGroupListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceGroupListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceGroupListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceGroupListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceGroupListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceGroupListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceGroupListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceGroupListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceGroupListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceGroupManagerAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceGroupManagerAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceGroupManagerAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceGroupManagerAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceGroupManagerAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceGroupManagerAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceGroupManagerAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceGroupManagerAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceGroupManagerAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceGroupManagerAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceGroupManagerAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceGroupManagerAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceGroupManagerAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceGroupManagerAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceGroupManagerAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceGroupManagerAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceGroupManagerAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceGroupManagerAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceGroupManagerAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceGroupManagerAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceGroupManagerAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceGroupManagerAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceGroupManagerAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceGroupManagerAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceGroupManagerListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceGroupManagerListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceGroupManagerListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceGroupManagerListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceGroupManagerListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceGroupManagerListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceGroupManagerListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceGroupManagerListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceGroupManagerListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceGroupManagerListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceGroupManagerListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceGroupManagerListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceGroupManagerListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceGroupManagerListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceGroupManagerListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceGroupManagerListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceGroupManagerListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceGroupManagerListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceGroupManagerListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceGroupManagerListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceGroupManagerListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceGroupManagerListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceGroupManagerListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceGroupManagerListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceGroupManagerListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceGroupManagerListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceGroupManagerListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceGroupManagerListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceGroupManagerListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceGroupManagerListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceGroupManagerListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceGroupManagerListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceGroupManagerListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceGroupManagerListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceGroupManagerListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceGroupManagerListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceGroupManagerListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceGroupManagerListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceGroupManagerListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceGroupManagerListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceGroupManagerListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceGroupManagerListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceGroupManagerListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceGroupManagerListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceGroupManagerListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceGroupManagerListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceGroupManagerListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceGroupManagerListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceGroupManagerListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceGroupManagerListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceGroupManagerListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagerResizeRequestsListResponseWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupManagersScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceGroupManagersScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceGroupManagersScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupManagersScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceGroupManagersScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceGroupManagersScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceGroupManagersScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceGroupManagersScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceGroupManagersScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceGroupManagersScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceGroupManagersScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceGroupManagersScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceGroupManagersScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceGroupManagersScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceGroupManagersScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceGroupManagersScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceGroupManagersScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceGroupManagersScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceGroupManagersScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceGroupManagersScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceGroupManagersScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceGroupManagersScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceGroupManagersScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceGroupManagersScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceGroupManagersScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupManagersScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceGroupManagersScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupManagersScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupsListInstancesWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceGroupsListInstancesWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceGroupsListInstancesWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupsListInstancesWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceGroupsListInstancesWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceGroupsListInstancesWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceGroupsListInstancesWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceGroupsListInstancesWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceGroupsListInstancesWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceGroupsListInstancesWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceGroupsListInstancesWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceGroupsListInstancesWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceGroupsListInstancesWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceGroupsListInstancesWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceGroupsListInstancesWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceGroupsListInstancesWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceGroupsListInstancesWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceGroupsListInstancesWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceGroupsListInstancesWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceGroupsListInstancesWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceGroupsListInstancesWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceGroupsListInstancesWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceGroupsListInstancesWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceGroupsListInstancesWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceGroupsListInstancesWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupsListInstancesWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceGroupsListInstancesWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceGroupsListInstancesWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceGroupsListInstancesWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceGroupsListInstancesWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceGroupsListInstancesWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceGroupsListInstancesWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceGroupsListInstancesWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceGroupsListInstancesWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceGroupsListInstancesWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceGroupsListInstancesWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceGroupsListInstancesWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceGroupsListInstancesWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceGroupsListInstancesWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceGroupsListInstancesWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceGroupsListInstancesWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceGroupsListInstancesWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceGroupsListInstancesWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceGroupsListInstancesWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceGroupsListInstancesWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceGroupsListInstancesWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceGroupsListInstancesWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceGroupsListInstancesWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceGroupsListInstancesWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupsListInstancesWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceGroupsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceGroupsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceGroupsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceGroupsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceGroupsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceGroupsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceGroupsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceGroupsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceGroupsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceGroupsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceGroupsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceGroupsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceGroupsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceGroupsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceGroupsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceGroupsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceGroupsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceGroupsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceGroupsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceGroupsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceGroupsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceGroupsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceGroupsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceGroupsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceGroupsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceGroupsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceGroupsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceGroupsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceGroupsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceGroupsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceGroupsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceGroupsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceGroupsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceGroupsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceGroupsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceGroupsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceGroupsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceGroupsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceGroupsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceGroupsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceGroupsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceGroupsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceGroupsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceGroupsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceGroupsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceGroupsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceGroupsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceGroupsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceGroupsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceGroupsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceGroupsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceGroupsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceGroupsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceGroupsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceGroupsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceListReferrersWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceListReferrersWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceListReferrersWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceListReferrersWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceListReferrersWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceListReferrersWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceListReferrersWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceListReferrersWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceListReferrersWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceListReferrersWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceListReferrersWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceListReferrersWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceListReferrersWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceListReferrersWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceListReferrersWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceListReferrersWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceListReferrersWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceListReferrersWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceListReferrersWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceListReferrersWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceListReferrersWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceListReferrersWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceListReferrersWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceListReferrersWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceListReferrersWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceListReferrersWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceListReferrersWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceListReferrersWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceListReferrersWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceListReferrersWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceListReferrersWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceListReferrersWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceListReferrersWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceListReferrersWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceListReferrersWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceListReferrersWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceListReferrersWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceListReferrersWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceListReferrersWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceListReferrersWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceListReferrersWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceListReferrersWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceListReferrersWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceListReferrersWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceListReferrersWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceListReferrersWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceListReferrersWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceListReferrersWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceListReferrersWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceListReferrersWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceListReferrersWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceListReferrersWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceListReferrersWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceListReferrersWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceListReferrersWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceListReferrersWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceListReferrersWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceListReferrersWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceListReferrersWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceListReferrersWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceListReferrersWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceTemplateAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceTemplateAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceTemplateAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceTemplateAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceTemplateAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceTemplateAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceTemplateAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceTemplateAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceTemplateAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceTemplateAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceTemplateAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceTemplateAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceTemplateAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceTemplateAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceTemplateAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceTemplateAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceTemplateAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceTemplateAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceTemplateAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceTemplateAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceTemplateAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceTemplateAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceTemplateAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceTemplateAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceTemplateAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceTemplateAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceTemplateAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceTemplateAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceTemplateListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceTemplateListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceTemplateListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceTemplateListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceTemplateListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceTemplateListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceTemplateListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceTemplateListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceTemplateListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceTemplateListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceTemplateListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceTemplateListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceTemplateListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceTemplateListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceTemplateListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceTemplateListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceTemplateListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceTemplateListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceTemplateListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceTemplateListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceTemplateListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceTemplateListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceTemplateListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceTemplateListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceTemplateListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceTemplateListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceTemplateListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceTemplateListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceTemplateListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceTemplateListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceTemplateListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceTemplateListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceTemplateListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceTemplateListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceTemplateListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceTemplateListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceTemplateListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceTemplateListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceTemplateListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceTemplateListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceTemplateListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceTemplateListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceTemplateListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceTemplateListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceTemplateListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceTemplateListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceTemplateListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceTemplateListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceTemplateListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceTemplateListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceTemplateListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceTemplateListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceTemplateListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceTemplateListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceTemplateListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceTemplateListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceTemplateListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceTemplateListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceTemplateListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceTemplateListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceTemplateListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceTemplatesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstanceTemplatesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstanceTemplatesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceTemplatesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstanceTemplatesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstanceTemplatesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstanceTemplatesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstanceTemplatesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstanceTemplatesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstanceTemplatesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstanceTemplatesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstanceTemplatesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstanceTemplatesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstanceTemplatesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstanceTemplatesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstanceTemplatesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstanceTemplatesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstanceTemplatesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstanceTemplatesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstanceTemplatesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstanceTemplatesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstanceTemplatesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstanceTemplatesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstanceTemplatesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstanceTemplatesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceTemplatesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstanceTemplatesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstanceTemplatesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstanceTemplatesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstanceTemplatesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstanceTemplatesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstanceTemplatesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstanceTemplatesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstanceTemplatesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstanceTemplatesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstanceTemplatesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstanceTemplatesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstanceTemplatesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstanceTemplatesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstanceTemplatesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstanceTemplatesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstanceTemplatesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstanceTemplatesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstanceTemplatesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstanceTemplatesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstanceTemplatesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstanceTemplatesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstanceTemplatesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstanceTemplatesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceTemplatesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstancesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstancesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstancesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstancesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstancesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstancesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstancesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstancesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstancesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstancesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstancesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstancesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstancesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstancesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstancesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstancesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstancesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstancesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstancesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstancesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstancesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstancesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstancesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstancesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstancesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstancesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstancesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstancesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstancesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstancesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstancesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstancesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstancesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstancesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstancesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstancesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstancesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstancesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstancesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstancesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstancesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstancesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstancesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstancesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstancesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstancesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstancesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstancesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstancesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstancesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstancesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstancesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstancesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstancesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstancesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstancesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstancesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstancesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstancesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstancesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstancesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstantSnapshotAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstantSnapshotAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstantSnapshotAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstantSnapshotAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstantSnapshotAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstantSnapshotAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstantSnapshotAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstantSnapshotAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstantSnapshotAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstantSnapshotAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstantSnapshotAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstantSnapshotAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstantSnapshotAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstantSnapshotAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstantSnapshotAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstantSnapshotAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstantSnapshotAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstantSnapshotAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstantSnapshotAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstantSnapshotAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstantSnapshotAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstantSnapshotAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstantSnapshotAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstantSnapshotAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstantSnapshotAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstantSnapshotAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstantSnapshotAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstantSnapshotAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstantSnapshotListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstantSnapshotListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstantSnapshotListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstantSnapshotListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstantSnapshotListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstantSnapshotListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstantSnapshotListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstantSnapshotListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstantSnapshotListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstantSnapshotListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstantSnapshotListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstantSnapshotListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstantSnapshotListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstantSnapshotListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstantSnapshotListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstantSnapshotListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstantSnapshotListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstantSnapshotListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstantSnapshotListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstantSnapshotListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstantSnapshotListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstantSnapshotListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstantSnapshotListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstantSnapshotListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstantSnapshotListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstantSnapshotListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstantSnapshotListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstantSnapshotListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstantSnapshotListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstantSnapshotListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstantSnapshotListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstantSnapshotListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstantSnapshotListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstantSnapshotListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstantSnapshotListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstantSnapshotListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstantSnapshotListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstantSnapshotListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstantSnapshotListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstantSnapshotListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstantSnapshotListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstantSnapshotListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstantSnapshotListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstantSnapshotListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstantSnapshotListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstantSnapshotListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstantSnapshotListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstantSnapshotListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstantSnapshotListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstantSnapshotListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstantSnapshotListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstantSnapshotListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstantSnapshotListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstantSnapshotListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstantSnapshotListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstantSnapshotListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstantSnapshotListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstantSnapshotListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstantSnapshotListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstantSnapshotListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstantSnapshotListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstantSnapshotsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InstantSnapshotsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InstantSnapshotsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstantSnapshotsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InstantSnapshotsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InstantSnapshotsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InstantSnapshotsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InstantSnapshotsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InstantSnapshotsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InstantSnapshotsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InstantSnapshotsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InstantSnapshotsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InstantSnapshotsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InstantSnapshotsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InstantSnapshotsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InstantSnapshotsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InstantSnapshotsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InstantSnapshotsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InstantSnapshotsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InstantSnapshotsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InstantSnapshotsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InstantSnapshotsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InstantSnapshotsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InstantSnapshotsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InstantSnapshotsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InstantSnapshotsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InstantSnapshotsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InstantSnapshotsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InstantSnapshotsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InstantSnapshotsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InstantSnapshotsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InstantSnapshotsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InstantSnapshotsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InstantSnapshotsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InstantSnapshotsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InstantSnapshotsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InstantSnapshotsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InstantSnapshotsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InstantSnapshotsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InstantSnapshotsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InstantSnapshotsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InstantSnapshotsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InstantSnapshotsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InstantSnapshotsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InstantSnapshotsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InstantSnapshotsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InstantSnapshotsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InstantSnapshotsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InstantSnapshotsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstantSnapshotsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InterconnectAttachmentAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InterconnectAttachmentAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InterconnectAttachmentAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InterconnectAttachmentAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InterconnectAttachmentAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InterconnectAttachmentAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InterconnectAttachmentAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InterconnectAttachmentAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InterconnectAttachmentAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InterconnectAttachmentAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InterconnectAttachmentAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InterconnectAttachmentAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InterconnectAttachmentAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InterconnectAttachmentAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InterconnectAttachmentAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InterconnectAttachmentAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InterconnectAttachmentAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InterconnectAttachmentAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InterconnectAttachmentAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InterconnectAttachmentAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InterconnectAttachmentAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InterconnectAttachmentAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InterconnectAttachmentAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InterconnectAttachmentAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InterconnectAttachmentListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InterconnectAttachmentListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InterconnectAttachmentListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InterconnectAttachmentListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InterconnectAttachmentListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InterconnectAttachmentListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InterconnectAttachmentListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InterconnectAttachmentListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InterconnectAttachmentListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InterconnectAttachmentListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InterconnectAttachmentListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InterconnectAttachmentListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InterconnectAttachmentListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InterconnectAttachmentListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InterconnectAttachmentListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InterconnectAttachmentListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InterconnectAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InterconnectAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InterconnectAttachmentListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InterconnectAttachmentListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InterconnectAttachmentListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InterconnectAttachmentListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InterconnectAttachmentListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InterconnectAttachmentListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InterconnectAttachmentListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InterconnectAttachmentListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InterconnectAttachmentListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InterconnectAttachmentListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InterconnectAttachmentListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InterconnectAttachmentListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InterconnectAttachmentListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InterconnectAttachmentListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InterconnectAttachmentListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InterconnectAttachmentListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InterconnectAttachmentListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InterconnectAttachmentListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InterconnectAttachmentListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InterconnectAttachmentListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InterconnectAttachmentListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InterconnectAttachmentListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InterconnectAttachmentListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InterconnectAttachmentListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InterconnectAttachmentListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InterconnectAttachmentListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InterconnectAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InterconnectAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InterconnectAttachmentListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InterconnectAttachmentListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InterconnectAttachmentListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InterconnectAttachmentListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InterconnectAttachmentListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InterconnectAttachmentListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InterconnectAttachmentListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InterconnectAttachmentListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InterconnectAttachmentListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InterconnectAttachmentListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InterconnectAttachmentListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectAttachmentsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InterconnectAttachmentsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InterconnectAttachmentsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectAttachmentsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InterconnectAttachmentsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InterconnectAttachmentsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InterconnectAttachmentsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InterconnectAttachmentsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InterconnectAttachmentsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InterconnectAttachmentsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InterconnectAttachmentsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InterconnectAttachmentsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InterconnectAttachmentsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InterconnectAttachmentsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InterconnectAttachmentsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InterconnectAttachmentsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InterconnectAttachmentsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InterconnectAttachmentsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InterconnectAttachmentsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InterconnectAttachmentsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InterconnectAttachmentsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InterconnectAttachmentsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InterconnectAttachmentsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InterconnectAttachmentsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InterconnectAttachmentsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectAttachmentsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InterconnectAttachmentsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectAttachmentsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InterconnectListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InterconnectListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InterconnectListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InterconnectListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InterconnectListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InterconnectListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InterconnectListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InterconnectListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InterconnectListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InterconnectListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InterconnectListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InterconnectListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InterconnectListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InterconnectListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InterconnectListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InterconnectListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InterconnectListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InterconnectListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InterconnectListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InterconnectListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InterconnectListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InterconnectListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InterconnectListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InterconnectListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InterconnectListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InterconnectListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InterconnectListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InterconnectListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InterconnectListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InterconnectListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InterconnectListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InterconnectListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InterconnectListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InterconnectListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InterconnectListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InterconnectListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InterconnectListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InterconnectListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InterconnectListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InterconnectListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InterconnectListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InterconnectListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InterconnectListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InterconnectListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InterconnectListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InterconnectListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InterconnectListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InterconnectListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InterconnectListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InterconnectListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InterconnectListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InterconnectListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InterconnectListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InterconnectListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InterconnectListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InterconnectListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InterconnectListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectLocationListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InterconnectLocationListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InterconnectLocationListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectLocationListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InterconnectLocationListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InterconnectLocationListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InterconnectLocationListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InterconnectLocationListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InterconnectLocationListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InterconnectLocationListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InterconnectLocationListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InterconnectLocationListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InterconnectLocationListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InterconnectLocationListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InterconnectLocationListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InterconnectLocationListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InterconnectLocationListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InterconnectLocationListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InterconnectLocationListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InterconnectLocationListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InterconnectLocationListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InterconnectLocationListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InterconnectLocationListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InterconnectLocationListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InterconnectLocationListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InterconnectLocationListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InterconnectLocationListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InterconnectLocationListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InterconnectLocationListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InterconnectLocationListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InterconnectLocationListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectLocationListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InterconnectLocationListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InterconnectLocationListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InterconnectLocationListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InterconnectLocationListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InterconnectLocationListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InterconnectLocationListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InterconnectLocationListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InterconnectLocationListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InterconnectLocationListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InterconnectLocationListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InterconnectLocationListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InterconnectLocationListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InterconnectLocationListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InterconnectLocationListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InterconnectLocationListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InterconnectLocationListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InterconnectLocationListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InterconnectLocationListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InterconnectLocationListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InterconnectLocationListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InterconnectLocationListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InterconnectLocationListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InterconnectLocationListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InterconnectLocationListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InterconnectLocationListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InterconnectLocationListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InterconnectLocationListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InterconnectLocationListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectLocationListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InterconnectRemoteLocationListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum InterconnectRemoteLocationListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for InterconnectRemoteLocationListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InterconnectRemoteLocationListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            InterconnectRemoteLocationListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            InterconnectRemoteLocationListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            InterconnectRemoteLocationListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            InterconnectRemoteLocationListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            InterconnectRemoteLocationListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            InterconnectRemoteLocationListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            InterconnectRemoteLocationListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            InterconnectRemoteLocationListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            InterconnectRemoteLocationListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            InterconnectRemoteLocationListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            InterconnectRemoteLocationListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            InterconnectRemoteLocationListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            InterconnectRemoteLocationListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            InterconnectRemoteLocationListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            InterconnectRemoteLocationListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            InterconnectRemoteLocationListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            InterconnectRemoteLocationListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            InterconnectRemoteLocationListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            InterconnectRemoteLocationListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            InterconnectRemoteLocationListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            InterconnectRemoteLocationListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for InterconnectRemoteLocationListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(InterconnectRemoteLocationListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(InterconnectRemoteLocationListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(InterconnectRemoteLocationListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(InterconnectRemoteLocationListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(InterconnectRemoteLocationListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(InterconnectRemoteLocationListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(InterconnectRemoteLocationListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(InterconnectRemoteLocationListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(InterconnectRemoteLocationListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(InterconnectRemoteLocationListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(InterconnectRemoteLocationListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(InterconnectRemoteLocationListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(InterconnectRemoteLocationListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(InterconnectRemoteLocationListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(InterconnectRemoteLocationListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(InterconnectRemoteLocationListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(InterconnectRemoteLocationListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(InterconnectRemoteLocationListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(InterconnectRemoteLocationListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(InterconnectRemoteLocationListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(InterconnectRemoteLocationListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(InterconnectRemoteLocationListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(InterconnectRemoteLocationListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InterconnectRemoteLocationListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region LicensesListResponseWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum LicensesListResponseWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for LicensesListResponseWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            LicensesListResponseWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            LicensesListResponseWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            LicensesListResponseWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            LicensesListResponseWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            LicensesListResponseWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            LicensesListResponseWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            LicensesListResponseWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            LicensesListResponseWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            LicensesListResponseWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            LicensesListResponseWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            LicensesListResponseWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            LicensesListResponseWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            LicensesListResponseWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            LicensesListResponseWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            LicensesListResponseWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            LicensesListResponseWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            LicensesListResponseWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            LicensesListResponseWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            LicensesListResponseWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            LicensesListResponseWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            LicensesListResponseWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            LicensesListResponseWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            LicensesListResponseWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            LicensesListResponseWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            LicensesListResponseWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            LicensesListResponseWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            LicensesListResponseWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            LicensesListResponseWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for LicensesListResponseWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(LicensesListResponseWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(LicensesListResponseWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(LicensesListResponseWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(LicensesListResponseWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(LicensesListResponseWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(LicensesListResponseWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(LicensesListResponseWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(LicensesListResponseWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(LicensesListResponseWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(LicensesListResponseWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(LicensesListResponseWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(LicensesListResponseWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(LicensesListResponseWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(LicensesListResponseWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(LicensesListResponseWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(LicensesListResponseWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(LicensesListResponseWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(LicensesListResponseWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(LicensesListResponseWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(LicensesListResponseWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(LicensesListResponseWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(LicensesListResponseWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(LicensesListResponseWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(LicensesListResponseWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(LicensesListResponseWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(LicensesListResponseWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(LicensesListResponseWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(LicensesListResponseWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a LicensesListResponseWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region MachineImageListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum MachineImageListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for MachineImageListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            MachineImageListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            MachineImageListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            MachineImageListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            MachineImageListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            MachineImageListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            MachineImageListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            MachineImageListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            MachineImageListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            MachineImageListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            MachineImageListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            MachineImageListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            MachineImageListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            MachineImageListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            MachineImageListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            MachineImageListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            MachineImageListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            MachineImageListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            MachineImageListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            MachineImageListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            MachineImageListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            MachineImageListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            MachineImageListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            MachineImageListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            MachineImageListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            MachineImageListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            MachineImageListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            MachineImageListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            MachineImageListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for MachineImageListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(MachineImageListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(MachineImageListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(MachineImageListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(MachineImageListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(MachineImageListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(MachineImageListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(MachineImageListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(MachineImageListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(MachineImageListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(MachineImageListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(MachineImageListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(MachineImageListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(MachineImageListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(MachineImageListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(MachineImageListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(MachineImageListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(MachineImageListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(MachineImageListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(MachineImageListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(MachineImageListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(MachineImageListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(MachineImageListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(MachineImageListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(MachineImageListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(MachineImageListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(MachineImageListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(MachineImageListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(MachineImageListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a MachineImageListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region MachineTypeAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum MachineTypeAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for MachineTypeAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            MachineTypeAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            MachineTypeAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            MachineTypeAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            MachineTypeAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            MachineTypeAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            MachineTypeAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            MachineTypeAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            MachineTypeAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            MachineTypeAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            MachineTypeAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            MachineTypeAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            MachineTypeAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            MachineTypeAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            MachineTypeAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            MachineTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            MachineTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            MachineTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            MachineTypeAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            MachineTypeAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            MachineTypeAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            MachineTypeAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            MachineTypeAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            MachineTypeAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            MachineTypeAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            MachineTypeAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            MachineTypeAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            MachineTypeAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            MachineTypeAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for MachineTypeAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(MachineTypeAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(MachineTypeAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(MachineTypeAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(MachineTypeAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(MachineTypeAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(MachineTypeAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(MachineTypeAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(MachineTypeAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(MachineTypeAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(MachineTypeAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(MachineTypeAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(MachineTypeAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(MachineTypeAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(MachineTypeAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(MachineTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(MachineTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(MachineTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(MachineTypeAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(MachineTypeAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(MachineTypeAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(MachineTypeAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(MachineTypeAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(MachineTypeAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(MachineTypeAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(MachineTypeAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(MachineTypeAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(MachineTypeAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(MachineTypeAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a MachineTypeAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region MachineTypeListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum MachineTypeListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for MachineTypeListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            MachineTypeListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            MachineTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            MachineTypeListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            MachineTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            MachineTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            MachineTypeListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            MachineTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            MachineTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            MachineTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            MachineTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            MachineTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            MachineTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            MachineTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            MachineTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            MachineTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            MachineTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            MachineTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            MachineTypeListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            MachineTypeListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            MachineTypeListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            MachineTypeListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            MachineTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            MachineTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            MachineTypeListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            MachineTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            MachineTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            MachineTypeListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            MachineTypeListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for MachineTypeListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(MachineTypeListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(MachineTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(MachineTypeListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(MachineTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(MachineTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(MachineTypeListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(MachineTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(MachineTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(MachineTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(MachineTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(MachineTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(MachineTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(MachineTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(MachineTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(MachineTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(MachineTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(MachineTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(MachineTypeListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(MachineTypeListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(MachineTypeListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(MachineTypeListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(MachineTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(MachineTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(MachineTypeListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(MachineTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(MachineTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(MachineTypeListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(MachineTypeListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a MachineTypeListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region MachineTypesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum MachineTypesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for MachineTypesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            MachineTypesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            MachineTypesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            MachineTypesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            MachineTypesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            MachineTypesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            MachineTypesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            MachineTypesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            MachineTypesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            MachineTypesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            MachineTypesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            MachineTypesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            MachineTypesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            MachineTypesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            MachineTypesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            MachineTypesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            MachineTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            MachineTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            MachineTypesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            MachineTypesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            MachineTypesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            MachineTypesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            MachineTypesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            MachineTypesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            MachineTypesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            MachineTypesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            MachineTypesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            MachineTypesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            MachineTypesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for MachineTypesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(MachineTypesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(MachineTypesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(MachineTypesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(MachineTypesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(MachineTypesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(MachineTypesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(MachineTypesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(MachineTypesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(MachineTypesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(MachineTypesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(MachineTypesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(MachineTypesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(MachineTypesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(MachineTypesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(MachineTypesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(MachineTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(MachineTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(MachineTypesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(MachineTypesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(MachineTypesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(MachineTypesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(MachineTypesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(MachineTypesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(MachineTypesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(MachineTypesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(MachineTypesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(MachineTypesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(MachineTypesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a MachineTypesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkAttachmentAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NetworkAttachmentAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NetworkAttachmentAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkAttachmentAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NetworkAttachmentAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NetworkAttachmentAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NetworkAttachmentAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NetworkAttachmentAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NetworkAttachmentAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NetworkAttachmentAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NetworkAttachmentAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NetworkAttachmentAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NetworkAttachmentAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NetworkAttachmentAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NetworkAttachmentAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NetworkAttachmentAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NetworkAttachmentAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NetworkAttachmentAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NetworkAttachmentAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NetworkAttachmentAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NetworkAttachmentAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NetworkAttachmentAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NetworkAttachmentAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NetworkAttachmentAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NetworkAttachmentAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkAttachmentAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NetworkAttachmentAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkAttachmentAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkAttachmentListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NetworkAttachmentListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NetworkAttachmentListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkAttachmentListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NetworkAttachmentListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NetworkAttachmentListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NetworkAttachmentListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NetworkAttachmentListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NetworkAttachmentListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NetworkAttachmentListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NetworkAttachmentListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NetworkAttachmentListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NetworkAttachmentListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NetworkAttachmentListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NetworkAttachmentListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NetworkAttachmentListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NetworkAttachmentListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NetworkAttachmentListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NetworkAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NetworkAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NetworkAttachmentListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NetworkAttachmentListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NetworkAttachmentListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NetworkAttachmentListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NetworkAttachmentListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NetworkAttachmentListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NetworkAttachmentListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NetworkAttachmentListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NetworkAttachmentListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NetworkAttachmentListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NetworkAttachmentListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkAttachmentListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NetworkAttachmentListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NetworkAttachmentListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NetworkAttachmentListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NetworkAttachmentListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NetworkAttachmentListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NetworkAttachmentListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NetworkAttachmentListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NetworkAttachmentListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NetworkAttachmentListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NetworkAttachmentListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NetworkAttachmentListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NetworkAttachmentListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NetworkAttachmentListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NetworkAttachmentListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NetworkAttachmentListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NetworkAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NetworkAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NetworkAttachmentListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NetworkAttachmentListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NetworkAttachmentListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NetworkAttachmentListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NetworkAttachmentListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NetworkAttachmentListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NetworkAttachmentListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NetworkAttachmentListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NetworkAttachmentListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NetworkAttachmentListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NetworkAttachmentListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkAttachmentListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkAttachmentsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NetworkAttachmentsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NetworkAttachmentsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkAttachmentsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NetworkAttachmentsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NetworkAttachmentsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NetworkAttachmentsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NetworkAttachmentsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NetworkAttachmentsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NetworkAttachmentsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NetworkAttachmentsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NetworkAttachmentsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NetworkAttachmentsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NetworkAttachmentsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NetworkAttachmentsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NetworkAttachmentsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NetworkAttachmentsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NetworkAttachmentsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NetworkAttachmentsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NetworkAttachmentsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NetworkAttachmentsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NetworkAttachmentsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NetworkAttachmentsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NetworkAttachmentsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NetworkAttachmentsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkAttachmentsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NetworkAttachmentsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkAttachmentsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkEdgeSecurityServicesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NetworkEdgeSecurityServicesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NetworkEdgeSecurityServicesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NetworkEdgeSecurityServicesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkEdgeSecurityServicesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NetworkEdgeSecurityServicesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkEdgeSecurityServicesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkEndpointGroupAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NetworkEndpointGroupAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NetworkEndpointGroupAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkEndpointGroupAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NetworkEndpointGroupAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkEndpointGroupAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NetworkEndpointGroupAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkEndpointGroupAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkEndpointGroupListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NetworkEndpointGroupListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NetworkEndpointGroupListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkEndpointGroupListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NetworkEndpointGroupListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NetworkEndpointGroupListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NetworkEndpointGroupListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NetworkEndpointGroupListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NetworkEndpointGroupListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NetworkEndpointGroupListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NetworkEndpointGroupListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NetworkEndpointGroupListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NetworkEndpointGroupListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NetworkEndpointGroupListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NetworkEndpointGroupListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NetworkEndpointGroupListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NetworkEndpointGroupListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NetworkEndpointGroupListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NetworkEndpointGroupListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NetworkEndpointGroupListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NetworkEndpointGroupListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NetworkEndpointGroupListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NetworkEndpointGroupListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NetworkEndpointGroupListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NetworkEndpointGroupListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NetworkEndpointGroupListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NetworkEndpointGroupListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NetworkEndpointGroupListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NetworkEndpointGroupListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NetworkEndpointGroupListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NetworkEndpointGroupListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkEndpointGroupListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NetworkEndpointGroupListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NetworkEndpointGroupListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NetworkEndpointGroupListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NetworkEndpointGroupListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NetworkEndpointGroupListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NetworkEndpointGroupListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NetworkEndpointGroupListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NetworkEndpointGroupListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NetworkEndpointGroupListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NetworkEndpointGroupListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NetworkEndpointGroupListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NetworkEndpointGroupListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NetworkEndpointGroupListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NetworkEndpointGroupListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NetworkEndpointGroupListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NetworkEndpointGroupListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NetworkEndpointGroupListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NetworkEndpointGroupListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NetworkEndpointGroupListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NetworkEndpointGroupListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NetworkEndpointGroupListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NetworkEndpointGroupListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NetworkEndpointGroupListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NetworkEndpointGroupListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NetworkEndpointGroupListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NetworkEndpointGroupListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NetworkEndpointGroupListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NetworkEndpointGroupListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkEndpointGroupListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkEndpointGroupsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NetworkEndpointGroupsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NetworkEndpointGroupsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkEndpointGroupsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NetworkEndpointGroupsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NetworkEndpointGroupsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NetworkEndpointGroupsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NetworkEndpointGroupsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NetworkEndpointGroupsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NetworkEndpointGroupsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NetworkEndpointGroupsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NetworkEndpointGroupsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NetworkEndpointGroupsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NetworkEndpointGroupsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NetworkEndpointGroupsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NetworkEndpointGroupsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NetworkEndpointGroupsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NetworkEndpointGroupsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NetworkEndpointGroupsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NetworkEndpointGroupsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NetworkEndpointGroupsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NetworkEndpointGroupsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NetworkEndpointGroupsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NetworkEndpointGroupsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NetworkEndpointGroupsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkEndpointGroupsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NetworkEndpointGroupsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkEndpointGroupsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NetworkListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NetworkListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NetworkListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NetworkListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NetworkListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NetworkListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NetworkListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NetworkListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NetworkListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NetworkListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NetworkListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NetworkListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NetworkListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NetworkListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NetworkListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NetworkListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NetworkListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NetworkListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NetworkListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NetworkListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NetworkListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NetworkListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NetworkListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NetworkListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NetworkListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NetworkListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NetworkListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NetworkListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NetworkListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NetworkListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NetworkListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NetworkListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NetworkListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NetworkListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NetworkListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NetworkListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NetworkListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NetworkListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NetworkListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NetworkListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NetworkListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NetworkListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NetworkListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NetworkListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NetworkListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NetworkListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NetworkListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NetworkListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NetworkListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NetworkListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NetworkListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NetworkListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NetworkListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NetworkListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NetworkListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NetworkListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NetworkListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeGroupAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NodeGroupAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NodeGroupAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeGroupAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NodeGroupAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NodeGroupAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NodeGroupAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NodeGroupAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NodeGroupAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NodeGroupAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NodeGroupAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NodeGroupAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NodeGroupAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NodeGroupAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NodeGroupAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NodeGroupAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NodeGroupAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NodeGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NodeGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NodeGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NodeGroupAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NodeGroupAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NodeGroupAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NodeGroupAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NodeGroupAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NodeGroupAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NodeGroupAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NodeGroupAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NodeGroupAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NodeGroupAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NodeGroupAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeGroupAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NodeGroupAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NodeGroupAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NodeGroupAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NodeGroupAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NodeGroupAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NodeGroupAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NodeGroupAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NodeGroupAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NodeGroupAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NodeGroupAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NodeGroupAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NodeGroupAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NodeGroupAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NodeGroupAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NodeGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NodeGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NodeGroupAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NodeGroupAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NodeGroupAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NodeGroupAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NodeGroupAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NodeGroupAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NodeGroupAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NodeGroupAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NodeGroupAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NodeGroupAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NodeGroupAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NodeGroupAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeGroupAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeGroupListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NodeGroupListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NodeGroupListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeGroupListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NodeGroupListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NodeGroupListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NodeGroupListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NodeGroupListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NodeGroupListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NodeGroupListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NodeGroupListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NodeGroupListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NodeGroupListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NodeGroupListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NodeGroupListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NodeGroupListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NodeGroupListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NodeGroupListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NodeGroupListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NodeGroupListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NodeGroupListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NodeGroupListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NodeGroupListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NodeGroupListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NodeGroupListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NodeGroupListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NodeGroupListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NodeGroupListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NodeGroupListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NodeGroupListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NodeGroupListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeGroupListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NodeGroupListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NodeGroupListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NodeGroupListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NodeGroupListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NodeGroupListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NodeGroupListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NodeGroupListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NodeGroupListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NodeGroupListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NodeGroupListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NodeGroupListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NodeGroupListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NodeGroupListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NodeGroupListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NodeGroupListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NodeGroupListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NodeGroupListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NodeGroupListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NodeGroupListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NodeGroupListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NodeGroupListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NodeGroupListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NodeGroupListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NodeGroupListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NodeGroupListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NodeGroupListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NodeGroupListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NodeGroupListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeGroupListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeGroupsListNodesWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NodeGroupsListNodesWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NodeGroupsListNodesWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeGroupsListNodesWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NodeGroupsListNodesWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NodeGroupsListNodesWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NodeGroupsListNodesWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NodeGroupsListNodesWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NodeGroupsListNodesWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NodeGroupsListNodesWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NodeGroupsListNodesWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NodeGroupsListNodesWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NodeGroupsListNodesWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NodeGroupsListNodesWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NodeGroupsListNodesWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NodeGroupsListNodesWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NodeGroupsListNodesWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NodeGroupsListNodesWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NodeGroupsListNodesWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NodeGroupsListNodesWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NodeGroupsListNodesWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NodeGroupsListNodesWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NodeGroupsListNodesWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NodeGroupsListNodesWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NodeGroupsListNodesWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NodeGroupsListNodesWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NodeGroupsListNodesWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NodeGroupsListNodesWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NodeGroupsListNodesWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NodeGroupsListNodesWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NodeGroupsListNodesWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeGroupsListNodesWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NodeGroupsListNodesWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NodeGroupsListNodesWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NodeGroupsListNodesWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NodeGroupsListNodesWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NodeGroupsListNodesWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NodeGroupsListNodesWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NodeGroupsListNodesWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NodeGroupsListNodesWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NodeGroupsListNodesWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NodeGroupsListNodesWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NodeGroupsListNodesWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NodeGroupsListNodesWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NodeGroupsListNodesWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NodeGroupsListNodesWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NodeGroupsListNodesWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NodeGroupsListNodesWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NodeGroupsListNodesWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NodeGroupsListNodesWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NodeGroupsListNodesWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NodeGroupsListNodesWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NodeGroupsListNodesWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NodeGroupsListNodesWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NodeGroupsListNodesWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NodeGroupsListNodesWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NodeGroupsListNodesWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NodeGroupsListNodesWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NodeGroupsListNodesWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NodeGroupsListNodesWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeGroupsListNodesWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeGroupsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NodeGroupsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NodeGroupsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeGroupsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NodeGroupsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NodeGroupsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NodeGroupsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NodeGroupsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NodeGroupsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NodeGroupsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NodeGroupsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NodeGroupsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NodeGroupsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NodeGroupsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NodeGroupsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NodeGroupsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NodeGroupsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NodeGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NodeGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NodeGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NodeGroupsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NodeGroupsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NodeGroupsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NodeGroupsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NodeGroupsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NodeGroupsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NodeGroupsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NodeGroupsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NodeGroupsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NodeGroupsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NodeGroupsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeGroupsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NodeGroupsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NodeGroupsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NodeGroupsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NodeGroupsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NodeGroupsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NodeGroupsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NodeGroupsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NodeGroupsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NodeGroupsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NodeGroupsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NodeGroupsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NodeGroupsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NodeGroupsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NodeGroupsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NodeGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NodeGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NodeGroupsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NodeGroupsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NodeGroupsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NodeGroupsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NodeGroupsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NodeGroupsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NodeGroupsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NodeGroupsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NodeGroupsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NodeGroupsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NodeGroupsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NodeGroupsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeGroupsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeTemplateAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NodeTemplateAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NodeTemplateAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeTemplateAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NodeTemplateAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NodeTemplateAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NodeTemplateAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NodeTemplateAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NodeTemplateAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NodeTemplateAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NodeTemplateAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NodeTemplateAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NodeTemplateAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NodeTemplateAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NodeTemplateAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NodeTemplateAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NodeTemplateAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NodeTemplateAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NodeTemplateAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NodeTemplateAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NodeTemplateAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NodeTemplateAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NodeTemplateAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NodeTemplateAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NodeTemplateAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeTemplateAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NodeTemplateAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NodeTemplateAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NodeTemplateAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NodeTemplateAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NodeTemplateAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NodeTemplateAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NodeTemplateAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NodeTemplateAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NodeTemplateAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NodeTemplateAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NodeTemplateAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NodeTemplateAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NodeTemplateAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NodeTemplateAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NodeTemplateAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NodeTemplateAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NodeTemplateAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NodeTemplateAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NodeTemplateAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NodeTemplateAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NodeTemplateAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NodeTemplateAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NodeTemplateAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeTemplateAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeTemplateListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NodeTemplateListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NodeTemplateListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeTemplateListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NodeTemplateListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NodeTemplateListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NodeTemplateListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NodeTemplateListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NodeTemplateListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NodeTemplateListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NodeTemplateListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NodeTemplateListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NodeTemplateListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NodeTemplateListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NodeTemplateListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NodeTemplateListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NodeTemplateListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NodeTemplateListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NodeTemplateListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NodeTemplateListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NodeTemplateListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NodeTemplateListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NodeTemplateListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NodeTemplateListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NodeTemplateListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NodeTemplateListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NodeTemplateListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NodeTemplateListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NodeTemplateListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NodeTemplateListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NodeTemplateListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeTemplateListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NodeTemplateListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NodeTemplateListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NodeTemplateListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NodeTemplateListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NodeTemplateListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NodeTemplateListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NodeTemplateListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NodeTemplateListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NodeTemplateListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NodeTemplateListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NodeTemplateListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NodeTemplateListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NodeTemplateListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NodeTemplateListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NodeTemplateListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NodeTemplateListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NodeTemplateListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NodeTemplateListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NodeTemplateListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NodeTemplateListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NodeTemplateListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NodeTemplateListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NodeTemplateListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NodeTemplateListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NodeTemplateListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NodeTemplateListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NodeTemplateListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NodeTemplateListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeTemplateListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeTemplatesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NodeTemplatesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NodeTemplatesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeTemplatesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NodeTemplatesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NodeTemplatesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NodeTemplatesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NodeTemplatesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NodeTemplatesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NodeTemplatesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NodeTemplatesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NodeTemplatesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NodeTemplatesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NodeTemplatesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NodeTemplatesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NodeTemplatesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NodeTemplatesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NodeTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NodeTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NodeTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NodeTemplatesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NodeTemplatesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NodeTemplatesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NodeTemplatesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NodeTemplatesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NodeTemplatesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NodeTemplatesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NodeTemplatesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NodeTemplatesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NodeTemplatesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NodeTemplatesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeTemplatesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NodeTemplatesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NodeTemplatesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NodeTemplatesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NodeTemplatesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NodeTemplatesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NodeTemplatesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NodeTemplatesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NodeTemplatesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NodeTemplatesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NodeTemplatesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NodeTemplatesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NodeTemplatesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NodeTemplatesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NodeTemplatesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NodeTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NodeTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NodeTemplatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NodeTemplatesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NodeTemplatesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NodeTemplatesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NodeTemplatesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NodeTemplatesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NodeTemplatesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NodeTemplatesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NodeTemplatesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NodeTemplatesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NodeTemplatesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NodeTemplatesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeTemplatesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeTypeAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NodeTypeAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NodeTypeAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeTypeAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NodeTypeAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NodeTypeAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NodeTypeAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NodeTypeAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NodeTypeAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NodeTypeAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NodeTypeAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NodeTypeAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NodeTypeAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NodeTypeAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NodeTypeAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NodeTypeAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NodeTypeAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NodeTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NodeTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NodeTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NodeTypeAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NodeTypeAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NodeTypeAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NodeTypeAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NodeTypeAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NodeTypeAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NodeTypeAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NodeTypeAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NodeTypeAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NodeTypeAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NodeTypeAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeTypeAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NodeTypeAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NodeTypeAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NodeTypeAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NodeTypeAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NodeTypeAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NodeTypeAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NodeTypeAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NodeTypeAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NodeTypeAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NodeTypeAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NodeTypeAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NodeTypeAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NodeTypeAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NodeTypeAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NodeTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NodeTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NodeTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NodeTypeAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NodeTypeAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NodeTypeAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NodeTypeAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NodeTypeAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NodeTypeAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NodeTypeAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NodeTypeAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NodeTypeAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NodeTypeAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NodeTypeAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeTypeAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeTypeListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NodeTypeListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NodeTypeListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeTypeListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NodeTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NodeTypeListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NodeTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NodeTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NodeTypeListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NodeTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NodeTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NodeTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NodeTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NodeTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NodeTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NodeTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NodeTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NodeTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NodeTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NodeTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NodeTypeListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NodeTypeListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NodeTypeListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NodeTypeListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NodeTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NodeTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NodeTypeListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NodeTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NodeTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NodeTypeListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NodeTypeListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeTypeListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NodeTypeListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NodeTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NodeTypeListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NodeTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NodeTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NodeTypeListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NodeTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NodeTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NodeTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NodeTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NodeTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NodeTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NodeTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NodeTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NodeTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NodeTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NodeTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NodeTypeListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NodeTypeListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NodeTypeListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NodeTypeListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NodeTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NodeTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NodeTypeListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NodeTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NodeTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NodeTypeListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NodeTypeListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeTypeListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NodeTypesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NodeTypesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NodeTypesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NodeTypesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NodeTypesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NodeTypesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NodeTypesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NodeTypesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NodeTypesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NodeTypesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NodeTypesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NodeTypesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NodeTypesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NodeTypesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NodeTypesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NodeTypesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NodeTypesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NodeTypesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NodeTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NodeTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NodeTypesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NodeTypesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NodeTypesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NodeTypesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NodeTypesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NodeTypesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NodeTypesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NodeTypesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NodeTypesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NodeTypesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NodeTypesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NodeTypesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NodeTypesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NodeTypesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NodeTypesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NodeTypesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NodeTypesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NodeTypesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NodeTypesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NodeTypesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NodeTypesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NodeTypesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NodeTypesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NodeTypesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NodeTypesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NodeTypesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NodeTypesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NodeTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NodeTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NodeTypesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NodeTypesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NodeTypesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NodeTypesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NodeTypesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NodeTypesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NodeTypesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NodeTypesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NodeTypesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NodeTypesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NodeTypesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NodeTypesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NotificationEndpointListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum NotificationEndpointListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for NotificationEndpointListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NotificationEndpointListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            NotificationEndpointListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            NotificationEndpointListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            NotificationEndpointListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            NotificationEndpointListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            NotificationEndpointListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            NotificationEndpointListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            NotificationEndpointListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            NotificationEndpointListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            NotificationEndpointListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            NotificationEndpointListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            NotificationEndpointListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            NotificationEndpointListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            NotificationEndpointListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            NotificationEndpointListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            NotificationEndpointListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            NotificationEndpointListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            NotificationEndpointListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            NotificationEndpointListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            NotificationEndpointListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            NotificationEndpointListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            NotificationEndpointListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            NotificationEndpointListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            NotificationEndpointListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            NotificationEndpointListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            NotificationEndpointListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            NotificationEndpointListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            NotificationEndpointListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for NotificationEndpointListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(NotificationEndpointListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(NotificationEndpointListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(NotificationEndpointListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(NotificationEndpointListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(NotificationEndpointListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(NotificationEndpointListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(NotificationEndpointListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(NotificationEndpointListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(NotificationEndpointListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(NotificationEndpointListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(NotificationEndpointListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(NotificationEndpointListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(NotificationEndpointListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(NotificationEndpointListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(NotificationEndpointListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(NotificationEndpointListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(NotificationEndpointListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(NotificationEndpointListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(NotificationEndpointListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(NotificationEndpointListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(NotificationEndpointListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(NotificationEndpointListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(NotificationEndpointListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(NotificationEndpointListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(NotificationEndpointListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(NotificationEndpointListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(NotificationEndpointListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(NotificationEndpointListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NotificationEndpointListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region OperationWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum OperationWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for OperationWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            OperationWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            OperationWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            OperationWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            OperationWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            OperationWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            OperationWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            OperationWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            OperationWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            OperationWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            OperationWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            OperationWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            OperationWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            OperationWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            OperationWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            OperationWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            OperationWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            OperationWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            OperationWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            OperationWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            OperationWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            OperationWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            OperationWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            OperationWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            OperationWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            OperationWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            OperationWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            OperationWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            OperationWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for OperationWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(OperationWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(OperationWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(OperationWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(OperationWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(OperationWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(OperationWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(OperationWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(OperationWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(OperationWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(OperationWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(OperationWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(OperationWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(OperationWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(OperationWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(OperationWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(OperationWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(OperationWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(OperationWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(OperationWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(OperationWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(OperationWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(OperationWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(OperationWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(OperationWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(OperationWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(OperationWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(OperationWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(OperationWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a OperationWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region OperationAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum OperationAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for OperationAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            OperationAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            OperationAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            OperationAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            OperationAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            OperationAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            OperationAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            OperationAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            OperationAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            OperationAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            OperationAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            OperationAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            OperationAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            OperationAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            OperationAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            OperationAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            OperationAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            OperationAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            OperationAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            OperationAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            OperationAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            OperationAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            OperationAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            OperationAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            OperationAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            OperationAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            OperationAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            OperationAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            OperationAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for OperationAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(OperationAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(OperationAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(OperationAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(OperationAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(OperationAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(OperationAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(OperationAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(OperationAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(OperationAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(OperationAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(OperationAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(OperationAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(OperationAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(OperationAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(OperationAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(OperationAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(OperationAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(OperationAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(OperationAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(OperationAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(OperationAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(OperationAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(OperationAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(OperationAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(OperationAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(OperationAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(OperationAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(OperationAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a OperationAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region OperationListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum OperationListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for OperationListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            OperationListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            OperationListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            OperationListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            OperationListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            OperationListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            OperationListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            OperationListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            OperationListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            OperationListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            OperationListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            OperationListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            OperationListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            OperationListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            OperationListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            OperationListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            OperationListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            OperationListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            OperationListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            OperationListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            OperationListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            OperationListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            OperationListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            OperationListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            OperationListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            OperationListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            OperationListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            OperationListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            OperationListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for OperationListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(OperationListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(OperationListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(OperationListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(OperationListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(OperationListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(OperationListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(OperationListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(OperationListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(OperationListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(OperationListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(OperationListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(OperationListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(OperationListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(OperationListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(OperationListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(OperationListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(OperationListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(OperationListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(OperationListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(OperationListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(OperationListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(OperationListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(OperationListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(OperationListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(OperationListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(OperationListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(OperationListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(OperationListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a OperationListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region OperationsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum OperationsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for OperationsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            OperationsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            OperationsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            OperationsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            OperationsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            OperationsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            OperationsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            OperationsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            OperationsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            OperationsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            OperationsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            OperationsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            OperationsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            OperationsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            OperationsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            OperationsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            OperationsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            OperationsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            OperationsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            OperationsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            OperationsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            OperationsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            OperationsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            OperationsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            OperationsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            OperationsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            OperationsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            OperationsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            OperationsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for OperationsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(OperationsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(OperationsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(OperationsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(OperationsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(OperationsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(OperationsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(OperationsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(OperationsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(OperationsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(OperationsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(OperationsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(OperationsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(OperationsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(OperationsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(OperationsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(OperationsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(OperationsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(OperationsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(OperationsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(OperationsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(OperationsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(OperationsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(OperationsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(OperationsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(OperationsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(OperationsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(OperationsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(OperationsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a OperationsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PacketMirroringAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum PacketMirroringAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for PacketMirroringAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PacketMirroringAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            PacketMirroringAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            PacketMirroringAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            PacketMirroringAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            PacketMirroringAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            PacketMirroringAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            PacketMirroringAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            PacketMirroringAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            PacketMirroringAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            PacketMirroringAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            PacketMirroringAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            PacketMirroringAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            PacketMirroringAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            PacketMirroringAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            PacketMirroringAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            PacketMirroringAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            PacketMirroringAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            PacketMirroringAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            PacketMirroringAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            PacketMirroringAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            PacketMirroringAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            PacketMirroringAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for PacketMirroringAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(PacketMirroringAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(PacketMirroringAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(PacketMirroringAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(PacketMirroringAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(PacketMirroringAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(PacketMirroringAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(PacketMirroringAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(PacketMirroringAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(PacketMirroringAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(PacketMirroringAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(PacketMirroringAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(PacketMirroringAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(PacketMirroringAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(PacketMirroringAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(PacketMirroringAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(PacketMirroringAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(PacketMirroringAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(PacketMirroringAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(PacketMirroringAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(PacketMirroringAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(PacketMirroringAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(PacketMirroringAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(PacketMirroringAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PacketMirroringAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PacketMirroringListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum PacketMirroringListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for PacketMirroringListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PacketMirroringListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            PacketMirroringListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            PacketMirroringListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            PacketMirroringListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            PacketMirroringListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            PacketMirroringListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            PacketMirroringListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            PacketMirroringListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            PacketMirroringListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            PacketMirroringListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            PacketMirroringListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            PacketMirroringListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            PacketMirroringListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            PacketMirroringListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            PacketMirroringListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            PacketMirroringListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            PacketMirroringListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            PacketMirroringListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            PacketMirroringListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            PacketMirroringListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            PacketMirroringListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            PacketMirroringListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            PacketMirroringListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            PacketMirroringListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            PacketMirroringListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            PacketMirroringListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            PacketMirroringListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            PacketMirroringListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for PacketMirroringListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(PacketMirroringListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(PacketMirroringListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(PacketMirroringListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(PacketMirroringListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(PacketMirroringListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(PacketMirroringListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(PacketMirroringListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(PacketMirroringListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(PacketMirroringListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(PacketMirroringListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(PacketMirroringListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(PacketMirroringListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(PacketMirroringListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(PacketMirroringListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(PacketMirroringListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(PacketMirroringListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(PacketMirroringListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(PacketMirroringListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(PacketMirroringListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(PacketMirroringListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(PacketMirroringListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(PacketMirroringListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(PacketMirroringListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(PacketMirroringListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(PacketMirroringListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(PacketMirroringListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(PacketMirroringListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(PacketMirroringListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PacketMirroringListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PacketMirroringsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum PacketMirroringsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for PacketMirroringsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PacketMirroringsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            PacketMirroringsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            PacketMirroringsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            PacketMirroringsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            PacketMirroringsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            PacketMirroringsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            PacketMirroringsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            PacketMirroringsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            PacketMirroringsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            PacketMirroringsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            PacketMirroringsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            PacketMirroringsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            PacketMirroringsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            PacketMirroringsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            PacketMirroringsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            PacketMirroringsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            PacketMirroringsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            PacketMirroringsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            PacketMirroringsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            PacketMirroringsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            PacketMirroringsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            PacketMirroringsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            PacketMirroringsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            PacketMirroringsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            PacketMirroringsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            PacketMirroringsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            PacketMirroringsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            PacketMirroringsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for PacketMirroringsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(PacketMirroringsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(PacketMirroringsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(PacketMirroringsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(PacketMirroringsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(PacketMirroringsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(PacketMirroringsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(PacketMirroringsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(PacketMirroringsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(PacketMirroringsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(PacketMirroringsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(PacketMirroringsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(PacketMirroringsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(PacketMirroringsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(PacketMirroringsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(PacketMirroringsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(PacketMirroringsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(PacketMirroringsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(PacketMirroringsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(PacketMirroringsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(PacketMirroringsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(PacketMirroringsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(PacketMirroringsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(PacketMirroringsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(PacketMirroringsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(PacketMirroringsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(PacketMirroringsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(PacketMirroringsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(PacketMirroringsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PacketMirroringsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PublicAdvertisedPrefixListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum PublicAdvertisedPrefixListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for PublicAdvertisedPrefixListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PublicAdvertisedPrefixListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            PublicAdvertisedPrefixListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            PublicAdvertisedPrefixListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            PublicAdvertisedPrefixListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            PublicAdvertisedPrefixListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            PublicAdvertisedPrefixListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            PublicAdvertisedPrefixListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            PublicAdvertisedPrefixListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            PublicAdvertisedPrefixListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            PublicAdvertisedPrefixListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            PublicAdvertisedPrefixListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            PublicAdvertisedPrefixListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            PublicAdvertisedPrefixListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            PublicAdvertisedPrefixListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            PublicAdvertisedPrefixListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            PublicAdvertisedPrefixListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            PublicAdvertisedPrefixListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            PublicAdvertisedPrefixListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            PublicAdvertisedPrefixListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            PublicAdvertisedPrefixListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            PublicAdvertisedPrefixListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            PublicAdvertisedPrefixListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for PublicAdvertisedPrefixListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(PublicAdvertisedPrefixListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PublicAdvertisedPrefixListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PublicDelegatedPrefixAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum PublicDelegatedPrefixAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for PublicDelegatedPrefixAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            PublicDelegatedPrefixAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for PublicDelegatedPrefixAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(PublicDelegatedPrefixAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PublicDelegatedPrefixAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PublicDelegatedPrefixListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum PublicDelegatedPrefixListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for PublicDelegatedPrefixListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PublicDelegatedPrefixListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            PublicDelegatedPrefixListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            PublicDelegatedPrefixListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            PublicDelegatedPrefixListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            PublicDelegatedPrefixListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            PublicDelegatedPrefixListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            PublicDelegatedPrefixListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            PublicDelegatedPrefixListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            PublicDelegatedPrefixListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            PublicDelegatedPrefixListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            PublicDelegatedPrefixListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            PublicDelegatedPrefixListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            PublicDelegatedPrefixListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            PublicDelegatedPrefixListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            PublicDelegatedPrefixListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            PublicDelegatedPrefixListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            PublicDelegatedPrefixListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            PublicDelegatedPrefixListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            PublicDelegatedPrefixListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            PublicDelegatedPrefixListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            PublicDelegatedPrefixListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            PublicDelegatedPrefixListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for PublicDelegatedPrefixListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(PublicDelegatedPrefixListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(PublicDelegatedPrefixListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(PublicDelegatedPrefixListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(PublicDelegatedPrefixListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(PublicDelegatedPrefixListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(PublicDelegatedPrefixListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(PublicDelegatedPrefixListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(PublicDelegatedPrefixListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(PublicDelegatedPrefixListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(PublicDelegatedPrefixListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(PublicDelegatedPrefixListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(PublicDelegatedPrefixListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(PublicDelegatedPrefixListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(PublicDelegatedPrefixListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(PublicDelegatedPrefixListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(PublicDelegatedPrefixListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(PublicDelegatedPrefixListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(PublicDelegatedPrefixListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(PublicDelegatedPrefixListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(PublicDelegatedPrefixListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(PublicDelegatedPrefixListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(PublicDelegatedPrefixListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(PublicDelegatedPrefixListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PublicDelegatedPrefixListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region PublicDelegatedPrefixesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum PublicDelegatedPrefixesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for PublicDelegatedPrefixesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            PublicDelegatedPrefixesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            PublicDelegatedPrefixesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for PublicDelegatedPrefixesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(PublicDelegatedPrefixesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a PublicDelegatedPrefixesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionQuotaStatusWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RegionQuotaStatusWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RegionQuotaStatusWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionQuotaStatusWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RegionQuotaStatusWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RegionQuotaStatusWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RegionQuotaStatusWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RegionQuotaStatusWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RegionQuotaStatusWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RegionQuotaStatusWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RegionQuotaStatusWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RegionQuotaStatusWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RegionQuotaStatusWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RegionQuotaStatusWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RegionQuotaStatusWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RegionQuotaStatusWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RegionQuotaStatusWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RegionQuotaStatusWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RegionQuotaStatusWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RegionQuotaStatusWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RegionQuotaStatusWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RegionQuotaStatusWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RegionQuotaStatusWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RegionQuotaStatusWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RegionQuotaStatusWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RegionQuotaStatusWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RegionQuotaStatusWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RegionQuotaStatusWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RegionQuotaStatusWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RegionQuotaStatusWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RegionQuotaStatusWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionQuotaStatusWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RegionQuotaStatusWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RegionQuotaStatusWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RegionQuotaStatusWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RegionQuotaStatusWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RegionQuotaStatusWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RegionQuotaStatusWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RegionQuotaStatusWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RegionQuotaStatusWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RegionQuotaStatusWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RegionQuotaStatusWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RegionQuotaStatusWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RegionQuotaStatusWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RegionQuotaStatusWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RegionQuotaStatusWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RegionQuotaStatusWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RegionQuotaStatusWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RegionQuotaStatusWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RegionQuotaStatusWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RegionQuotaStatusWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RegionQuotaStatusWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RegionQuotaStatusWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RegionQuotaStatusWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RegionQuotaStatusWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RegionQuotaStatusWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RegionQuotaStatusWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RegionQuotaStatusWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RegionQuotaStatusWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RegionQuotaStatusWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionQuotaStatusWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionAutoscalerListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RegionAutoscalerListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RegionAutoscalerListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionAutoscalerListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RegionAutoscalerListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RegionAutoscalerListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RegionAutoscalerListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RegionAutoscalerListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RegionAutoscalerListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RegionAutoscalerListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RegionAutoscalerListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RegionAutoscalerListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RegionAutoscalerListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RegionAutoscalerListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RegionAutoscalerListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RegionAutoscalerListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RegionAutoscalerListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RegionAutoscalerListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RegionAutoscalerListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RegionAutoscalerListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RegionAutoscalerListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RegionAutoscalerListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RegionAutoscalerListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RegionAutoscalerListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RegionAutoscalerListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RegionAutoscalerListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RegionAutoscalerListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RegionAutoscalerListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RegionAutoscalerListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RegionAutoscalerListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RegionAutoscalerListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionAutoscalerListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RegionAutoscalerListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RegionAutoscalerListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RegionAutoscalerListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RegionAutoscalerListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RegionAutoscalerListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RegionAutoscalerListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RegionAutoscalerListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RegionAutoscalerListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RegionAutoscalerListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RegionAutoscalerListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RegionAutoscalerListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RegionAutoscalerListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RegionAutoscalerListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RegionAutoscalerListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RegionAutoscalerListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RegionAutoscalerListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RegionAutoscalerListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RegionAutoscalerListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RegionAutoscalerListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RegionAutoscalerListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RegionAutoscalerListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RegionAutoscalerListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RegionAutoscalerListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RegionAutoscalerListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RegionAutoscalerListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RegionAutoscalerListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RegionAutoscalerListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RegionAutoscalerListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionAutoscalerListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionDiskTypeListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RegionDiskTypeListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RegionDiskTypeListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionDiskTypeListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RegionDiskTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RegionDiskTypeListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RegionDiskTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RegionDiskTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RegionDiskTypeListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RegionDiskTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RegionDiskTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RegionDiskTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RegionDiskTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RegionDiskTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RegionDiskTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RegionDiskTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RegionDiskTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RegionDiskTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RegionDiskTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RegionDiskTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RegionDiskTypeListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RegionDiskTypeListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RegionDiskTypeListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RegionDiskTypeListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RegionDiskTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RegionDiskTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RegionDiskTypeListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RegionDiskTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RegionDiskTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RegionDiskTypeListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RegionDiskTypeListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionDiskTypeListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RegionDiskTypeListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RegionDiskTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RegionDiskTypeListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RegionDiskTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RegionDiskTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RegionDiskTypeListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RegionDiskTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RegionDiskTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RegionDiskTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RegionDiskTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RegionDiskTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RegionDiskTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RegionDiskTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RegionDiskTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RegionDiskTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RegionDiskTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RegionDiskTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RegionDiskTypeListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RegionDiskTypeListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RegionDiskTypeListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RegionDiskTypeListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RegionDiskTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RegionDiskTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RegionDiskTypeListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RegionDiskTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RegionDiskTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RegionDiskTypeListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RegionDiskTypeListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionDiskTypeListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionInstanceGroupListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RegionInstanceGroupListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RegionInstanceGroupListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionInstanceGroupListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RegionInstanceGroupListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RegionInstanceGroupListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RegionInstanceGroupListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RegionInstanceGroupListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RegionInstanceGroupListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RegionInstanceGroupListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RegionInstanceGroupListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RegionInstanceGroupListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RegionInstanceGroupListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RegionInstanceGroupListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RegionInstanceGroupListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RegionInstanceGroupListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RegionInstanceGroupListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RegionInstanceGroupListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RegionInstanceGroupListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RegionInstanceGroupListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RegionInstanceGroupListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RegionInstanceGroupListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RegionInstanceGroupListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RegionInstanceGroupListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RegionInstanceGroupListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RegionInstanceGroupListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RegionInstanceGroupListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RegionInstanceGroupListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RegionInstanceGroupListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RegionInstanceGroupListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RegionInstanceGroupListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionInstanceGroupListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RegionInstanceGroupListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RegionInstanceGroupListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RegionInstanceGroupListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RegionInstanceGroupListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RegionInstanceGroupListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RegionInstanceGroupListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RegionInstanceGroupListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RegionInstanceGroupListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RegionInstanceGroupListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RegionInstanceGroupListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RegionInstanceGroupListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RegionInstanceGroupListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RegionInstanceGroupListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RegionInstanceGroupListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RegionInstanceGroupListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RegionInstanceGroupListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RegionInstanceGroupListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RegionInstanceGroupListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RegionInstanceGroupListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RegionInstanceGroupListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RegionInstanceGroupListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RegionInstanceGroupListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RegionInstanceGroupListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RegionInstanceGroupListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RegionInstanceGroupListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RegionInstanceGroupListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RegionInstanceGroupListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RegionInstanceGroupListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionInstanceGroupListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionInstanceGroupManagerListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RegionInstanceGroupManagerListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RegionInstanceGroupManagerListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionInstanceGroupManagerListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RegionInstanceGroupManagerListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RegionInstanceGroupManagerListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RegionInstanceGroupManagerListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RegionInstanceGroupManagerListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RegionInstanceGroupManagerListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RegionInstanceGroupManagerListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RegionInstanceGroupManagerListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RegionInstanceGroupManagerListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RegionInstanceGroupManagerListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RegionInstanceGroupManagerListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RegionInstanceGroupManagerListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RegionInstanceGroupManagerListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RegionInstanceGroupManagerListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RegionInstanceGroupManagerListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RegionInstanceGroupManagerListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RegionInstanceGroupManagerListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RegionInstanceGroupManagerListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RegionInstanceGroupManagerListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RegionInstanceGroupManagerListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RegionInstanceGroupManagerListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RegionInstanceGroupManagerListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionInstanceGroupManagerListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RegionInstanceGroupManagerListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionInstanceGroupManagerListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionInstanceGroupsListInstancesWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RegionInstanceGroupsListInstancesWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RegionInstanceGroupsListInstancesWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionInstanceGroupsListInstancesWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RegionInstanceGroupsListInstancesWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RegionInstanceGroupsListInstancesWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RegionInstanceGroupsListInstancesWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RegionInstanceGroupsListInstancesWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RegionInstanceGroupsListInstancesWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RegionInstanceGroupsListInstancesWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RegionInstanceGroupsListInstancesWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RegionInstanceGroupsListInstancesWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RegionInstanceGroupsListInstancesWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RegionInstanceGroupsListInstancesWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RegionInstanceGroupsListInstancesWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RegionInstanceGroupsListInstancesWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RegionInstanceGroupsListInstancesWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RegionInstanceGroupsListInstancesWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RegionInstanceGroupsListInstancesWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RegionInstanceGroupsListInstancesWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RegionInstanceGroupsListInstancesWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RegionInstanceGroupsListInstancesWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RegionInstanceGroupsListInstancesWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RegionInstanceGroupsListInstancesWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RegionInstanceGroupsListInstancesWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionInstanceGroupsListInstancesWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RegionInstanceGroupsListInstancesWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionInstanceGroupsListInstancesWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RegionListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RegionListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RegionListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RegionListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RegionListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RegionListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RegionListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RegionListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RegionListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RegionListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RegionListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RegionListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RegionListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RegionListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RegionListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RegionListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RegionListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RegionListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RegionListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RegionListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RegionListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RegionListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RegionListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RegionListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RegionListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RegionListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RegionListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RegionListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RegionListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RegionListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RegionListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RegionListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RegionListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RegionListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RegionListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RegionListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RegionListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RegionListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RegionListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RegionListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RegionListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RegionListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RegionListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RegionListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RegionListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RegionListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RegionListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RegionListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RegionListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RegionListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RegionListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RegionListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RegionListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RegionListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RegionListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RegionListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RegionListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RegionListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RegionListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RegionListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RegionListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ReservationAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ReservationAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ReservationAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ReservationAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ReservationAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ReservationAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ReservationAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ReservationAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ReservationAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ReservationAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ReservationAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ReservationAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ReservationAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ReservationAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ReservationAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ReservationAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ReservationAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ReservationAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ReservationAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ReservationAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ReservationAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ReservationAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ReservationAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ReservationAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ReservationAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ReservationAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ReservationAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ReservationAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ReservationAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ReservationAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ReservationAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ReservationAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ReservationAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ReservationAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ReservationAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ReservationAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ReservationAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ReservationAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ReservationAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ReservationAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ReservationAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ReservationAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ReservationAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ReservationAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ReservationAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ReservationAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ReservationAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ReservationAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ReservationAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ReservationAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ReservationAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ReservationAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ReservationAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ReservationAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ReservationAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ReservationAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ReservationAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ReservationAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ReservationAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ReservationAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ReservationAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ReservationListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ReservationListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ReservationListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ReservationListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ReservationListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ReservationListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ReservationListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ReservationListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ReservationListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ReservationListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ReservationListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ReservationListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ReservationListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ReservationListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ReservationListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ReservationListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ReservationListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ReservationListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ReservationListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ReservationListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ReservationListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ReservationListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ReservationListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ReservationListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ReservationListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ReservationListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ReservationListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ReservationListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ReservationListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ReservationListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ReservationListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ReservationListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ReservationListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ReservationListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ReservationListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ReservationListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ReservationListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ReservationListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ReservationListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ReservationListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ReservationListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ReservationListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ReservationListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ReservationListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ReservationListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ReservationListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ReservationListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ReservationListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ReservationListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ReservationListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ReservationListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ReservationListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ReservationListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ReservationListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ReservationListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ReservationListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ReservationListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ReservationListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ReservationListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ReservationListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ReservationListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ReservationsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ReservationsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ReservationsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ReservationsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ReservationsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ReservationsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ReservationsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ReservationsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ReservationsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ReservationsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ReservationsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ReservationsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ReservationsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ReservationsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ReservationsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ReservationsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ReservationsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ReservationsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ReservationsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ReservationsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ReservationsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ReservationsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ReservationsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ReservationsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ReservationsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ReservationsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ReservationsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ReservationsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ReservationsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ReservationsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ReservationsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ReservationsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ReservationsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ReservationsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ReservationsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ReservationsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ReservationsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ReservationsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ReservationsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ReservationsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ReservationsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ReservationsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ReservationsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ReservationsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ReservationsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ReservationsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ReservationsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ReservationsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ReservationsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ReservationsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ReservationsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ReservationsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ReservationsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ReservationsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ReservationsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ReservationsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ReservationsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ReservationsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ReservationsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ReservationsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ReservationsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ResourcePoliciesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ResourcePoliciesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ResourcePoliciesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ResourcePoliciesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ResourcePoliciesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ResourcePoliciesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ResourcePoliciesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ResourcePoliciesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ResourcePoliciesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ResourcePoliciesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ResourcePoliciesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ResourcePoliciesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ResourcePoliciesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ResourcePoliciesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ResourcePoliciesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ResourcePoliciesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ResourcePoliciesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ResourcePoliciesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ResourcePoliciesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ResourcePoliciesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ResourcePoliciesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ResourcePoliciesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ResourcePoliciesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ResourcePoliciesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ResourcePoliciesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ResourcePoliciesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ResourcePoliciesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ResourcePoliciesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ResourcePoliciesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ResourcePoliciesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ResourcePoliciesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ResourcePoliciesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ResourcePoliciesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ResourcePoliciesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ResourcePoliciesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ResourcePoliciesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ResourcePoliciesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ResourcePoliciesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ResourcePoliciesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ResourcePoliciesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ResourcePoliciesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ResourcePoliciesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ResourcePoliciesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ResourcePoliciesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ResourcePoliciesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ResourcePoliciesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ResourcePoliciesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ResourcePoliciesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ResourcePoliciesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ResourcePoliciesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ResourcePolicyAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ResourcePolicyAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ResourcePolicyAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ResourcePolicyAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ResourcePolicyAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ResourcePolicyAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ResourcePolicyAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ResourcePolicyAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ResourcePolicyAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ResourcePolicyAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ResourcePolicyAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ResourcePolicyAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ResourcePolicyAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ResourcePolicyAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ResourcePolicyAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ResourcePolicyAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ResourcePolicyAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ResourcePolicyAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ResourcePolicyAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ResourcePolicyAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ResourcePolicyAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ResourcePolicyAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ResourcePolicyAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ResourcePolicyAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ResourcePolicyAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ResourcePolicyAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ResourcePolicyAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ResourcePolicyAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ResourcePolicyListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ResourcePolicyListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ResourcePolicyListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ResourcePolicyListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ResourcePolicyListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ResourcePolicyListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ResourcePolicyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ResourcePolicyListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ResourcePolicyListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ResourcePolicyListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ResourcePolicyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ResourcePolicyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ResourcePolicyListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ResourcePolicyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ResourcePolicyListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ResourcePolicyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ResourcePolicyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ResourcePolicyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ResourcePolicyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ResourcePolicyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ResourcePolicyListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ResourcePolicyListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ResourcePolicyListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ResourcePolicyListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ResourcePolicyListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ResourcePolicyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ResourcePolicyListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ResourcePolicyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ResourcePolicyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ResourcePolicyListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ResourcePolicyListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ResourcePolicyListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ResourcePolicyListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ResourcePolicyListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ResourcePolicyListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ResourcePolicyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ResourcePolicyListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ResourcePolicyListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ResourcePolicyListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ResourcePolicyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ResourcePolicyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ResourcePolicyListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ResourcePolicyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ResourcePolicyListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ResourcePolicyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ResourcePolicyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ResourcePolicyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ResourcePolicyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ResourcePolicyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ResourcePolicyListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ResourcePolicyListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ResourcePolicyListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ResourcePolicyListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ResourcePolicyListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ResourcePolicyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ResourcePolicyListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ResourcePolicyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ResourcePolicyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ResourcePolicyListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ResourcePolicyListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ResourcePolicyListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouteWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RouteWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RouteWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouteWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RouteWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RouteWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RouteWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RouteWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RouteWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RouteWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RouteWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RouteWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RouteWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RouteWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RouteWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RouteWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RouteWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RouteWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RouteWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RouteWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RouteWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RouteWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RouteWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RouteWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RouteWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RouteWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RouteWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RouteWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RouteWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RouteWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RouteWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RouteWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RouteWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RouteWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RouteWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RouteWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RouteWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RouteWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RouteWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RouteWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RouteWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RouteWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RouteWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RouteWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RouteWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RouteWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RouteWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RouteWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RouteWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RouteWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RouteWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RouteWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RouteWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RouteWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RouteWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RouteWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RouteWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RouteWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RouteWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RouteWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouteWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouteListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RouteListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RouteListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouteListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RouteListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RouteListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RouteListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RouteListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RouteListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RouteListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RouteListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RouteListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RouteListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RouteListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RouteListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RouteListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RouteListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RouteListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RouteListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RouteListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RouteListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RouteListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RouteListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RouteListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RouteListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RouteListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RouteListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RouteListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RouteListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RouteListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RouteListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RouteListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RouteListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RouteListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RouteListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RouteListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RouteListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RouteListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RouteListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RouteListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RouteListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RouteListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RouteListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RouteListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RouteListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RouteListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RouteListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RouteListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RouteListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RouteListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RouteListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RouteListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RouteListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RouteListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RouteListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RouteListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RouteListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RouteListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RouteListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RouteListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouteListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RouterAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RouterAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RouterAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RouterAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RouterAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RouterAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RouterAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RouterAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RouterAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RouterAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RouterAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RouterAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RouterAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RouterAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RouterAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RouterAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RouterAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RouterAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RouterAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RouterAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RouterAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RouterAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RouterAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RouterAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RouterAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RouterAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RouterAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RouterAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RouterAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RouterAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RouterAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RouterAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RouterAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RouterAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RouterAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RouterAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RouterAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RouterAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RouterAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RouterAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RouterAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RouterAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RouterAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RouterAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RouterAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RouterAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RouterAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RouterAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RouterAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RouterAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RouterAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RouterAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RouterAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RouterAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RouterAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RouterAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RouterAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RouterListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RouterListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RouterListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RouterListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RouterListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RouterListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RouterListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RouterListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RouterListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RouterListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RouterListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RouterListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RouterListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RouterListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RouterListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RouterListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RouterListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RouterListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RouterListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RouterListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RouterListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RouterListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RouterListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RouterListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RouterListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RouterListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RouterListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RouterListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RouterListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RouterListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RouterListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RouterListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RouterListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RouterListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RouterListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RouterListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RouterListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RouterListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RouterListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RouterListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RouterListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RouterListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RouterListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RouterListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RouterListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RouterListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RouterListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RouterListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RouterListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RouterListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RouterListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RouterListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RouterListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RouterListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RouterListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RouterListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RouterListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RouterListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RouterListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RouterListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RouterListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region RoutersScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum RoutersScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for RoutersScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            RoutersScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            RoutersScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            RoutersScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            RoutersScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            RoutersScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            RoutersScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            RoutersScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            RoutersScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            RoutersScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            RoutersScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            RoutersScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            RoutersScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            RoutersScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            RoutersScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            RoutersScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            RoutersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            RoutersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            RoutersScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            RoutersScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            RoutersScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            RoutersScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            RoutersScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            RoutersScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            RoutersScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            RoutersScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            RoutersScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            RoutersScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            RoutersScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for RoutersScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(RoutersScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(RoutersScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(RoutersScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(RoutersScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(RoutersScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(RoutersScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(RoutersScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(RoutersScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(RoutersScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(RoutersScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(RoutersScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(RoutersScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(RoutersScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(RoutersScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(RoutersScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(RoutersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(RoutersScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(RoutersScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(RoutersScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(RoutersScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(RoutersScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(RoutersScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(RoutersScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(RoutersScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(RoutersScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(RoutersScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(RoutersScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(RoutersScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a RoutersScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPoliciesAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SecurityPoliciesAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SecurityPoliciesAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPoliciesAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SecurityPoliciesAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SecurityPoliciesAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SecurityPoliciesAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SecurityPoliciesAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SecurityPoliciesAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SecurityPoliciesAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SecurityPoliciesAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SecurityPoliciesAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SecurityPoliciesAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SecurityPoliciesAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SecurityPoliciesAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SecurityPoliciesAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SecurityPoliciesAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SecurityPoliciesAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SecurityPoliciesAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SecurityPoliciesAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SecurityPoliciesAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SecurityPoliciesAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SecurityPoliciesAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SecurityPoliciesAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SecurityPoliciesAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPoliciesAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SecurityPoliciesAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPoliciesAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPoliciesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SecurityPoliciesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SecurityPoliciesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPoliciesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SecurityPoliciesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SecurityPoliciesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SecurityPoliciesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SecurityPoliciesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SecurityPoliciesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SecurityPoliciesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SecurityPoliciesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SecurityPoliciesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SecurityPoliciesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SecurityPoliciesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SecurityPoliciesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SecurityPoliciesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SecurityPoliciesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SecurityPoliciesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SecurityPoliciesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SecurityPoliciesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SecurityPoliciesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SecurityPoliciesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SecurityPoliciesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SecurityPoliciesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SecurityPoliciesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPoliciesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SecurityPoliciesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SecurityPoliciesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SecurityPoliciesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SecurityPoliciesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SecurityPoliciesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SecurityPoliciesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SecurityPoliciesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SecurityPoliciesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SecurityPoliciesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SecurityPoliciesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SecurityPoliciesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SecurityPoliciesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SecurityPoliciesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SecurityPoliciesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SecurityPoliciesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SecurityPoliciesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SecurityPoliciesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SecurityPoliciesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SecurityPoliciesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SecurityPoliciesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SecurityPoliciesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SecurityPoliciesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SecurityPoliciesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPoliciesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SecurityPolicyListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SecurityPolicyListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SecurityPolicyListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SecurityPolicyListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SecurityPolicyListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SecurityPolicyListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SecurityPolicyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SecurityPolicyListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SecurityPolicyListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SecurityPolicyListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SecurityPolicyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SecurityPolicyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SecurityPolicyListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SecurityPolicyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SecurityPolicyListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SecurityPolicyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SecurityPolicyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SecurityPolicyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SecurityPolicyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SecurityPolicyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SecurityPolicyListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SecurityPolicyListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SecurityPolicyListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SecurityPolicyListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SecurityPolicyListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SecurityPolicyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SecurityPolicyListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SecurityPolicyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SecurityPolicyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SecurityPolicyListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SecurityPolicyListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SecurityPolicyListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SecurityPolicyListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SecurityPolicyListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SecurityPolicyListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SecurityPolicyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SecurityPolicyListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SecurityPolicyListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SecurityPolicyListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SecurityPolicyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SecurityPolicyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SecurityPolicyListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SecurityPolicyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SecurityPolicyListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SecurityPolicyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SecurityPolicyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SecurityPolicyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SecurityPolicyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SecurityPolicyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SecurityPolicyListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SecurityPolicyListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SecurityPolicyListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SecurityPolicyListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SecurityPolicyListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SecurityPolicyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SecurityPolicyListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SecurityPolicyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SecurityPolicyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SecurityPolicyListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SecurityPolicyListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SecurityPolicyListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ServiceAttachmentAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ServiceAttachmentAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ServiceAttachmentAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ServiceAttachmentAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ServiceAttachmentAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ServiceAttachmentAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ServiceAttachmentAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ServiceAttachmentAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ServiceAttachmentAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ServiceAttachmentAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ServiceAttachmentAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ServiceAttachmentAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ServiceAttachmentAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ServiceAttachmentAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ServiceAttachmentAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ServiceAttachmentAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ServiceAttachmentAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ServiceAttachmentAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ServiceAttachmentAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ServiceAttachmentAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ServiceAttachmentAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ServiceAttachmentAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ServiceAttachmentAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ServiceAttachmentAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ServiceAttachmentAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ServiceAttachmentAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ServiceAttachmentAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ServiceAttachmentAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ServiceAttachmentListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ServiceAttachmentListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ServiceAttachmentListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ServiceAttachmentListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ServiceAttachmentListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ServiceAttachmentListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ServiceAttachmentListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ServiceAttachmentListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ServiceAttachmentListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ServiceAttachmentListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ServiceAttachmentListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ServiceAttachmentListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ServiceAttachmentListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ServiceAttachmentListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ServiceAttachmentListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ServiceAttachmentListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ServiceAttachmentListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ServiceAttachmentListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ServiceAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ServiceAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ServiceAttachmentListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ServiceAttachmentListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ServiceAttachmentListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ServiceAttachmentListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ServiceAttachmentListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ServiceAttachmentListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ServiceAttachmentListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ServiceAttachmentListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ServiceAttachmentListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ServiceAttachmentListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ServiceAttachmentListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ServiceAttachmentListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ServiceAttachmentListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ServiceAttachmentListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ServiceAttachmentListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ServiceAttachmentListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ServiceAttachmentListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ServiceAttachmentListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ServiceAttachmentListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ServiceAttachmentListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ServiceAttachmentListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ServiceAttachmentListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ServiceAttachmentListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ServiceAttachmentListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ServiceAttachmentListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ServiceAttachmentListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ServiceAttachmentListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ServiceAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ServiceAttachmentListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ServiceAttachmentListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ServiceAttachmentListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ServiceAttachmentListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ServiceAttachmentListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ServiceAttachmentListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ServiceAttachmentListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ServiceAttachmentListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ServiceAttachmentListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ServiceAttachmentListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ServiceAttachmentListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ServiceAttachmentListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ServiceAttachmentListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ServiceAttachmentsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ServiceAttachmentsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ServiceAttachmentsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ServiceAttachmentsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ServiceAttachmentsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ServiceAttachmentsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ServiceAttachmentsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ServiceAttachmentsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ServiceAttachmentsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ServiceAttachmentsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ServiceAttachmentsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ServiceAttachmentsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ServiceAttachmentsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ServiceAttachmentsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ServiceAttachmentsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ServiceAttachmentsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ServiceAttachmentsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ServiceAttachmentsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ServiceAttachmentsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ServiceAttachmentsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ServiceAttachmentsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ServiceAttachmentsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ServiceAttachmentsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ServiceAttachmentsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ServiceAttachmentsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ServiceAttachmentsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ServiceAttachmentsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ServiceAttachmentsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SnapshotListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SnapshotListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SnapshotListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SnapshotListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SnapshotListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SnapshotListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SnapshotListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SnapshotListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SnapshotListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SnapshotListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SnapshotListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SnapshotListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SnapshotListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SnapshotListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SnapshotListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SnapshotListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SnapshotListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SnapshotListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SnapshotListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SnapshotListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SnapshotListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SnapshotListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SnapshotListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SnapshotListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SnapshotListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SnapshotListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SnapshotListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SnapshotListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SnapshotListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SnapshotListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SnapshotListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SnapshotListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SnapshotListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SnapshotListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SnapshotListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SnapshotListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SnapshotListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SnapshotListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SnapshotListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SnapshotListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SnapshotListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SnapshotListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SnapshotListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SnapshotListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SnapshotListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SnapshotListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SnapshotListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SnapshotListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SnapshotListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SnapshotListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SnapshotListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SnapshotListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SnapshotListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SnapshotListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SnapshotListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SnapshotListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SnapshotListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SnapshotListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SnapshotListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SnapshotListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SnapshotListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslCertificateAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SslCertificateAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SslCertificateAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslCertificateAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SslCertificateAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SslCertificateAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SslCertificateAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SslCertificateAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SslCertificateAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SslCertificateAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SslCertificateAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SslCertificateAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SslCertificateAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SslCertificateAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SslCertificateAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SslCertificateAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SslCertificateAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SslCertificateAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SslCertificateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SslCertificateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SslCertificateAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SslCertificateAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SslCertificateAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SslCertificateAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SslCertificateAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SslCertificateAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SslCertificateAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SslCertificateAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SslCertificateAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SslCertificateAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SslCertificateAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SslCertificateAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SslCertificateAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SslCertificateAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SslCertificateAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SslCertificateAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SslCertificateAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SslCertificateAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SslCertificateAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SslCertificateAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SslCertificateAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SslCertificateAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SslCertificateAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SslCertificateAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SslCertificateAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SslCertificateAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SslCertificateAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SslCertificateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SslCertificateAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SslCertificateAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SslCertificateAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SslCertificateAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SslCertificateAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SslCertificateAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SslCertificateAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SslCertificateAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SslCertificateAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SslCertificateAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SslCertificateAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SslCertificateAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslCertificateAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslCertificateListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SslCertificateListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SslCertificateListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslCertificateListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SslCertificateListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SslCertificateListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SslCertificateListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SslCertificateListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SslCertificateListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SslCertificateListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SslCertificateListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SslCertificateListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SslCertificateListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SslCertificateListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SslCertificateListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SslCertificateListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SslCertificateListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SslCertificateListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SslCertificateListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SslCertificateListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SslCertificateListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SslCertificateListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SslCertificateListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SslCertificateListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SslCertificateListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SslCertificateListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SslCertificateListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SslCertificateListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SslCertificateListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SslCertificateListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SslCertificateListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SslCertificateListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SslCertificateListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SslCertificateListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SslCertificateListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SslCertificateListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SslCertificateListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SslCertificateListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SslCertificateListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SslCertificateListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SslCertificateListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SslCertificateListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SslCertificateListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SslCertificateListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SslCertificateListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SslCertificateListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SslCertificateListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SslCertificateListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SslCertificateListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SslCertificateListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SslCertificateListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SslCertificateListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SslCertificateListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SslCertificateListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SslCertificateListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SslCertificateListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SslCertificateListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SslCertificateListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SslCertificateListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SslCertificateListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslCertificateListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslCertificatesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SslCertificatesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SslCertificatesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslCertificatesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SslCertificatesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SslCertificatesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SslCertificatesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SslCertificatesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SslCertificatesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SslCertificatesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SslCertificatesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SslCertificatesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SslCertificatesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SslCertificatesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SslCertificatesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SslCertificatesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SslCertificatesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SslCertificatesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SslCertificatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SslCertificatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SslCertificatesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SslCertificatesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SslCertificatesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SslCertificatesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SslCertificatesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SslCertificatesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SslCertificatesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SslCertificatesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SslCertificatesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SslCertificatesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SslCertificatesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SslCertificatesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SslCertificatesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SslCertificatesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SslCertificatesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SslCertificatesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SslCertificatesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SslCertificatesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SslCertificatesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SslCertificatesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SslCertificatesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SslCertificatesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SslCertificatesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SslCertificatesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SslCertificatesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SslCertificatesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SslCertificatesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SslCertificatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SslCertificatesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SslCertificatesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SslCertificatesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SslCertificatesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SslCertificatesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SslCertificatesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SslCertificatesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SslCertificatesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SslCertificatesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SslCertificatesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SslCertificatesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SslCertificatesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslCertificatesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslPoliciesAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SslPoliciesAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SslPoliciesAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslPoliciesAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SslPoliciesAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SslPoliciesAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SslPoliciesAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SslPoliciesAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SslPoliciesAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SslPoliciesAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SslPoliciesAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SslPoliciesAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SslPoliciesAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SslPoliciesAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SslPoliciesAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SslPoliciesAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SslPoliciesAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SslPoliciesAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SslPoliciesAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SslPoliciesAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SslPoliciesAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SslPoliciesAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SslPoliciesAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SslPoliciesAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SslPoliciesAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SslPoliciesAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SslPoliciesAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SslPoliciesAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SslPoliciesAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SslPoliciesAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SslPoliciesAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SslPoliciesAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SslPoliciesAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SslPoliciesAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SslPoliciesAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SslPoliciesAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SslPoliciesAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SslPoliciesAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SslPoliciesAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SslPoliciesAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SslPoliciesAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SslPoliciesAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SslPoliciesAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SslPoliciesAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SslPoliciesAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SslPoliciesAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SslPoliciesAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SslPoliciesAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SslPoliciesAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslPoliciesAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslPoliciesListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SslPoliciesListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SslPoliciesListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslPoliciesListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SslPoliciesListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SslPoliciesListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SslPoliciesListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SslPoliciesListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SslPoliciesListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SslPoliciesListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SslPoliciesListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SslPoliciesListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SslPoliciesListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SslPoliciesListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SslPoliciesListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SslPoliciesListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SslPoliciesListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SslPoliciesListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SslPoliciesListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SslPoliciesListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SslPoliciesListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SslPoliciesListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SslPoliciesListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SslPoliciesListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SslPoliciesListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SslPoliciesListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SslPoliciesListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SslPoliciesListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SslPoliciesListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SslPoliciesListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SslPoliciesListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SslPoliciesListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SslPoliciesListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SslPoliciesListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SslPoliciesListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SslPoliciesListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SslPoliciesListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SslPoliciesListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SslPoliciesListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SslPoliciesListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SslPoliciesListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SslPoliciesListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SslPoliciesListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SslPoliciesListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SslPoliciesListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SslPoliciesListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SslPoliciesListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SslPoliciesListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SslPoliciesListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SslPoliciesListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SslPoliciesListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SslPoliciesListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SslPoliciesListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SslPoliciesListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SslPoliciesListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SslPoliciesListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SslPoliciesListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SslPoliciesListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SslPoliciesListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SslPoliciesListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslPoliciesListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslPoliciesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SslPoliciesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SslPoliciesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslPoliciesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SslPoliciesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SslPoliciesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SslPoliciesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SslPoliciesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SslPoliciesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SslPoliciesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SslPoliciesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SslPoliciesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SslPoliciesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SslPoliciesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SslPoliciesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SslPoliciesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SslPoliciesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SslPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SslPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SslPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SslPoliciesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SslPoliciesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SslPoliciesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SslPoliciesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SslPoliciesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SslPoliciesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SslPoliciesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SslPoliciesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SslPoliciesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SslPoliciesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SslPoliciesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SslPoliciesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SslPoliciesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SslPoliciesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SslPoliciesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SslPoliciesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SslPoliciesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SslPoliciesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SslPoliciesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SslPoliciesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SslPoliciesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SslPoliciesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SslPoliciesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SslPoliciesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SslPoliciesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SslPoliciesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SslPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SslPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SslPoliciesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SslPoliciesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SslPoliciesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SslPoliciesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SslPoliciesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SslPoliciesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SslPoliciesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SslPoliciesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SslPoliciesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SslPoliciesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SslPoliciesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SslPoliciesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslPoliciesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SslPolicyWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SslPolicyWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SslPolicyWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SslPolicyWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SslPolicyWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SslPolicyWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SslPolicyWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SslPolicyWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SslPolicyWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SslPolicyWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SslPolicyWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SslPolicyWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SslPolicyWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SslPolicyWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SslPolicyWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SslPolicyWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SslPolicyWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SslPolicyWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SslPolicyWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SslPolicyWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SslPolicyWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SslPolicyWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SslPolicyWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SslPolicyWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SslPolicyWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SslPolicyWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SslPolicyWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SslPolicyWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SslPolicyWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SslPolicyWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SslPolicyWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SslPolicyWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SslPolicyWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SslPolicyWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SslPolicyWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SslPolicyWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SslPolicyWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SslPolicyWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SslPolicyWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SslPolicyWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SslPolicyWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SslPolicyWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SslPolicyWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SslPolicyWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SslPolicyWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SslPolicyWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SslPolicyWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SslPolicyWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SslPolicyWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SslPolicyWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SslPolicyWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SslPolicyWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SslPolicyWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SslPolicyWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SslPolicyWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SslPolicyWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SslPolicyWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SslPolicyWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SslPolicyWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SslPolicyWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SslPolicyWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum StoragePoolAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for StoragePoolAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            StoragePoolAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            StoragePoolAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            StoragePoolAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            StoragePoolAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            StoragePoolAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            StoragePoolAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            StoragePoolAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            StoragePoolAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            StoragePoolAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            StoragePoolAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            StoragePoolAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            StoragePoolAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            StoragePoolAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            StoragePoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            StoragePoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            StoragePoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            StoragePoolAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            StoragePoolAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            StoragePoolAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            StoragePoolAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            StoragePoolAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            StoragePoolAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            StoragePoolAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            StoragePoolAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            StoragePoolAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            StoragePoolAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            StoragePoolAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(StoragePoolAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(StoragePoolAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(StoragePoolAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(StoragePoolAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(StoragePoolAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(StoragePoolAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(StoragePoolAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(StoragePoolAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(StoragePoolAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(StoragePoolAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(StoragePoolAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(StoragePoolAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(StoragePoolAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(StoragePoolAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(StoragePoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(StoragePoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(StoragePoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(StoragePoolAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(StoragePoolAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(StoragePoolAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(StoragePoolAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(StoragePoolAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(StoragePoolAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(StoragePoolAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(StoragePoolAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(StoragePoolAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(StoragePoolAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(StoragePoolAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum StoragePoolListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for StoragePoolListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            StoragePoolListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            StoragePoolListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            StoragePoolListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            StoragePoolListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            StoragePoolListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            StoragePoolListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            StoragePoolListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            StoragePoolListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            StoragePoolListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            StoragePoolListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            StoragePoolListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            StoragePoolListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            StoragePoolListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            StoragePoolListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            StoragePoolListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            StoragePoolListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            StoragePoolListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            StoragePoolListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            StoragePoolListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            StoragePoolListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            StoragePoolListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            StoragePoolListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            StoragePoolListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            StoragePoolListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            StoragePoolListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            StoragePoolListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            StoragePoolListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(StoragePoolListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(StoragePoolListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(StoragePoolListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(StoragePoolListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(StoragePoolListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(StoragePoolListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(StoragePoolListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(StoragePoolListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(StoragePoolListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(StoragePoolListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(StoragePoolListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(StoragePoolListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(StoragePoolListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(StoragePoolListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(StoragePoolListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(StoragePoolListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(StoragePoolListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(StoragePoolListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(StoragePoolListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(StoragePoolListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(StoragePoolListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(StoragePoolListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(StoragePoolListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(StoragePoolListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(StoragePoolListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(StoragePoolListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(StoragePoolListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(StoragePoolListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolListDisksWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum StoragePoolListDisksWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for StoragePoolListDisksWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolListDisksWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            StoragePoolListDisksWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            StoragePoolListDisksWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            StoragePoolListDisksWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            StoragePoolListDisksWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            StoragePoolListDisksWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            StoragePoolListDisksWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            StoragePoolListDisksWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            StoragePoolListDisksWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            StoragePoolListDisksWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            StoragePoolListDisksWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            StoragePoolListDisksWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            StoragePoolListDisksWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            StoragePoolListDisksWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            StoragePoolListDisksWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            StoragePoolListDisksWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            StoragePoolListDisksWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            StoragePoolListDisksWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            StoragePoolListDisksWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            StoragePoolListDisksWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            StoragePoolListDisksWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            StoragePoolListDisksWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            StoragePoolListDisksWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            StoragePoolListDisksWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            StoragePoolListDisksWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            StoragePoolListDisksWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            StoragePoolListDisksWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            StoragePoolListDisksWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolListDisksWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(StoragePoolListDisksWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(StoragePoolListDisksWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(StoragePoolListDisksWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(StoragePoolListDisksWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(StoragePoolListDisksWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(StoragePoolListDisksWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(StoragePoolListDisksWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(StoragePoolListDisksWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(StoragePoolListDisksWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(StoragePoolListDisksWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(StoragePoolListDisksWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(StoragePoolListDisksWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(StoragePoolListDisksWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(StoragePoolListDisksWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(StoragePoolListDisksWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(StoragePoolListDisksWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(StoragePoolListDisksWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(StoragePoolListDisksWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(StoragePoolListDisksWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(StoragePoolListDisksWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(StoragePoolListDisksWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(StoragePoolListDisksWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(StoragePoolListDisksWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(StoragePoolListDisksWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(StoragePoolListDisksWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(StoragePoolListDisksWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(StoragePoolListDisksWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(StoragePoolListDisksWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolListDisksWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolTypeAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum StoragePoolTypeAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for StoragePoolTypeAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolTypeAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            StoragePoolTypeAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            StoragePoolTypeAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            StoragePoolTypeAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            StoragePoolTypeAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            StoragePoolTypeAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            StoragePoolTypeAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            StoragePoolTypeAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            StoragePoolTypeAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            StoragePoolTypeAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            StoragePoolTypeAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            StoragePoolTypeAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            StoragePoolTypeAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            StoragePoolTypeAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            StoragePoolTypeAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            StoragePoolTypeAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            StoragePoolTypeAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            StoragePoolTypeAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            StoragePoolTypeAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            StoragePoolTypeAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            StoragePoolTypeAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            StoragePoolTypeAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolTypeAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(StoragePoolTypeAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolTypeAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolTypeListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum StoragePoolTypeListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for StoragePoolTypeListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolTypeListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            StoragePoolTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            StoragePoolTypeListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            StoragePoolTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            StoragePoolTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            StoragePoolTypeListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            StoragePoolTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            StoragePoolTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            StoragePoolTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            StoragePoolTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            StoragePoolTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            StoragePoolTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            StoragePoolTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            StoragePoolTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            StoragePoolTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            StoragePoolTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            StoragePoolTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            StoragePoolTypeListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            StoragePoolTypeListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            StoragePoolTypeListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            StoragePoolTypeListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            StoragePoolTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            StoragePoolTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            StoragePoolTypeListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            StoragePoolTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            StoragePoolTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            StoragePoolTypeListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            StoragePoolTypeListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolTypeListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(StoragePoolTypeListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(StoragePoolTypeListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(StoragePoolTypeListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(StoragePoolTypeListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(StoragePoolTypeListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(StoragePoolTypeListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(StoragePoolTypeListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(StoragePoolTypeListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(StoragePoolTypeListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(StoragePoolTypeListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(StoragePoolTypeListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(StoragePoolTypeListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(StoragePoolTypeListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(StoragePoolTypeListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(StoragePoolTypeListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(StoragePoolTypeListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(StoragePoolTypeListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(StoragePoolTypeListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(StoragePoolTypeListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(StoragePoolTypeListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(StoragePoolTypeListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(StoragePoolTypeListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(StoragePoolTypeListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(StoragePoolTypeListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(StoragePoolTypeListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(StoragePoolTypeListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(StoragePoolTypeListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(StoragePoolTypeListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolTypeListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolTypesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum StoragePoolTypesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for StoragePoolTypesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolTypesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            StoragePoolTypesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            StoragePoolTypesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            StoragePoolTypesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            StoragePoolTypesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            StoragePoolTypesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            StoragePoolTypesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            StoragePoolTypesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            StoragePoolTypesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            StoragePoolTypesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            StoragePoolTypesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            StoragePoolTypesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            StoragePoolTypesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            StoragePoolTypesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            StoragePoolTypesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            StoragePoolTypesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            StoragePoolTypesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            StoragePoolTypesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            StoragePoolTypesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            StoragePoolTypesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            StoragePoolTypesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            StoragePoolTypesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolTypesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(StoragePoolTypesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(StoragePoolTypesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(StoragePoolTypesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(StoragePoolTypesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(StoragePoolTypesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(StoragePoolTypesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(StoragePoolTypesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(StoragePoolTypesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(StoragePoolTypesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(StoragePoolTypesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(StoragePoolTypesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(StoragePoolTypesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(StoragePoolTypesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(StoragePoolTypesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(StoragePoolTypesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(StoragePoolTypesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(StoragePoolTypesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(StoragePoolTypesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(StoragePoolTypesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(StoragePoolTypesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(StoragePoolTypesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(StoragePoolTypesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(StoragePoolTypesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolTypesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region StoragePoolsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum StoragePoolsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for StoragePoolsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            StoragePoolsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            StoragePoolsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            StoragePoolsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            StoragePoolsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            StoragePoolsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            StoragePoolsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            StoragePoolsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            StoragePoolsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            StoragePoolsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            StoragePoolsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            StoragePoolsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            StoragePoolsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            StoragePoolsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            StoragePoolsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            StoragePoolsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            StoragePoolsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            StoragePoolsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            StoragePoolsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            StoragePoolsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            StoragePoolsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            StoragePoolsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            StoragePoolsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            StoragePoolsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            StoragePoolsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            StoragePoolsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            StoragePoolsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            StoragePoolsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            StoragePoolsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for StoragePoolsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(StoragePoolsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(StoragePoolsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(StoragePoolsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(StoragePoolsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(StoragePoolsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(StoragePoolsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(StoragePoolsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(StoragePoolsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(StoragePoolsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(StoragePoolsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(StoragePoolsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(StoragePoolsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(StoragePoolsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(StoragePoolsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(StoragePoolsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(StoragePoolsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(StoragePoolsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(StoragePoolsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(StoragePoolsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(StoragePoolsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(StoragePoolsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(StoragePoolsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(StoragePoolsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(StoragePoolsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(StoragePoolsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(StoragePoolsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(StoragePoolsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(StoragePoolsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a StoragePoolsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworkAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SubnetworkAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SubnetworkAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworkAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SubnetworkAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SubnetworkAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SubnetworkAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SubnetworkAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SubnetworkAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SubnetworkAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SubnetworkAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SubnetworkAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SubnetworkAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SubnetworkAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SubnetworkAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SubnetworkAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SubnetworkAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SubnetworkAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SubnetworkAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SubnetworkAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SubnetworkAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SubnetworkAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SubnetworkAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SubnetworkAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SubnetworkAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SubnetworkAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SubnetworkAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SubnetworkAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SubnetworkAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SubnetworkAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SubnetworkAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworkAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SubnetworkAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SubnetworkAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SubnetworkAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SubnetworkAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SubnetworkAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SubnetworkAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SubnetworkAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SubnetworkAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SubnetworkAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SubnetworkAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SubnetworkAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SubnetworkAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SubnetworkAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SubnetworkAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SubnetworkAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SubnetworkAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SubnetworkAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SubnetworkAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SubnetworkAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SubnetworkAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SubnetworkAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SubnetworkAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SubnetworkAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SubnetworkAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SubnetworkAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SubnetworkAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SubnetworkAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SubnetworkAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworkAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworkListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SubnetworkListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SubnetworkListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworkListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SubnetworkListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SubnetworkListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SubnetworkListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SubnetworkListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SubnetworkListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SubnetworkListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SubnetworkListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SubnetworkListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SubnetworkListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SubnetworkListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SubnetworkListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SubnetworkListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SubnetworkListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SubnetworkListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SubnetworkListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SubnetworkListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SubnetworkListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SubnetworkListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SubnetworkListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SubnetworkListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SubnetworkListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SubnetworkListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SubnetworkListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SubnetworkListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SubnetworkListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SubnetworkListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SubnetworkListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworkListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SubnetworkListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SubnetworkListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SubnetworkListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SubnetworkListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SubnetworkListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SubnetworkListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SubnetworkListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SubnetworkListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SubnetworkListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SubnetworkListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SubnetworkListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SubnetworkListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SubnetworkListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SubnetworkListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SubnetworkListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SubnetworkListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SubnetworkListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SubnetworkListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SubnetworkListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SubnetworkListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SubnetworkListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SubnetworkListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SubnetworkListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SubnetworkListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SubnetworkListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SubnetworkListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SubnetworkListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SubnetworkListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworkListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region SubnetworksScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum SubnetworksScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for SubnetworksScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            SubnetworksScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            SubnetworksScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            SubnetworksScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            SubnetworksScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            SubnetworksScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            SubnetworksScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            SubnetworksScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            SubnetworksScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            SubnetworksScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            SubnetworksScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            SubnetworksScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            SubnetworksScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            SubnetworksScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            SubnetworksScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            SubnetworksScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            SubnetworksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            SubnetworksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            SubnetworksScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            SubnetworksScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            SubnetworksScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            SubnetworksScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            SubnetworksScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            SubnetworksScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            SubnetworksScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            SubnetworksScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            SubnetworksScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            SubnetworksScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            SubnetworksScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for SubnetworksScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(SubnetworksScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(SubnetworksScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(SubnetworksScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(SubnetworksScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(SubnetworksScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(SubnetworksScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(SubnetworksScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(SubnetworksScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(SubnetworksScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(SubnetworksScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(SubnetworksScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(SubnetworksScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(SubnetworksScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(SubnetworksScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(SubnetworksScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(SubnetworksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(SubnetworksScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(SubnetworksScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(SubnetworksScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(SubnetworksScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(SubnetworksScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(SubnetworksScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(SubnetworksScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(SubnetworksScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(SubnetworksScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(SubnetworksScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(SubnetworksScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(SubnetworksScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a SubnetworksScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetGrpcProxyListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetGrpcProxyListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetGrpcProxyListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetGrpcProxyListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetGrpcProxyListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetGrpcProxyListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetGrpcProxyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetGrpcProxyListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetGrpcProxyListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetGrpcProxyListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetGrpcProxyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetGrpcProxyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetGrpcProxyListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetGrpcProxyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetGrpcProxyListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetGrpcProxyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetGrpcProxyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetGrpcProxyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetGrpcProxyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetGrpcProxyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetGrpcProxyListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetGrpcProxyListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetGrpcProxyListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetGrpcProxyListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetGrpcProxyListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetGrpcProxyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetGrpcProxyListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetGrpcProxyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetGrpcProxyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetGrpcProxyListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetGrpcProxyListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetGrpcProxyListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetGrpcProxyListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetGrpcProxyListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetGrpcProxyListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetGrpcProxyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetGrpcProxyListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetGrpcProxyListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetGrpcProxyListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetGrpcProxyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetGrpcProxyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetGrpcProxyListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetGrpcProxyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetGrpcProxyListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetGrpcProxyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetGrpcProxyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetGrpcProxyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetGrpcProxyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetGrpcProxyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetGrpcProxyListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetGrpcProxyListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetGrpcProxyListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetGrpcProxyListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetGrpcProxyListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetGrpcProxyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetGrpcProxyListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetGrpcProxyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetGrpcProxyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetGrpcProxyListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetGrpcProxyListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetGrpcProxyListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetHttpProxiesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetHttpProxiesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetHttpProxiesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetHttpProxiesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetHttpProxiesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetHttpProxiesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetHttpProxiesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetHttpProxiesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetHttpProxiesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetHttpProxiesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetHttpProxiesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetHttpProxiesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetHttpProxiesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetHttpProxiesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetHttpProxiesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetHttpProxiesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetHttpProxiesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetHttpProxiesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetHttpProxiesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetHttpProxiesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetHttpProxiesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetHttpProxiesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetHttpProxiesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetHttpProxiesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetHttpProxiesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetHttpProxiesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetHttpProxiesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetHttpProxiesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetHttpProxyListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetHttpProxyListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetHttpProxyListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetHttpProxyListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetHttpProxyListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetHttpProxyListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetHttpProxyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetHttpProxyListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetHttpProxyListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetHttpProxyListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetHttpProxyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetHttpProxyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetHttpProxyListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetHttpProxyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetHttpProxyListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetHttpProxyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetHttpProxyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetHttpProxyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetHttpProxyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetHttpProxyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetHttpProxyListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetHttpProxyListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetHttpProxyListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetHttpProxyListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetHttpProxyListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetHttpProxyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetHttpProxyListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetHttpProxyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetHttpProxyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetHttpProxyListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetHttpProxyListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetHttpProxyListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetHttpProxyListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetHttpProxyListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetHttpProxyListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetHttpProxyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetHttpProxyListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetHttpProxyListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetHttpProxyListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetHttpProxyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetHttpProxyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetHttpProxyListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetHttpProxyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetHttpProxyListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetHttpProxyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetHttpProxyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetHttpProxyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetHttpProxyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetHttpProxyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetHttpProxyListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetHttpProxyListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetHttpProxyListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetHttpProxyListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetHttpProxyListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetHttpProxyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetHttpProxyListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetHttpProxyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetHttpProxyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetHttpProxyListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetHttpProxyListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetHttpProxyListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetHttpsProxiesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetHttpsProxiesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetHttpsProxiesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetHttpsProxiesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetHttpsProxiesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetHttpsProxiesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetHttpsProxiesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetHttpsProxiesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetHttpsProxiesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetHttpsProxiesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetHttpsProxiesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetHttpsProxiesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetHttpsProxiesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetHttpsProxiesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetHttpsProxiesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetHttpsProxiesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetHttpsProxiesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetHttpsProxiesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetHttpsProxiesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetHttpsProxiesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetHttpsProxiesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetHttpsProxiesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetHttpsProxiesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetHttpsProxiesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetHttpsProxiesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetHttpsProxiesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetHttpsProxiesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetHttpsProxiesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetHttpsProxyAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetHttpsProxyAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetHttpsProxyAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetHttpsProxyAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetHttpsProxyAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetHttpsProxyAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetHttpsProxyAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetHttpsProxyAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetHttpsProxyAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetHttpsProxyAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetHttpsProxyAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetHttpsProxyAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetHttpsProxyAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetHttpsProxyAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetHttpsProxyAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetHttpsProxyAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetHttpsProxyAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetHttpsProxyAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetHttpsProxyAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetHttpsProxyAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetHttpsProxyAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetHttpsProxyAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetHttpsProxyAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetHttpsProxyAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetHttpsProxyAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetHttpsProxyAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetHttpsProxyAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetHttpsProxyAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetHttpsProxyListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetHttpsProxyListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetHttpsProxyListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetHttpsProxyListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetHttpsProxyListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetHttpsProxyListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetHttpsProxyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetHttpsProxyListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetHttpsProxyListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetHttpsProxyListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetHttpsProxyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetHttpsProxyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetHttpsProxyListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetHttpsProxyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetHttpsProxyListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetHttpsProxyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetHttpsProxyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetHttpsProxyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetHttpsProxyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetHttpsProxyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetHttpsProxyListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetHttpsProxyListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetHttpsProxyListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetHttpsProxyListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetHttpsProxyListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetHttpsProxyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetHttpsProxyListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetHttpsProxyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetHttpsProxyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetHttpsProxyListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetHttpsProxyListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetHttpsProxyListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetHttpsProxyListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetHttpsProxyListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetHttpsProxyListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetHttpsProxyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetHttpsProxyListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetHttpsProxyListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetHttpsProxyListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetHttpsProxyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetHttpsProxyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetHttpsProxyListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetHttpsProxyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetHttpsProxyListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetHttpsProxyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetHttpsProxyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetHttpsProxyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetHttpsProxyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetHttpsProxyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetHttpsProxyListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetHttpsProxyListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetHttpsProxyListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetHttpsProxyListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetHttpsProxyListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetHttpsProxyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetHttpsProxyListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetHttpsProxyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetHttpsProxyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetHttpsProxyListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetHttpsProxyListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetHttpsProxyListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetInstanceAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetInstanceAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetInstanceAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetInstanceAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetInstanceAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetInstanceAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetInstanceAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetInstanceAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetInstanceAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetInstanceAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetInstanceAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetInstanceAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetInstanceAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetInstanceAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetInstanceAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetInstanceAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetInstanceAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetInstanceAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetInstanceAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetInstanceAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetInstanceAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetInstanceAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetInstanceAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetInstanceAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetInstanceAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetInstanceAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetInstanceAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetInstanceAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetInstanceAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetInstanceAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetInstanceAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetInstanceAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetInstanceAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetInstanceAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetInstanceAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetInstanceAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetInstanceAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetInstanceAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetInstanceAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetInstanceAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetInstanceAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetInstanceAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetInstanceAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetInstanceAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetInstanceAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetInstanceAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetInstanceAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetInstanceAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetInstanceAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetInstanceAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetInstanceListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetInstanceListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetInstanceListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetInstanceListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetInstanceListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetInstanceListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetInstanceListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetInstanceListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetInstanceListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetInstanceListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetInstanceListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetInstanceListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetInstanceListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetInstanceListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetInstanceListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetInstanceListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetInstanceListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetInstanceListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetInstanceListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetInstanceListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetInstanceListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetInstanceListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetInstanceListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetInstanceListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetInstanceListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetInstanceListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetInstanceListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetInstanceListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetInstanceListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetInstanceListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetInstanceListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetInstanceListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetInstanceListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetInstanceListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetInstanceListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetInstanceListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetInstanceListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetInstanceListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetInstanceListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetInstanceListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetInstanceListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetInstanceListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetInstanceListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetInstanceListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetInstanceListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetInstanceListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetInstanceListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetInstanceListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetInstanceListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetInstanceListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetInstanceListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetInstanceListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetInstanceListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetInstanceListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetInstanceListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetInstanceListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetInstanceListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetInstanceListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetInstanceListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetInstanceListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetInstanceListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetInstancesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetInstancesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetInstancesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetInstancesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetInstancesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetInstancesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetInstancesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetInstancesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetInstancesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetInstancesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetInstancesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetInstancesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetInstancesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetInstancesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetInstancesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetInstancesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetInstancesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetInstancesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetInstancesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetInstancesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetInstancesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetInstancesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetInstancesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetInstancesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetInstancesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetInstancesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetInstancesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetInstancesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetInstancesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetInstancesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetInstancesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetInstancesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetInstancesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetInstancesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetInstancesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetInstancesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetInstancesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetInstancesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetInstancesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetInstancesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetInstancesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetInstancesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetInstancesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetInstancesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetInstancesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetInstancesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetInstancesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetInstancesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetInstancesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetInstancesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetInstancesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetInstancesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetInstancesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetInstancesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetInstancesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetInstancesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetInstancesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetInstancesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetInstancesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetInstancesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetInstancesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetPoolAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetPoolAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetPoolAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetPoolAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetPoolAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetPoolAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetPoolAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetPoolAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetPoolAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetPoolAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetPoolAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetPoolAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetPoolAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetPoolAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetPoolAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetPoolAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetPoolAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetPoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetPoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetPoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetPoolAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetPoolAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetPoolAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetPoolAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetPoolAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetPoolAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetPoolAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetPoolAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetPoolAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetPoolAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetPoolAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetPoolAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetPoolAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetPoolAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetPoolAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetPoolAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetPoolAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetPoolAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetPoolAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetPoolAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetPoolAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetPoolAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetPoolAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetPoolAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetPoolAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetPoolAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetPoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetPoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetPoolAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetPoolAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetPoolAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetPoolAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetPoolAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetPoolAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetPoolAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetPoolAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetPoolAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetPoolAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetPoolAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetPoolAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetPoolAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetPoolListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetPoolListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetPoolListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetPoolListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetPoolListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetPoolListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetPoolListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetPoolListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetPoolListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetPoolListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetPoolListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetPoolListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetPoolListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetPoolListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetPoolListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetPoolListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetPoolListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetPoolListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetPoolListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetPoolListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetPoolListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetPoolListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetPoolListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetPoolListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetPoolListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetPoolListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetPoolListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetPoolListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetPoolListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetPoolListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetPoolListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetPoolListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetPoolListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetPoolListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetPoolListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetPoolListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetPoolListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetPoolListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetPoolListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetPoolListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetPoolListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetPoolListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetPoolListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetPoolListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetPoolListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetPoolListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetPoolListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetPoolListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetPoolListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetPoolListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetPoolListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetPoolListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetPoolListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetPoolListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetPoolListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetPoolListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetPoolListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetPoolListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetPoolListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetPoolListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetPoolListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetPoolsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetPoolsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetPoolsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetPoolsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetPoolsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetPoolsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetPoolsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetPoolsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetPoolsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetPoolsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetPoolsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetPoolsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetPoolsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetPoolsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetPoolsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetPoolsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetPoolsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetPoolsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetPoolsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetPoolsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetPoolsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetPoolsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetPoolsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetPoolsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetPoolsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetPoolsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetPoolsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetPoolsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetPoolsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetPoolsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetPoolsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetPoolsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetPoolsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetPoolsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetPoolsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetPoolsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetPoolsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetPoolsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetPoolsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetPoolsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetPoolsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetPoolsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetPoolsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetPoolsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetPoolsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetPoolsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetPoolsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetPoolsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetPoolsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetPoolsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetPoolsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetPoolsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetPoolsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetPoolsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetPoolsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetPoolsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetPoolsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetPoolsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetPoolsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetPoolsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetPoolsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetSslProxyListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetSslProxyListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetSslProxyListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetSslProxyListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetSslProxyListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetSslProxyListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetSslProxyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetSslProxyListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetSslProxyListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetSslProxyListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetSslProxyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetSslProxyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetSslProxyListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetSslProxyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetSslProxyListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetSslProxyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetSslProxyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetSslProxyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetSslProxyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetSslProxyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetSslProxyListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetSslProxyListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetSslProxyListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetSslProxyListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetSslProxyListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetSslProxyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetSslProxyListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetSslProxyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetSslProxyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetSslProxyListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetSslProxyListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetSslProxyListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetSslProxyListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetSslProxyListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetSslProxyListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetSslProxyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetSslProxyListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetSslProxyListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetSslProxyListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetSslProxyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetSslProxyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetSslProxyListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetSslProxyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetSslProxyListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetSslProxyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetSslProxyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetSslProxyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetSslProxyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetSslProxyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetSslProxyListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetSslProxyListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetSslProxyListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetSslProxyListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetSslProxyListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetSslProxyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetSslProxyListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetSslProxyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetSslProxyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetSslProxyListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetSslProxyListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetSslProxyListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetTcpProxiesScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetTcpProxiesScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetTcpProxiesScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetTcpProxiesScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetTcpProxiesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetTcpProxiesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetTcpProxiesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetTcpProxiesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetTcpProxiesScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetTcpProxiesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetTcpProxiesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetTcpProxiesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetTcpProxiesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetTcpProxiesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetTcpProxiesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetTcpProxiesScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetTcpProxiesScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetTcpProxiesScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetTcpProxiesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetTcpProxiesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetTcpProxiesScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetTcpProxiesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetTcpProxiesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetTcpProxiesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetTcpProxiesScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetTcpProxiesScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetTcpProxiesScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetTcpProxiesScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetTcpProxyAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetTcpProxyAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetTcpProxyAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetTcpProxyAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetTcpProxyAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetTcpProxyAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetTcpProxyAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetTcpProxyAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetTcpProxyAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetTcpProxyAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetTcpProxyAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetTcpProxyAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetTcpProxyAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetTcpProxyAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetTcpProxyAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetTcpProxyAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetTcpProxyAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetTcpProxyAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetTcpProxyAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetTcpProxyAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetTcpProxyAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetTcpProxyAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetTcpProxyAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetTcpProxyAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetTcpProxyAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetTcpProxyAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetTcpProxyAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetTcpProxyAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetTcpProxyListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetTcpProxyListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetTcpProxyListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetTcpProxyListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetTcpProxyListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetTcpProxyListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetTcpProxyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetTcpProxyListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetTcpProxyListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetTcpProxyListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetTcpProxyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetTcpProxyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetTcpProxyListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetTcpProxyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetTcpProxyListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetTcpProxyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetTcpProxyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetTcpProxyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetTcpProxyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetTcpProxyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetTcpProxyListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetTcpProxyListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetTcpProxyListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetTcpProxyListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetTcpProxyListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetTcpProxyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetTcpProxyListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetTcpProxyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetTcpProxyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetTcpProxyListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetTcpProxyListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetTcpProxyListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetTcpProxyListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetTcpProxyListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetTcpProxyListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetTcpProxyListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetTcpProxyListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetTcpProxyListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetTcpProxyListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetTcpProxyListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetTcpProxyListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetTcpProxyListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetTcpProxyListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetTcpProxyListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetTcpProxyListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetTcpProxyListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetTcpProxyListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetTcpProxyListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetTcpProxyListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetTcpProxyListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetTcpProxyListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetTcpProxyListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetTcpProxyListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetTcpProxyListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetTcpProxyListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetTcpProxyListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetTcpProxyListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetTcpProxyListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetTcpProxyListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetTcpProxyListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetTcpProxyListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetVpnGatewayAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetVpnGatewayAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetVpnGatewayAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetVpnGatewayAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetVpnGatewayAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetVpnGatewayAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetVpnGatewayAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetVpnGatewayAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetVpnGatewayAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetVpnGatewayAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetVpnGatewayAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetVpnGatewayAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetVpnGatewayAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetVpnGatewayAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetVpnGatewayAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetVpnGatewayAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetVpnGatewayAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetVpnGatewayAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetVpnGatewayAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetVpnGatewayAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetVpnGatewayAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetVpnGatewayAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetVpnGatewayAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetVpnGatewayAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetVpnGatewayAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetVpnGatewayAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetVpnGatewayAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetVpnGatewayAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetVpnGatewayListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetVpnGatewayListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetVpnGatewayListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetVpnGatewayListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetVpnGatewayListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetVpnGatewayListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetVpnGatewayListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetVpnGatewayListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetVpnGatewayListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetVpnGatewayListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetVpnGatewayListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetVpnGatewayListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetVpnGatewayListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetVpnGatewayListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetVpnGatewayListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetVpnGatewayListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetVpnGatewayListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetVpnGatewayListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetVpnGatewayListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetVpnGatewayListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetVpnGatewayListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetVpnGatewayListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetVpnGatewayListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetVpnGatewayListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetVpnGatewayListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetVpnGatewayListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetVpnGatewayListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetVpnGatewayListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetVpnGatewayListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetVpnGatewayListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetVpnGatewayListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetVpnGatewayListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetVpnGatewayListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetVpnGatewayListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetVpnGatewayListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetVpnGatewayListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetVpnGatewayListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetVpnGatewayListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetVpnGatewayListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetVpnGatewayListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetVpnGatewayListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetVpnGatewayListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetVpnGatewayListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetVpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetVpnGatewayListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetVpnGatewayListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetVpnGatewayListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetVpnGatewayListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetVpnGatewayListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetVpnGatewayListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetVpnGatewayListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetVpnGatewayListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetVpnGatewayListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetVpnGatewayListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetVpnGatewayListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetVpnGatewayListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region TargetVpnGatewaysScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum TargetVpnGatewaysScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for TargetVpnGatewaysScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            TargetVpnGatewaysScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            TargetVpnGatewaysScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            TargetVpnGatewaysScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            TargetVpnGatewaysScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            TargetVpnGatewaysScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            TargetVpnGatewaysScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            TargetVpnGatewaysScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            TargetVpnGatewaysScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            TargetVpnGatewaysScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            TargetVpnGatewaysScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            TargetVpnGatewaysScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            TargetVpnGatewaysScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            TargetVpnGatewaysScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            TargetVpnGatewaysScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            TargetVpnGatewaysScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            TargetVpnGatewaysScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            TargetVpnGatewaysScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            TargetVpnGatewaysScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            TargetVpnGatewaysScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            TargetVpnGatewaysScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            TargetVpnGatewaysScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            TargetVpnGatewaysScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for TargetVpnGatewaysScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(TargetVpnGatewaysScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a TargetVpnGatewaysScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UrlMapListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum UrlMapListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for UrlMapListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UrlMapListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            UrlMapListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            UrlMapListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            UrlMapListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            UrlMapListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            UrlMapListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            UrlMapListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            UrlMapListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            UrlMapListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            UrlMapListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            UrlMapListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            UrlMapListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            UrlMapListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            UrlMapListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            UrlMapListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            UrlMapListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            UrlMapListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            UrlMapListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            UrlMapListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            UrlMapListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            UrlMapListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            UrlMapListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            UrlMapListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            UrlMapListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            UrlMapListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            UrlMapListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            UrlMapListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            UrlMapListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for UrlMapListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(UrlMapListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(UrlMapListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(UrlMapListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(UrlMapListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(UrlMapListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(UrlMapListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(UrlMapListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(UrlMapListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(UrlMapListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(UrlMapListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(UrlMapListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(UrlMapListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(UrlMapListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(UrlMapListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(UrlMapListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(UrlMapListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(UrlMapListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(UrlMapListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(UrlMapListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(UrlMapListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(UrlMapListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(UrlMapListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(UrlMapListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(UrlMapListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(UrlMapListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(UrlMapListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(UrlMapListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(UrlMapListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UrlMapListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UrlMapsAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum UrlMapsAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for UrlMapsAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UrlMapsAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            UrlMapsAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            UrlMapsAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            UrlMapsAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            UrlMapsAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            UrlMapsAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            UrlMapsAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            UrlMapsAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            UrlMapsAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            UrlMapsAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            UrlMapsAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            UrlMapsAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            UrlMapsAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            UrlMapsAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            UrlMapsAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            UrlMapsAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            UrlMapsAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            UrlMapsAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            UrlMapsAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            UrlMapsAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            UrlMapsAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            UrlMapsAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            UrlMapsAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            UrlMapsAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            UrlMapsAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            UrlMapsAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            UrlMapsAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            UrlMapsAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for UrlMapsAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(UrlMapsAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(UrlMapsAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(UrlMapsAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(UrlMapsAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(UrlMapsAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(UrlMapsAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(UrlMapsAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(UrlMapsAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(UrlMapsAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(UrlMapsAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(UrlMapsAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(UrlMapsAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(UrlMapsAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(UrlMapsAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(UrlMapsAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(UrlMapsAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(UrlMapsAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(UrlMapsAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(UrlMapsAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(UrlMapsAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(UrlMapsAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(UrlMapsAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(UrlMapsAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(UrlMapsAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(UrlMapsAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(UrlMapsAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(UrlMapsAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(UrlMapsAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UrlMapsAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UrlMapsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum UrlMapsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for UrlMapsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UrlMapsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            UrlMapsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            UrlMapsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            UrlMapsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            UrlMapsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            UrlMapsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            UrlMapsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            UrlMapsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            UrlMapsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            UrlMapsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            UrlMapsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            UrlMapsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            UrlMapsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            UrlMapsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            UrlMapsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            UrlMapsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            UrlMapsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            UrlMapsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            UrlMapsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            UrlMapsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            UrlMapsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            UrlMapsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            UrlMapsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            UrlMapsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            UrlMapsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            UrlMapsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            UrlMapsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            UrlMapsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for UrlMapsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(UrlMapsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(UrlMapsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(UrlMapsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(UrlMapsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(UrlMapsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(UrlMapsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(UrlMapsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(UrlMapsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(UrlMapsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(UrlMapsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(UrlMapsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(UrlMapsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(UrlMapsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(UrlMapsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(UrlMapsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(UrlMapsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(UrlMapsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(UrlMapsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(UrlMapsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(UrlMapsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(UrlMapsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(UrlMapsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(UrlMapsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(UrlMapsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(UrlMapsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(UrlMapsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(UrlMapsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(UrlMapsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UrlMapsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region UsableSubnetworksAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum UsableSubnetworksAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for UsableSubnetworksAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            UsableSubnetworksAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            UsableSubnetworksAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            UsableSubnetworksAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            UsableSubnetworksAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            UsableSubnetworksAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            UsableSubnetworksAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            UsableSubnetworksAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            UsableSubnetworksAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            UsableSubnetworksAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            UsableSubnetworksAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            UsableSubnetworksAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            UsableSubnetworksAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            UsableSubnetworksAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            UsableSubnetworksAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            UsableSubnetworksAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            UsableSubnetworksAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            UsableSubnetworksAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            UsableSubnetworksAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            UsableSubnetworksAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            UsableSubnetworksAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            UsableSubnetworksAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            UsableSubnetworksAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for UsableSubnetworksAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(UsableSubnetworksAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a UsableSubnetworksAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VmEndpointNatMappingsListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum VmEndpointNatMappingsListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for VmEndpointNatMappingsListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VmEndpointNatMappingsListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            VmEndpointNatMappingsListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            VmEndpointNatMappingsListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            VmEndpointNatMappingsListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            VmEndpointNatMappingsListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            VmEndpointNatMappingsListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            VmEndpointNatMappingsListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            VmEndpointNatMappingsListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            VmEndpointNatMappingsListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            VmEndpointNatMappingsListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            VmEndpointNatMappingsListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            VmEndpointNatMappingsListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            VmEndpointNatMappingsListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            VmEndpointNatMappingsListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            VmEndpointNatMappingsListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            VmEndpointNatMappingsListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            VmEndpointNatMappingsListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            VmEndpointNatMappingsListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            VmEndpointNatMappingsListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            VmEndpointNatMappingsListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            VmEndpointNatMappingsListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            VmEndpointNatMappingsListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for VmEndpointNatMappingsListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(VmEndpointNatMappingsListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(VmEndpointNatMappingsListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(VmEndpointNatMappingsListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(VmEndpointNatMappingsListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(VmEndpointNatMappingsListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(VmEndpointNatMappingsListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(VmEndpointNatMappingsListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(VmEndpointNatMappingsListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(VmEndpointNatMappingsListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(VmEndpointNatMappingsListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(VmEndpointNatMappingsListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(VmEndpointNatMappingsListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(VmEndpointNatMappingsListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(VmEndpointNatMappingsListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(VmEndpointNatMappingsListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(VmEndpointNatMappingsListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(VmEndpointNatMappingsListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(VmEndpointNatMappingsListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(VmEndpointNatMappingsListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(VmEndpointNatMappingsListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(VmEndpointNatMappingsListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(VmEndpointNatMappingsListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(VmEndpointNatMappingsListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VmEndpointNatMappingsListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnGatewayAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum VpnGatewayAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for VpnGatewayAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnGatewayAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            VpnGatewayAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            VpnGatewayAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            VpnGatewayAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            VpnGatewayAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            VpnGatewayAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            VpnGatewayAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            VpnGatewayAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            VpnGatewayAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            VpnGatewayAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            VpnGatewayAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            VpnGatewayAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            VpnGatewayAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            VpnGatewayAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            VpnGatewayAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            VpnGatewayAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            VpnGatewayAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            VpnGatewayAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            VpnGatewayAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            VpnGatewayAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            VpnGatewayAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            VpnGatewayAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnGatewayAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(VpnGatewayAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(VpnGatewayAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(VpnGatewayAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(VpnGatewayAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(VpnGatewayAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(VpnGatewayAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(VpnGatewayAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(VpnGatewayAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(VpnGatewayAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(VpnGatewayAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(VpnGatewayAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(VpnGatewayAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(VpnGatewayAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(VpnGatewayAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(VpnGatewayAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(VpnGatewayAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(VpnGatewayAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(VpnGatewayAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(VpnGatewayAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(VpnGatewayAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(VpnGatewayAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(VpnGatewayAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(VpnGatewayAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnGatewayAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnGatewayListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum VpnGatewayListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for VpnGatewayListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnGatewayListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            VpnGatewayListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            VpnGatewayListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            VpnGatewayListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            VpnGatewayListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            VpnGatewayListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            VpnGatewayListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            VpnGatewayListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            VpnGatewayListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            VpnGatewayListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            VpnGatewayListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            VpnGatewayListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            VpnGatewayListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            VpnGatewayListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            VpnGatewayListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            VpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            VpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            VpnGatewayListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            VpnGatewayListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            VpnGatewayListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            VpnGatewayListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            VpnGatewayListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            VpnGatewayListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            VpnGatewayListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            VpnGatewayListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            VpnGatewayListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            VpnGatewayListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            VpnGatewayListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnGatewayListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(VpnGatewayListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(VpnGatewayListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(VpnGatewayListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(VpnGatewayListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(VpnGatewayListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(VpnGatewayListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(VpnGatewayListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(VpnGatewayListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(VpnGatewayListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(VpnGatewayListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(VpnGatewayListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(VpnGatewayListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(VpnGatewayListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(VpnGatewayListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(VpnGatewayListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(VpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(VpnGatewayListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(VpnGatewayListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(VpnGatewayListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(VpnGatewayListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(VpnGatewayListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(VpnGatewayListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(VpnGatewayListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(VpnGatewayListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(VpnGatewayListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(VpnGatewayListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(VpnGatewayListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(VpnGatewayListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnGatewayListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnGatewaysScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum VpnGatewaysScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for VpnGatewaysScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnGatewaysScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            VpnGatewaysScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            VpnGatewaysScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            VpnGatewaysScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            VpnGatewaysScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            VpnGatewaysScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            VpnGatewaysScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            VpnGatewaysScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            VpnGatewaysScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            VpnGatewaysScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            VpnGatewaysScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            VpnGatewaysScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            VpnGatewaysScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            VpnGatewaysScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            VpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            VpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            VpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            VpnGatewaysScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            VpnGatewaysScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            VpnGatewaysScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            VpnGatewaysScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            VpnGatewaysScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            VpnGatewaysScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            VpnGatewaysScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            VpnGatewaysScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            VpnGatewaysScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            VpnGatewaysScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            VpnGatewaysScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnGatewaysScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(VpnGatewaysScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(VpnGatewaysScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(VpnGatewaysScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(VpnGatewaysScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(VpnGatewaysScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(VpnGatewaysScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(VpnGatewaysScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(VpnGatewaysScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(VpnGatewaysScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(VpnGatewaysScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(VpnGatewaysScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(VpnGatewaysScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(VpnGatewaysScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(VpnGatewaysScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(VpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(VpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(VpnGatewaysScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(VpnGatewaysScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(VpnGatewaysScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(VpnGatewaysScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(VpnGatewaysScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(VpnGatewaysScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(VpnGatewaysScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(VpnGatewaysScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(VpnGatewaysScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(VpnGatewaysScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(VpnGatewaysScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(VpnGatewaysScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnGatewaysScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnTunnelAggregatedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum VpnTunnelAggregatedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for VpnTunnelAggregatedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnTunnelAggregatedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            VpnTunnelAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            VpnTunnelAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            VpnTunnelAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            VpnTunnelAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            VpnTunnelAggregatedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            VpnTunnelAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            VpnTunnelAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            VpnTunnelAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            VpnTunnelAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            VpnTunnelAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            VpnTunnelAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            VpnTunnelAggregatedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            VpnTunnelAggregatedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            VpnTunnelAggregatedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            VpnTunnelAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            VpnTunnelAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            VpnTunnelAggregatedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            VpnTunnelAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            VpnTunnelAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            VpnTunnelAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            VpnTunnelAggregatedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnTunnelAggregatedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(VpnTunnelAggregatedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(VpnTunnelAggregatedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(VpnTunnelAggregatedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(VpnTunnelAggregatedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(VpnTunnelAggregatedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(VpnTunnelAggregatedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(VpnTunnelAggregatedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(VpnTunnelAggregatedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(VpnTunnelAggregatedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(VpnTunnelAggregatedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(VpnTunnelAggregatedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(VpnTunnelAggregatedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(VpnTunnelAggregatedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(VpnTunnelAggregatedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(VpnTunnelAggregatedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(VpnTunnelAggregatedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(VpnTunnelAggregatedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(VpnTunnelAggregatedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(VpnTunnelAggregatedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(VpnTunnelAggregatedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(VpnTunnelAggregatedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(VpnTunnelAggregatedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(VpnTunnelAggregatedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnTunnelAggregatedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnTunnelListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum VpnTunnelListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for VpnTunnelListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnTunnelListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            VpnTunnelListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            VpnTunnelListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            VpnTunnelListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            VpnTunnelListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            VpnTunnelListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            VpnTunnelListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            VpnTunnelListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            VpnTunnelListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            VpnTunnelListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            VpnTunnelListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            VpnTunnelListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            VpnTunnelListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            VpnTunnelListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            VpnTunnelListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            VpnTunnelListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            VpnTunnelListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            VpnTunnelListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            VpnTunnelListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            VpnTunnelListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            VpnTunnelListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            VpnTunnelListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            VpnTunnelListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            VpnTunnelListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            VpnTunnelListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            VpnTunnelListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            VpnTunnelListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            VpnTunnelListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnTunnelListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(VpnTunnelListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(VpnTunnelListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(VpnTunnelListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(VpnTunnelListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(VpnTunnelListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(VpnTunnelListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(VpnTunnelListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(VpnTunnelListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(VpnTunnelListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(VpnTunnelListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(VpnTunnelListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(VpnTunnelListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(VpnTunnelListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(VpnTunnelListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(VpnTunnelListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(VpnTunnelListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(VpnTunnelListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(VpnTunnelListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(VpnTunnelListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(VpnTunnelListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(VpnTunnelListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(VpnTunnelListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(VpnTunnelListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(VpnTunnelListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(VpnTunnelListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(VpnTunnelListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(VpnTunnelListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(VpnTunnelListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnTunnelListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region VpnTunnelsScopedListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum VpnTunnelsScopedListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for VpnTunnelsScopedListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            VpnTunnelsScopedListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            VpnTunnelsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            VpnTunnelsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            VpnTunnelsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            VpnTunnelsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            VpnTunnelsScopedListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            VpnTunnelsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            VpnTunnelsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            VpnTunnelsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            VpnTunnelsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            VpnTunnelsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            VpnTunnelsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            VpnTunnelsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            VpnTunnelsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            VpnTunnelsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            VpnTunnelsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            VpnTunnelsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            VpnTunnelsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            VpnTunnelsScopedListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            VpnTunnelsScopedListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            VpnTunnelsScopedListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            VpnTunnelsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            VpnTunnelsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            VpnTunnelsScopedListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            VpnTunnelsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            VpnTunnelsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            VpnTunnelsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            VpnTunnelsScopedListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for VpnTunnelsScopedListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(VpnTunnelsScopedListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(VpnTunnelsScopedListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(VpnTunnelsScopedListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(VpnTunnelsScopedListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(VpnTunnelsScopedListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(VpnTunnelsScopedListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(VpnTunnelsScopedListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(VpnTunnelsScopedListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(VpnTunnelsScopedListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(VpnTunnelsScopedListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(VpnTunnelsScopedListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(VpnTunnelsScopedListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(VpnTunnelsScopedListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(VpnTunnelsScopedListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(VpnTunnelsScopedListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(VpnTunnelsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(VpnTunnelsScopedListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(VpnTunnelsScopedListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(VpnTunnelsScopedListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(VpnTunnelsScopedListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(VpnTunnelsScopedListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(VpnTunnelsScopedListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(VpnTunnelsScopedListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(VpnTunnelsScopedListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(VpnTunnelsScopedListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(VpnTunnelsScopedListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(VpnTunnelsScopedListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(VpnTunnelsScopedListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a VpnTunnelsScopedListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region XpnHostListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum XpnHostListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for XpnHostListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            XpnHostListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            XpnHostListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            XpnHostListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            XpnHostListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            XpnHostListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            XpnHostListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            XpnHostListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            XpnHostListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            XpnHostListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            XpnHostListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            XpnHostListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            XpnHostListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            XpnHostListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            XpnHostListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            XpnHostListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            XpnHostListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            XpnHostListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            XpnHostListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            XpnHostListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            XpnHostListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            XpnHostListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            XpnHostListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            XpnHostListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            XpnHostListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            XpnHostListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            XpnHostListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            XpnHostListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            XpnHostListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for XpnHostListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(XpnHostListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(XpnHostListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(XpnHostListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(XpnHostListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(XpnHostListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(XpnHostListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(XpnHostListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(XpnHostListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(XpnHostListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(XpnHostListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(XpnHostListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(XpnHostListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(XpnHostListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(XpnHostListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(XpnHostListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(XpnHostListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(XpnHostListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(XpnHostListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(XpnHostListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(XpnHostListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(XpnHostListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(XpnHostListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(XpnHostListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(XpnHostListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(XpnHostListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(XpnHostListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(XpnHostListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(XpnHostListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a XpnHostListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region ZoneListWarningCodeEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
pub enum ZoneListWarningCodeEnum {
    

    /// Warning about failed cleanup of transient changes made by a failed operation.
    ///
    /// "CLEANUP_FAILED"
    #[serde(rename="CLEANUP_FAILED")]
    CLEANUPFAILED,
    

    /// A link to a deprecated resource was created.
    ///
    /// "DEPRECATED_RESOURCE_USED"
    #[serde(rename="DEPRECATED_RESOURCE_USED")]
    DEPRECATEDRESOURCEUSED,
    

    /// When deploying and at least one of the resources has a type marked as deprecated
    ///
    /// "DEPRECATED_TYPE_USED"
    #[serde(rename="DEPRECATED_TYPE_USED")]
    DEPRECATEDTYPEUSED,
    

    /// The user created a boot disk that is larger than image size.
    ///
    /// "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    #[serde(rename="DISK_SIZE_LARGER_THAN_IMAGE_SIZE")]
    DISKSIZELARGERTHANIMAGESIZE,
    

    /// When deploying and at least one of the resources has a type marked as experimental
    ///
    /// "EXPERIMENTAL_TYPE_USED"
    #[serde(rename="EXPERIMENTAL_TYPE_USED")]
    EXPERIMENTALTYPEUSED,
    

    /// Warning that is present in an external api call
    ///
    /// "EXTERNAL_API_WARNING"
    #[serde(rename="EXTERNAL_API_WARNING")]
    EXTERNALAPIWARNING,
    

    /// Warning that value of a field has been overridden. Deprecated unused field.
    ///
    /// "FIELD_VALUE_OVERRIDEN"
    #[serde(rename="FIELD_VALUE_OVERRIDEN")]
    FIELDVALUEOVERRIDEN,
    

    /// The operation involved use of an injected kernel, which is deprecated.
    ///
    /// "INJECTED_KERNELS_DEPRECATED"
    #[serde(rename="INJECTED_KERNELS_DEPRECATED")]
    INJECTEDKERNELSDEPRECATED,
    

    /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
    ///
    /// "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB"
    #[serde(rename="INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")]
    INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB,
    

    /// When deploying a deployment with a exceedingly large number of resources
    ///
    /// "LARGE_DEPLOYMENT_WARNING"
    #[serde(rename="LARGE_DEPLOYMENT_WARNING")]
    LARGEDEPLOYMENTWARNING,
    

    /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
    ///
    /// "LIST_OVERHEAD_QUOTA_EXCEED"
    #[serde(rename="LIST_OVERHEAD_QUOTA_EXCEED")]
    LISTOVERHEADQUOTAEXCEED,
    

    /// A resource depends on a missing type
    ///
    /// "MISSING_TYPE_DEPENDENCY"
    #[serde(rename="MISSING_TYPE_DEPENDENCY")]
    MISSINGTYPEDEPENDENCY,
    

    /// The route's nextHopIp address is not assigned to an instance on the network.
    ///
    /// "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    #[serde(rename="NEXT_HOP_ADDRESS_NOT_ASSIGNED")]
    NEXTHOPADDRESSNOTASSIGNED,
    

    /// The route's next hop instance cannot ip forward.
    ///
    /// "NEXT_HOP_CANNOT_IP_FORWARD"
    #[serde(rename="NEXT_HOP_CANNOT_IP_FORWARD")]
    NEXTHOPCANNOTIPFORWARD,
    

    /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE"
    #[serde(rename="NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")]
    NEXTHOPINSTANCEHASNOIPV6INTERFACE,
    

    /// The route's nextHopInstance URL refers to an instance that does not exist.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_FOUND"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_FOUND")]
    NEXTHOPINSTANCENOTFOUND,
    

    /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
    ///
    /// "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    #[serde(rename="NEXT_HOP_INSTANCE_NOT_ON_NETWORK")]
    NEXTHOPINSTANCENOTONNETWORK,
    

    /// The route's next hop instance does not have a status of RUNNING.
    ///
    /// "NEXT_HOP_NOT_RUNNING"
    #[serde(rename="NEXT_HOP_NOT_RUNNING")]
    NEXTHOPNOTRUNNING,
    

    /// Error which is not critical. We decided to continue the process despite the mentioned error.
    ///
    /// "NOT_CRITICAL_ERROR"
    #[serde(rename="NOT_CRITICAL_ERROR")]
    NOTCRITICALERROR,
    

    /// No results are present on a particular list page.
    ///
    /// "NO_RESULTS_ON_PAGE"
    #[serde(rename="NO_RESULTS_ON_PAGE")]
    NORESULTSONPAGE,
    

    /// Success is reported, but some results may be missing due to errors
    ///
    /// "PARTIAL_SUCCESS"
    #[serde(rename="PARTIAL_SUCCESS")]
    PARTIALSUCCESS,
    

    /// The user attempted to use a resource that requires a TOS they have not accepted.
    ///
    /// "REQUIRED_TOS_AGREEMENT"
    #[serde(rename="REQUIRED_TOS_AGREEMENT")]
    REQUIREDTOSAGREEMENT,
    

    /// Warning that a resource is in use.
    ///
    /// "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    #[serde(rename="RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")]
    RESOURCEINUSEBYOTHERRESOURCEWARNING,
    

    /// One or more of the resources set to auto-delete could not be deleted because they were in use.
    ///
    /// "RESOURCE_NOT_DELETED"
    #[serde(rename="RESOURCE_NOT_DELETED")]
    RESOURCENOTDELETED,
    

    /// When a resource schema validation is ignored.
    ///
    /// "SCHEMA_VALIDATION_IGNORED"
    #[serde(rename="SCHEMA_VALIDATION_IGNORED")]
    SCHEMAVALIDATIONIGNORED,
    

    /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
    ///
    /// "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    #[serde(rename="SINGLE_INSTANCE_PROPERTY_TEMPLATE")]
    SINGLEINSTANCEPROPERTYTEMPLATE,
    

    /// When undeclared properties in the schema are present
    ///
    /// "UNDECLARED_PROPERTIES"
    #[serde(rename="UNDECLARED_PROPERTIES")]
    UNDECLAREDPROPERTIES,
    

    /// A given scope cannot be reached.
    ///
    /// "UNREACHABLE"
    #[serde(rename="UNREACHABLE")]
    UNREACHABLE,
}

impl AsRef<str> for ZoneListWarningCodeEnum {
    fn as_ref(&self) -> &str {
        match *self {
            ZoneListWarningCodeEnum::CLEANUPFAILED => "CLEANUP_FAILED",
            ZoneListWarningCodeEnum::DEPRECATEDRESOURCEUSED => "DEPRECATED_RESOURCE_USED",
            ZoneListWarningCodeEnum::DEPRECATEDTYPEUSED => "DEPRECATED_TYPE_USED",
            ZoneListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE => "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
            ZoneListWarningCodeEnum::EXPERIMENTALTYPEUSED => "EXPERIMENTAL_TYPE_USED",
            ZoneListWarningCodeEnum::EXTERNALAPIWARNING => "EXTERNAL_API_WARNING",
            ZoneListWarningCodeEnum::FIELDVALUEOVERRIDEN => "FIELD_VALUE_OVERRIDEN",
            ZoneListWarningCodeEnum::INJECTEDKERNELSDEPRECATED => "INJECTED_KERNELS_DEPRECATED",
            ZoneListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB => "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
            ZoneListWarningCodeEnum::LARGEDEPLOYMENTWARNING => "LARGE_DEPLOYMENT_WARNING",
            ZoneListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED => "LIST_OVERHEAD_QUOTA_EXCEED",
            ZoneListWarningCodeEnum::MISSINGTYPEDEPENDENCY => "MISSING_TYPE_DEPENDENCY",
            ZoneListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED => "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
            ZoneListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD => "NEXT_HOP_CANNOT_IP_FORWARD",
            ZoneListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE => "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
            ZoneListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND => "NEXT_HOP_INSTANCE_NOT_FOUND",
            ZoneListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK => "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
            ZoneListWarningCodeEnum::NEXTHOPNOTRUNNING => "NEXT_HOP_NOT_RUNNING",
            ZoneListWarningCodeEnum::NOTCRITICALERROR => "NOT_CRITICAL_ERROR",
            ZoneListWarningCodeEnum::NORESULTSONPAGE => "NO_RESULTS_ON_PAGE",
            ZoneListWarningCodeEnum::PARTIALSUCCESS => "PARTIAL_SUCCESS",
            ZoneListWarningCodeEnum::REQUIREDTOSAGREEMENT => "REQUIRED_TOS_AGREEMENT",
            ZoneListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING => "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
            ZoneListWarningCodeEnum::RESOURCENOTDELETED => "RESOURCE_NOT_DELETED",
            ZoneListWarningCodeEnum::SCHEMAVALIDATIONIGNORED => "SCHEMA_VALIDATION_IGNORED",
            ZoneListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE => "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
            ZoneListWarningCodeEnum::UNDECLAREDPROPERTIES => "UNDECLARED_PROPERTIES",
            ZoneListWarningCodeEnum::UNREACHABLE => "UNREACHABLE",
        }
    }
}

impl std::convert::TryFrom< &str> for ZoneListWarningCodeEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "CLEANUP_FAILED" => Ok(ZoneListWarningCodeEnum::CLEANUPFAILED),
           "DEPRECATED_RESOURCE_USED" => Ok(ZoneListWarningCodeEnum::DEPRECATEDRESOURCEUSED),
           "DEPRECATED_TYPE_USED" => Ok(ZoneListWarningCodeEnum::DEPRECATEDTYPEUSED),
           "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Ok(ZoneListWarningCodeEnum::DISKSIZELARGERTHANIMAGESIZE),
           "EXPERIMENTAL_TYPE_USED" => Ok(ZoneListWarningCodeEnum::EXPERIMENTALTYPEUSED),
           "EXTERNAL_API_WARNING" => Ok(ZoneListWarningCodeEnum::EXTERNALAPIWARNING),
           "FIELD_VALUE_OVERRIDEN" => Ok(ZoneListWarningCodeEnum::FIELDVALUEOVERRIDEN),
           "INJECTED_KERNELS_DEPRECATED" => Ok(ZoneListWarningCodeEnum::INJECTEDKERNELSDEPRECATED),
           "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => Ok(ZoneListWarningCodeEnum::INVALIDHEALTHCHECKFORDYNAMICWIEGHTEDLB),
           "LARGE_DEPLOYMENT_WARNING" => Ok(ZoneListWarningCodeEnum::LARGEDEPLOYMENTWARNING),
           "LIST_OVERHEAD_QUOTA_EXCEED" => Ok(ZoneListWarningCodeEnum::LISTOVERHEADQUOTAEXCEED),
           "MISSING_TYPE_DEPENDENCY" => Ok(ZoneListWarningCodeEnum::MISSINGTYPEDEPENDENCY),
           "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Ok(ZoneListWarningCodeEnum::NEXTHOPADDRESSNOTASSIGNED),
           "NEXT_HOP_CANNOT_IP_FORWARD" => Ok(ZoneListWarningCodeEnum::NEXTHOPCANNOTIPFORWARD),
           "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => Ok(ZoneListWarningCodeEnum::NEXTHOPINSTANCEHASNOIPV6INTERFACE),
           "NEXT_HOP_INSTANCE_NOT_FOUND" => Ok(ZoneListWarningCodeEnum::NEXTHOPINSTANCENOTFOUND),
           "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Ok(ZoneListWarningCodeEnum::NEXTHOPINSTANCENOTONNETWORK),
           "NEXT_HOP_NOT_RUNNING" => Ok(ZoneListWarningCodeEnum::NEXTHOPNOTRUNNING),
           "NOT_CRITICAL_ERROR" => Ok(ZoneListWarningCodeEnum::NOTCRITICALERROR),
           "NO_RESULTS_ON_PAGE" => Ok(ZoneListWarningCodeEnum::NORESULTSONPAGE),
           "PARTIAL_SUCCESS" => Ok(ZoneListWarningCodeEnum::PARTIALSUCCESS),
           "REQUIRED_TOS_AGREEMENT" => Ok(ZoneListWarningCodeEnum::REQUIREDTOSAGREEMENT),
           "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => Ok(ZoneListWarningCodeEnum::RESOURCEINUSEBYOTHERRESOURCEWARNING),
           "RESOURCE_NOT_DELETED" => Ok(ZoneListWarningCodeEnum::RESOURCENOTDELETED),
           "SCHEMA_VALIDATION_IGNORED" => Ok(ZoneListWarningCodeEnum::SCHEMAVALIDATIONIGNORED),
           "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Ok(ZoneListWarningCodeEnum::SINGLEINSTANCEPROPERTYTEMPLATE),
           "UNDECLARED_PROPERTIES" => Ok(ZoneListWarningCodeEnum::UNDECLAREDPROPERTIES),
           "UNREACHABLE" => Ok(ZoneListWarningCodeEnum::UNREACHABLE),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a ZoneListWarningCodeEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceMinimalActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the action to take when updating an instance even if the updated properties do not require it. If not specified, then Compute Engine acts based on the minimum action that the updated properties require.
pub enum InstanceMinimalActionEnum {
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    

    /// No changes can be made to the instance.
    ///
    /// "NO_EFFECT"
    #[serde(rename="NO_EFFECT")]
    NOEFFECT,
    

    /// The instance will not restart.
    ///
    /// "REFRESH"
    #[serde(rename="REFRESH")]
    REFRESH,
    

    /// The instance will restart.
    ///
    /// "RESTART"
    #[serde(rename="RESTART")]
    RESTART,
}

impl AsRef<str> for InstanceMinimalActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceMinimalActionEnum::INVALID => "INVALID",
            InstanceMinimalActionEnum::NOEFFECT => "NO_EFFECT",
            InstanceMinimalActionEnum::REFRESH => "REFRESH",
            InstanceMinimalActionEnum::RESTART => "RESTART",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceMinimalActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "INVALID" => Ok(InstanceMinimalActionEnum::INVALID),
           "NO_EFFECT" => Ok(InstanceMinimalActionEnum::NOEFFECT),
           "REFRESH" => Ok(InstanceMinimalActionEnum::REFRESH),
           "RESTART" => Ok(InstanceMinimalActionEnum::RESTART),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceMinimalActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region InstanceMostDisruptiveAllowedActionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// Specifies the most disruptive action that can be taken on the instance as part of the update. Compute Engine returns an error if the instance properties require a more disruptive action as part of the instance update. Valid options from lowest to highest are NO_EFFECT, REFRESH, and RESTART.
pub enum InstanceMostDisruptiveAllowedActionEnum {
    
    /// "INVALID"
    #[serde(rename="INVALID")]
    INVALID,
    

    /// No changes can be made to the instance.
    ///
    /// "NO_EFFECT"
    #[serde(rename="NO_EFFECT")]
    NOEFFECT,
    

    /// The instance will not restart.
    ///
    /// "REFRESH"
    #[serde(rename="REFRESH")]
    REFRESH,
    

    /// The instance will restart.
    ///
    /// "RESTART"
    #[serde(rename="RESTART")]
    RESTART,
}

impl AsRef<str> for InstanceMostDisruptiveAllowedActionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            InstanceMostDisruptiveAllowedActionEnum::INVALID => "INVALID",
            InstanceMostDisruptiveAllowedActionEnum::NOEFFECT => "NO_EFFECT",
            InstanceMostDisruptiveAllowedActionEnum::REFRESH => "REFRESH",
            InstanceMostDisruptiveAllowedActionEnum::RESTART => "RESTART",
        }
    }
}

impl std::convert::TryFrom< &str> for InstanceMostDisruptiveAllowedActionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "INVALID" => Ok(InstanceMostDisruptiveAllowedActionEnum::INVALID),
           "NO_EFFECT" => Ok(InstanceMostDisruptiveAllowedActionEnum::NOEFFECT),
           "REFRESH" => Ok(InstanceMostDisruptiveAllowedActionEnum::REFRESH),
           "RESTART" => Ok(InstanceMostDisruptiveAllowedActionEnum::RESTART),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a InstanceMostDisruptiveAllowedActionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


// region NetworkDirectionEnum
#[derive(Clone, Copy, Eq, Hash, Debug, PartialEq, Serialize, Deserialize)]
/// The direction of the exchanged routes.
pub enum NetworkDirectionEnum {
    

    /// For routes exported from peer network.
    ///
    /// "INCOMING"
    #[serde(rename="INCOMING")]
    INCOMING,
    

    /// For routes exported from local network.
    ///
    /// "OUTGOING"
    #[serde(rename="OUTGOING")]
    OUTGOING,
}

impl AsRef<str> for NetworkDirectionEnum {
    fn as_ref(&self) -> &str {
        match *self {
            NetworkDirectionEnum::INCOMING => "INCOMING",
            NetworkDirectionEnum::OUTGOING => "OUTGOING",
        }
    }
}

impl std::convert::TryFrom< &str> for NetworkDirectionEnum {
    type Error = ();
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
           "INCOMING" => Ok(NetworkDirectionEnum::INCOMING),
           "OUTGOING" => Ok(NetworkDirectionEnum::OUTGOING),
            _=> Err(()),
        }
    }
}

impl<'a> Into<std::borrow::Cow<'a, str>> for &'a NetworkDirectionEnum {
    fn into(self) -> std::borrow::Cow<'a, str> {
        self.as_ref().into()
    }
}


// endregion


